# manim.animation.numbers.ChangeDecimalToValue.html

# ChangeDecimalToValue¶

Qualified name: manim.animation.numbers.ChangeDecimalToValue

Bases: ChangingDecimal

Methods

Attributes

run_time

decimal_mob (DecimalNumber)

target_number (int)

Initialize self. See help(type(self)) for accurate signature.

decimal_mob (DecimalNumber)

target_number (int)

None


---

# manim.animation.indication.ShowPassingFlash.html

# ShowPassingFlash¶

```python
from manim import *

class TimeWidthValues(Scene):
    def construct(self):
        p = RegularPolygon(5, color=DARK_GRAY, stroke_width=6).scale(3)
        lbl = VMobject()
        self.add(p, lbl)
        p = p.copy().set_color(BLUE)
        for time_width in [0.2, 0.5, 1, 2]:
            lbl.become(Tex(r"\texttt{time\_width={{%.1f}}}"%time_width))
            self.play(ShowPassingFlash(
                p.copy().set_color(BLUE),
                run_time=2,
                time_width=time_width
            ))
```

Qualified name: manim.animation.indication.ShowPassingFlash

Bases: ShowPartial

Show only a sliver of the VMobject each frame.

mobject (VMobject) – The mobject whose stroke is animated.

time_width (float) – The length of the sliver relative to the length of the stroke.

Examples

Example: TimeWidthValues ¶

See also

Create

Methods

clean_up_from_scene

Clean up the Scene after finishing the animation.

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (VMobject)

time_width (float)

None

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None


---

# manim.animation.indication.Circumscribe.html

# Circumscribe¶

```python
from manim import *

class UsingCircumscribe(Scene):
    def construct(self):
        lbl = Tex(r"Circum-\\scribe").scale(2)
        self.add(lbl)
        self.play(Circumscribe(lbl))
        self.play(Circumscribe(lbl, Circle))
        self.play(Circumscribe(lbl, fade_out=True))
        self.play(Circumscribe(lbl, time_width=2))
        self.play(Circumscribe(lbl, Circle, True))
```

Qualified name: manim.animation.indication.Circumscribe

Bases: Succession

Draw a temporary line surrounding the mobject.

mobject (Mobject) – The mobject to be circumscribed.

shape (type) – The shape with which to surround the given mobject. Should be either Rectangle or Circle

fade_in – Whether to make the surrounding shape to fade in. It will be drawn otherwise.

fade_out – Whether to make the surrounding shape to fade out. It will be undrawn otherwise.

time_width – The time_width of the drawing and undrawing. Gets ignored if either fade_in or fade_out is True.

buff (float) – The distance between the surrounding shape and the given mobject.

color (ParsableManimColor) – The color of the surrounding shape.

run_time – The duration of the entire animation.

kwargs – Additional arguments to be passed to the Succession constructor

Examples

Example: UsingCircumscribe ¶

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

shape (type)

buff (float)

color (ParsableManimColor)


---

# manim.animation.transform.ApplyFunction.html

# ApplyFunction¶

Qualified name: manim.animation.transform.ApplyFunction

Bases: Transform

Methods

create_target

Attributes

path_arc

path_func

run_time

function (types.MethodType)

mobject (Mobject)

Initialize self. See help(type(self)) for accurate signature.

function (MethodType)

mobject (Mobject)

None


---

# manim.utils.rate_functions.html

# rate_functions¶

```python
from manim import *

class RateFuncExample(Scene):
    def construct(self):
        x = VGroup()
        for k, v in rate_functions.__dict__.items():
            if "function" in str(v):
                if (
                    not k.startswith("__")
                    and not k.startswith("sqrt")
                    and not k.startswith("bezier")
                ):
                    try:
                        rate_func = v
                        plot = (
                            ParametricFunction(
                                lambda x: [x, rate_func(x), 0],
                                t_range=[0, 1, .01],
                                use_smoothing=False,
                                color=YELLOW,
                            )
                            .stretch_to_fit_width(1.5)
                            .stretch_to_fit_height(1)
                        )
                        plot_bg = SurroundingRectangle(plot).set_color(WHITE)
                        plot_title = (
                            Text(rate_func.__name__, weight=BOLD)
                            .scale(0.5)
                            .next_to(plot_bg, UP, buff=0.1)
                        )
                        x.add(VGroup(plot_bg, plot, plot_title))
                    except: # because functions `not_quite_there`, `function squish_rate_func` are not working.
                        pass
        x.arrange_in_grid(cols=8)
        x.height = config.frame_height
        x.width = config.frame_width
        x.move_to(ORIGIN).scale(0.95)
        self.add(x)
```

```python
from manim import *

class RateFunctions1Example(Scene):
    def construct(self):
        line1 = Line(3*LEFT, 3*RIGHT).shift(UP).set_color(RED)
        line2 = Line(3*LEFT, 3*RIGHT).set_color(GREEN)
        line3 = Line(3*LEFT, 3*RIGHT).shift(DOWN).set_color(BLUE)

        dot1 = Dot().move_to(line1.get_left())
        dot2 = Dot().move_to(line2.get_left())
        dot3 = Dot().move_to(line3.get_left())

        label1 = Tex("Ease In").next_to(line1, RIGHT)
        label2 = Tex("Ease out").next_to(line2, RIGHT)
        label3 = Tex("Ease In Out").next_to(line3, RIGHT)

        self.play(
            FadeIn(VGroup(line1, line2, line3)),
            FadeIn(VGroup(dot1, dot2, dot3)),
            Write(VGroup(label1, label2, label3)),
        )
        self.play(
            MoveAlongPath(dot1, line1, rate_func=rate_functions.ease_in_sine),
            MoveAlongPath(dot2, line2, rate_func=rate_functions.ease_out_sine),
            MoveAlongPath(dot3, line3, rate_func=rate_functions.ease_in_out_sine),
            run_time=7
        )
        self.wait()
```

A selection of rate functions, i.e., speed curves for animations. Please find a standard list at https://easings.net/. Here is a picture for the non-standard ones

Example: RateFuncExample ¶

There are primarily 3 kinds of standard easing functions:

Ease In - The animation has a smooth start.

Ease Out - The animation has a smooth end.

Ease In Out - The animation has a smooth start as well as smooth end.

Note

The standard functions are not exported, so to use them you do something like this: rate_func=rate_functions.ease_in_sine On the other hand, the non-standard functions, which are used more commonly, are exported and can be used directly.

Example: RateFunctions1Example ¶

Classes

RateFunction

Functions

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

float

t (float)

half_life (float)

float

t (float)

float

t (float)

float

func (RateFunction)

proportion (float)

RateFunction

t (float)

pull_factor (float)

float

t (float)

inflection (float)

float

t (float)

inflection (float)

float

t (float)

float

t (float)

inflection (float)

float

Implementation of the 3rd order SmoothStep sigmoid function. The 1st, 2nd and 3rd derivatives (speed, acceleration and jerk) are zero at the endpoints. https://en.wikipedia.org/wiki/Smoothstep

t (float)

float

Implementation of the 2nd order SmoothStep sigmoid function. The 1st and 2nd derivatives (speed and acceleration) are zero at the endpoints. https://en.wikipedia.org/wiki/Smoothstep

t (float)

float

Implementation of the 1st order SmoothStep sigmoid function. The 1st derivative (speed) is zero at the endpoints. https://en.wikipedia.org/wiki/Smoothstep

t (float)

float

func (RateFunction)

a (float)

b (float)

RateFunction

t (float)

inflection (float)

float

t (float)

pause_ratio (float)

float

function (RateFunction)

RateFunction

t (float)

wiggles (float)

float

function (RateFunction)

RateFunction


---

# manim.utils.paths.html

# paths¶

```python
from manim import *

class ClockwisePathExample(Scene):
    def construct(self):
        colors = [RED, GREEN, BLUE]

        starting_points = VGroup(
            *[
                Dot(LEFT + pos, color=color)
                for pos, color in zip([UP, DOWN, LEFT], colors)
            ]
        )

        finish_points = VGroup(
            *[
                Dot(RIGHT + pos, color=color)
                for pos, color in zip([ORIGIN, UP, DOWN], colors)
            ]
        )

        self.add(starting_points)
        self.add(finish_points)
        for dot in starting_points:
            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))

        self.wait()
        self.play(
            Transform(
                starting_points,
                finish_points,
                path_func=utils.paths.clockwise_path(),
                run_time=2,
            )
        )
        self.wait()
```

```python
from manim import *

class CounterclockwisePathExample(Scene):
    def construct(self):
        colors = [RED, GREEN, BLUE]

        starting_points = VGroup(
            *[
                Dot(LEFT + pos, color=color)
                for pos, color in zip([UP, DOWN, LEFT], colors)
            ]
        )

        finish_points = VGroup(
            *[
                Dot(RIGHT + pos, color=color)
                for pos, color in zip([ORIGIN, UP, DOWN], colors)
            ]
        )

        self.add(starting_points)
        self.add(finish_points)
        for dot in starting_points:
            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))

        self.wait()
        self.play(
            Transform(
                starting_points,
                finish_points,
                path_func=utils.paths.counterclockwise_path(),
                run_time=2,
            )
        )
        self.wait()
```

```python
from manim import *

class PathAlongArcExample(Scene):
    def construct(self):
        colors = [RED, GREEN, BLUE]

        starting_points = VGroup(
            *[
                Dot(LEFT + pos, color=color)
                for pos, color in zip([UP, DOWN, LEFT], colors)
            ]
        )

        finish_points = VGroup(
            *[
                Dot(RIGHT + pos, color=color)
                for pos, color in zip([ORIGIN, UP, DOWN], colors)
            ]
        )

        self.add(starting_points)
        self.add(finish_points)
        for dot in starting_points:
            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))

        self.wait()
        self.play(
            Transform(
                starting_points,
                finish_points,
                path_func=utils.paths.path_along_arc(TAU * 2 / 3),
                run_time=3,
            )
        )
        self.wait()
```

```python
from manim import *

class PathAlongCirclesExample(Scene):
    def construct(self):
        colors = [RED, GREEN, BLUE]

        starting_points = VGroup(
            *[
                Dot(LEFT + pos, color=color)
                for pos, color in zip([UP, DOWN, LEFT], colors)
            ]
        )

        finish_points = VGroup(
            *[
                Dot(RIGHT + pos, color=color)
                for pos, color in zip([ORIGIN, UP, DOWN], colors)
            ]
        )

        self.add(starting_points)
        self.add(finish_points)
        for dot in starting_points:
            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))

        circle_center = Dot(3 * LEFT)
        self.add(circle_center)

        self.wait()
        self.play(
            Transform(
                starting_points,
                finish_points,
                path_func=utils.paths.path_along_circles(
                    2 * PI, circle_center.get_center()
                ),
                run_time=3,
            )
        )
        self.wait()
```

```python
from manim import *

class SpiralPathExample(Scene):
    def construct(self):
        colors = [RED, GREEN, BLUE]

        starting_points = VGroup(
            *[
                Dot(LEFT + pos, color=color)
                for pos, color in zip([UP, DOWN, LEFT], colors)
            ]
        )

        finish_points = VGroup(
            *[
                Dot(RIGHT + pos, color=color)
                for pos, color in zip([ORIGIN, UP, DOWN], colors)
            ]
        )

        self.add(starting_points)
        self.add(finish_points)
        for dot in starting_points:
            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))

        self.wait()
        self.play(
            Transform(
                starting_points,
                finish_points,
                path_func=utils.paths.spiral_path(2 * TAU),
                run_time=5,
            )
        )
        self.wait()
```

```python
from manim import *

class StraightPathExample(Scene):
    def construct(self):
        colors = [RED, GREEN, BLUE]

        starting_points = VGroup(
            *[
                Dot(LEFT + pos, color=color)
                for pos, color in zip([UP, DOWN, LEFT], colors)
            ]
        )

        finish_points = VGroup(
            *[
                Dot(RIGHT + pos, color=color)
                for pos, color in zip([ORIGIN, UP, DOWN], colors)
            ]
        )

        self.add(starting_points)
        self.add(finish_points)
        for dot in starting_points:
            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))

        self.wait()
        self.play(
            Transform(
                starting_points,
                finish_points,
                path_func=utils.paths.straight_path(),
                run_time=2,
            )
        )
        self.wait()
```

Functions determining transformation paths between sets of points.

Functions

This function transforms each point by moving clockwise around a half circle.

Examples

Example: ClockwisePathExample ¶

PathFuncType

This function transforms each point by moving counterclockwise around a half circle.

Examples

Example: CounterclockwisePathExample ¶

PathFuncType

This function transforms each point by moving it along a circular arc.

arc_angle (float) – The angle each point traverses around a circular arc.

axis (Vector3D) – The axis of rotation.

PathFuncType

Examples

Example: PathAlongArcExample ¶

This function transforms each point by moving it roughly along a circle, each with its own specified center.

The path may be seen as each point smoothly changing its orbit from its starting position to its destination.

arc_angle (float) – The angle each point traverses around the quasicircle.

circles_centers (ndarray) – The centers of each point’s quasicircle to rotate around.

axis (Vector3D) – The axis of rotation.

PathFuncType

Examples

Example: PathAlongCirclesExample ¶

This function transforms each point by moving along a spiral to its destination.

angle (float) – The angle each point traverses around a spiral.

axis (Vector3D) – The axis of rotation.

PathFuncType

Examples

Example: SpiralPathExample ¶

Simplest path function. Each point in a set goes in a straight path toward its destination.

Examples

Example: StraightPathExample ¶

PathFuncType


---

# manim.camera.camera.html

# camera¶

A camera converts the mobjects contained in a Scene into an array of pixels.

Classes

BackgroundColoredVMobjectDisplayer

Auxiliary class that handles displaying vectorized mobjects with a set background image.

Camera

Base camera class.


---

# manim.animation.movement.SmoothedVectorizedHomotopy.html

# SmoothedVectorizedHomotopy¶

Qualified name: manim.animation.movement.SmoothedVectorizedHomotopy

Bases: Homotopy

Methods

interpolate_submobject

Attributes

run_time

homotopy (Callable[[float, float, float, float], tuple[float, float, float]])

mobject (Mobject)

run_time (float)

apply_function_kwargs (dict[str, Any] | None)

Initialize self. See help(type(self)) for accurate signature.

homotopy (Callable[[float, float, float, float], tuple[float, float, float]])

mobject (Mobject)

run_time (float)

apply_function_kwargs (dict[str, Any] | None)

None


---

# manim.animation.transform.FadeTransform.html

# FadeTransform¶

```python
from manim import *

class DifferentFadeTransforms(Scene):
    def construct(self):
        starts = [Rectangle(width=4, height=1) for _ in range(3)]
        VGroup(*starts).arrange(DOWN, buff=1).shift(3*LEFT)
        targets = [Circle(fill_opacity=1).scale(0.25) for _ in range(3)]
        VGroup(*targets).arrange(DOWN, buff=1).shift(3*RIGHT)

        self.play(*[FadeIn(s) for s in starts])
        self.play(
            FadeTransform(starts[0], targets[0], stretch=True),
            FadeTransform(starts[1], targets[1], stretch=False, dim_to_match=0),
            FadeTransform(starts[2], targets[2], stretch=False, dim_to_match=1)
        )

        self.play(*[FadeOut(mobj) for mobj in self.mobjects])
```

Qualified name: manim.animation.transform.FadeTransform

Bases: Transform

Fades one mobject into another.

mobject – The starting Mobject.

target_mobject – The target Mobject.

stretch – Controls whether the target Mobject is stretched during the animation. Default: True.

dim_to_match – If the target mobject is not stretched automatically, this allows to adjust the initial scale of the target Mobject while it is shifted in. Setting this to 0, 1, and 2, respectively, matches the length of the target with the length of the starting Mobject in x, y, and z direction, respectively.

kwargs – Further keyword arguments are passed to the parent class.

Examples

Example: DifferentFadeTransforms ¶

Methods

begin

Initial setup for the animation.

clean_up_from_scene

Clean up the Scene after finishing the animation.

get_all_families_zipped

get_all_mobjects

Get all mobjects involved in the animation.

ghost_to

Replaces the source by the target and sets the opacity to 0.

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

Initial setup for the animation.

The mobject to which this animation is bound is a group consisting of both the starting and the ending mobject. At the start, the ending mobject replaces the starting mobject (and is completely faded). In the end, it is set to be the other way around.

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene – The scene the animation should be cleaned up from.

Get all mobjects involved in the animation.

Ordering must match the ordering of arguments to interpolate_submobject

The sequence of mobjects.

Sequence[Mobject]

Replaces the source by the target and sets the opacity to 0.

If the provided target has no points, and thus a location of [0, 0, 0] the source will simply fade out where it currently is.


---

# manim.utils.bezier.html

# bezier¶

```python
>>> integer, residue = integer_interpolate(start=0, end=10, alpha=0.46)
>>> np.allclose((integer, residue), (4, 0.6))
True
```

```python
>>> inverse_interpolate(start=2, end=6, value=4)
np.float64(0.5)

>>> start = np.array([1, 2, 1])
>>> end = np.array([7, 8, 11])
>>> value = np.array([4, 5, 5])
>>> inverse_interpolate(start, end, value)
array([0.5, 0.5, 0.4])
```

```python
>>> import numpy as np
>>> from manim import is_closed
>>> is_closed(
...     np.array(
...         [
...             [0, 0, 0],
...             [1, 2, 3],
...             [3, 2, 1],
...             [0, 0, 0],
...         ]
...     )
... )
True
>>> is_closed(
...     np.array(
...         [
...             [0, 0, 0],
...             [1, 2, 3],
...             [3, 2, 1],
...             [1e-10, 1e-10, 1e-10],
...         ]
...     )
... )
True
>>> is_closed(
...     np.array(
...         [
...             [0, 0, 0],
...             [1, 2, 3],
...             [3, 2, 1],
...             [1e-2, 1e-2, 1e-2],
...         ]
...     )
... )
False
```

```python
>>> match_interpolate(0, 100, 10, 20, 15)
np.float64(50.0)
```

Utility functions related to Bézier curves.

Functions

Classic implementation of a Bézier curve.

points – \((d+1, 3)\)-shaped array of \(d+1\) control points defining a single Bézier curve of degree \(d\). Alternatively, for vectorization purposes, points can also be a \((d+1, M, 3)\)-shaped sequence of \(d+1\) arrays of \(M\) control points each, which define M Bézier curves instead.

bezier_func – Function describing the Bézier curve. The behaviour of this function depends on the shape of points: If points was a \((d+1, 3)\) array representing a single Bézier curve, then bezier_func can receive either: a float t, in which case it returns a single \((1, 3)\)-shaped Point3D representing the evaluation of the Bézier at t, or an \((n, 1)\)-shaped ColVector containing \(n\) values to evaluate the Bézier curve at, returning instead an \((n, 3)\)-shaped Point3D_Array containing the points resulting from evaluating the Bézier at each of the \(n\) values. Warning If passing a vector of \(t\)-values to bezier_func, it must be a column vector/matrix of shape \((n, 1)\). Passing an 1D array of shape \((n,)\) is not supported and will result in undefined behaviour. If points was a \((d+1, M, 3)\) array describing \(M\) Bézier curves, then bezier_func can receive either: a float t, in which case it returns an \((M, 3)\)-shaped Point3D_Array representing the evaluation of the \(M\) Bézier curves at the same value t, or an \((M, 1)\)-shaped ColVector containing \(M\) values, such that the \(i\)-th Bézier curve defined by points is evaluated at the corresponding \(i\)-th value in t, returning again an \((M, 3)\)-shaped Point3D_Array containing those \(M\) evaluations. Warning Unlike the previous case, if you pass a ColVector to bezier_func, it must contain exactly \(M\) values, each value for each of the \(M\) Bézier curves defined by points. Any array of shape other than \((M, 1)\) will result in undefined behaviour.

bezier_func – Function describing the Bézier curve. The behaviour of this function depends on the shape of points:

If points was a \((d+1, 3)\) array representing a single Bézier curve, then bezier_func can receive either:

a float t, in which case it returns a single \((1, 3)\)-shaped Point3D representing the evaluation of the Bézier at t, or

an \((n, 1)\)-shaped ColVector containing \(n\) values to evaluate the Bézier curve at, returning instead an \((n, 3)\)-shaped Point3D_Array containing the points resulting from evaluating the Bézier at each of the \(n\) values.

Warning

If passing a vector of \(t\)-values to bezier_func, it must be a column vector/matrix of shape \((n, 1)\). Passing an 1D array of shape \((n,)\) is not supported and will result in undefined behaviour.

If points was a \((d+1, M, 3)\) array describing \(M\) Bézier curves, then bezier_func can receive either:

a float t, in which case it returns an \((M, 3)\)-shaped Point3D_Array representing the evaluation of the \(M\) Bézier curves at the same value t, or

an \((M, 1)\)-shaped ColVector containing \(M\) values, such that the \(i\)-th Bézier curve defined by points is evaluated at the corresponding \(i\)-th value in t, returning again an \((M, 3)\)-shaped Point3D_Array containing those \(M\) evaluations.

Warning

Unlike the previous case, if you pass a ColVector to bezier_func, it must contain exactly \(M\) values, each value for each of the \(M\) Bézier curves defined by points. Any array of shape other than \((M, 1)\) will result in undefined behaviour.

typing.Callable [[float | ColVector], Point3D | Point3D_Array]

Subdivides each curve in bezier_tuples into as many parts as necessary, until the final number of curves reaches a desired amount, new_number_of_curves.

bezier_tuples (BezierPointsLike_Array) – An array of multiple Bézier curves of degree \(d\) to be remapped. The shape of this array must be (current_number_of_curves, nppc, dim), where: current_number_of_curves is the current amount of curves in the array bezier_tuples, nppc is the amount of points per curve, such that their degree is nppc-1, and dim is the dimension of the points, usually \(3\).

An array of multiple Bézier curves of degree \(d\) to be remapped. The shape of this array must be (current_number_of_curves, nppc, dim), where:

current_number_of_curves is the current amount of curves in the array bezier_tuples,

nppc is the amount of points per curve, such that their degree is nppc-1, and

dim is the dimension of the points, usually \(3\).

new_number_of_curves (int) – The number of curves that the output will contain. This needs to be higher than the current number.

The new array of shape (new_number_of_curves, nppc, dim), containing the new Bézier curves after the remap.

BezierPoints_Array

If a0, h0, h1 and a1 are the control points of a cubic Bézier curve, approximate the curve with two quadratic Bézier curves and return an array of 6 points, where the first 3 points represent the first quadratic curve and the last 3 represent the second one.

Otherwise, if a0, h0, h1 and a1 are _arrays_ of \(N\) points representing \(N\) cubic Bézier curves, return an array of \(6N\) points where each group of \(6\) consecutive points approximates each of the \(N\) curves in a similar way as above.

Note

If the cubic spline given by the original cubic Bézier curves is smooth, this algorithm will generate a quadratic spline which is also smooth.

If a cubic Bézier is given by

where \(A_0\), \(H_0\), \(H_1\) and \(A_1\) are its control points, then this algorithm should generate two quadratic Béziers given by

where \(M_0\) and \(M_1\) are the respective handles to be found for both curves, and \(K\) is the end anchor of the 1st curve and the start anchor of the 2nd, which must also be found.

To solve for \(M_0\), \(M_1\) and \(K\), three conditions can be imposed:

\(Q_0'(0) = \frac{1}{2}C'(0)\). The derivative of the first quadratic curve at \(t = 0\) should be proportional to that of the original cubic curve, also at \(t = 0\). Because the cubic curve is split into two parts, it is necessary to divide this by two: the speed of a point travelling through the curve should be half of the original. This gives:

\(Q_1'(1) = \frac{1}{2}C'(1)\). The derivative of the second quadratic curve at \(t = 1\) should be half of that of the original cubic curve for the same reasons as above, also at \(t = 1\). This gives:

\(Q_0'(1) = Q_1'(0)\). The derivatives of both quadratic curves should match at the point \(K\), in order for the final spline to be smooth. This gives:

This is sufficient to find proper control points for the quadratic Bézier curves.

a0 – The start anchor of a single cubic Bézier curve, or an array of \(N\) start anchors for \(N\) curves.

h0 – The first handle of a single cubic Bézier curve, or an array of \(N\) first handles for \(N\) curves.

h1 – The second handle of a single cubic Bézier curve, or an array of \(N\) second handles for \(N\) curves.

a1 – The end anchor of a single cubic Bézier curve, or an array of \(N\) end anchors for \(N\) curves.

An array containing either 6 points for 2 quadratic Bézier curves approximating the original cubic curve, or \(6N\) points for \(2N\) quadratic curves approximating \(N\) cubic curves.

result

ValueError – If a0, h0, h1 and a1 have different dimensions, or if their number of dimensions is not 1 or 2.

Special case of get_smooth_cubic_bezier_handle_points(), when the anchors form a closed loop.

Note

A system of equations must be solved to get the first handles of every Bézier curve (referred to as \(H_1\)). Then \(H_2\) (the second handles) can be obtained separately.

See also

The equations were obtained from:

Conditions on control points for continuous curvature. (2016). Jaco Stuifbergen.

In general, if there are \(N+1\) anchors, there will be \(N\) Bézier curves and thus \(N\) pairs of handles to find. We must solve the following system of equations for the 1st handles (example for \(N = 5\)):

which will be expressed as \(RH_1 = D\).

\(R\) is almost a tridiagonal matrix, so we could use Thomas’ algorithm.

See also

Tridiagonal matrix algorithm. Wikipedia.

However, \(R\) has ones at the opposite corners. A solution to this is the first decomposition proposed in the link below, with \(\alpha = 1\):

See also

Tridiagonal matrix algorithm # Variants. Wikipedia.

We decompose \(R = T + uv^t\), where \(T\) is a tridiagonal matrix, and \(u, v\) are \(N\)-D vectors such that \(u_0 = u_{N-1} = v_0 = v_{N-1} = 1\), and \(u_i = v_i = 0, \forall i \in \{1, ..., N-2\}\).

Thus:

If we find a vector \(q\) such that \(Tq = u\):

According to Sherman-Morrison’s formula:

See also

Sherman-Morrison’s formula. Wikipedia.

If we find \(Y = T^{-1} D\), or in other words, if we solve for \(Y\) in \(TY = D\):

Therefore, we must solve for \(q\) and \(Y\) in \(Tq = u\) and \(TY = D\). As \(T\) is now tridiagonal, we shall use Thomas’ algorithm.

Define:

\(a = [a_0, \ a_1, \ ..., \ a_{N-2}]\) as \(T\)’s lower diagonal of \(N-1\) elements, such that \(a_0 = a_1 = ... = a_{N-2} = 1\), so this diagonal is filled with ones;

\(b = [b_0, \ b_1, \ ..., \ b_{N-2}, \ b_{N-1}]\) as \(T\)’s main diagonal of \(N\) elements, such that \(b_0 = b_{N-1} = 3\), and \(b_1 = b_2 = ... = b_{N-2} = 4\);

\(c = [c_0, \ c_1, \ ..., \ c_{N-2}]\) as \(T\)’s upper diagonal of \(N-1\) elements, such that \(c_0 = c_1 = ... = c_{N-2} = 1\): this diagonal is also filled with ones.

If, according to Thomas’ algorithm, we define:

Then:

Finally, we can do Backward Substitution to find \(q\) and \(Y\):

With those values, we can finally calculate \(H_1 = Y - \frac{1}{1 + v^tq} qv^tY\). Given that \(v_0 = v_{N-1} = 1\), and \(v_1 = v_2 = ... = v_{N-2} = 0\), its dot products with \(q\) and \(Y\) are respectively \(v^tq = q_0 + q_{N-1}\) and \(v^tY = Y_0 + Y_{N-1}\). Thus:

Once we have \(H_1\), we can get \(H_2\) (the array of second handles) as follows:

Because the matrix \(R\) always follows the same pattern (and thus \(T, u, v\) as well), we can define a memo list for \(c'\) and \(u'\) to avoid recalculation. We cannot memoize \(D\) and \(Y\), however, because they are always different matrices. We cannot make a memo for \(q\) either, but we can calculate it faster because \(u'\) can be memoized.

anchors (Point3DLike_Array) – Anchors of a closed cubic spline.

A tuple of two arrays: one containing the 1st handle for every curve in the closed cubic spline, and the other containing the 2nd handles.

tuple [Point3D_Array, Point3D_Array]

Given an array of anchors for a cubic spline (array of connected cubic Bézier curves), compute the 1st and 2nd handle for every curve, so that the resulting spline is smooth.

anchors (Point3DLike_Array) – Anchors of a cubic spline.

A tuple of two arrays: one containing the 1st handle for every curve in the cubic spline, and the other containing the 2nd handles.

tuple [Point3D_Array, Point3D_Array]

Special case of get_smooth_cubic_bezier_handle_points(), when the anchors do not form a closed loop.

Note

A system of equations must be solved to get the first handles of every Bèzier curve (referred to as \(H_1\)). Then \(H_2\) (the second handles) can be obtained separately.

See also

The equations were obtained from:

Smooth Bézier Spline Through Prescribed Points. (2012). Particle in Cell Consulting LLC.

Conditions on control points for continuous curvature. (2016). Jaco Stuifbergen.

Warning

The equations in the first webpage have some typos which were corrected in the comments.

In general, if there are \(N+1\) anchors, there will be \(N\) Bézier curves and thus \(N\) pairs of handles to find. We must solve the following system of equations for the 1st handles (example for \(N = 5\)):

which will be expressed as \(TH_1 = D\). \(T\) is a tridiagonal matrix, so the system can be solved in \(O(N)\) operations. Here we shall use Thomas’ algorithm or the tridiagonal matrix algorithm.

See also

Tridiagonal matrix algorithm. Wikipedia.

Define:

\(a = [a_0, \ a_1, \ ..., \ a_{N-2}]\) as \(T\)’s lower diagonal of \(N-1\) elements, such that \(a_0 = a_1 = ... = a_{N-3} = 1\), and \(a_{N-2} = 2\);

\(b = [b_0, \ b_1, \ ..., \ b_{N-2}, \ b_{N-1}]\) as \(T\)’s main diagonal of \(N\) elements, such that \(b_0 = 2\), \(b_1 = b_2 = ... = b_{N-2} = 4\), and \(b_{N-1} = 7\);

\(c = [c_0, \ c_1, \ ..., \ c_{N-2}]\) as \(T\)’s upper diagonal of \({N-1}\) elements, such that \(c_0 = c_1 = ... = c_{N-2} = 1\): this diagonal is filled with ones.

If, according to Thomas’ algorithm, we define:

Then:

Finally, we can do Backward Substitution to find \(H_1\):

Once we have \(H_1\), we can get \(H_2\) (the array of second handles) as follows:

As the matrix \(T\) always follows the same pattern, we can define a memo list for \(c'\) to avoid recalculation. We cannot do the same for \(D\), however, because it is always a different matrix.

anchors (Point3DLike_Array) – Anchors of an open cubic spline.

A tuple of two arrays: one containing the 1st handle for every curve in the open cubic spline, and the other containing the 2nd handles.

tuple [Point3D_Array, Point3D_Array]

This is a variant of interpolate that returns an integer and the residual

start (float) – The start of the range

end (float) – The end of the range

alpha (float) – a float between 0 and 1.

This returns an integer between start and end (inclusive) representing appropriate interpolation between them, along with a “residue” representing a new proportion between the returned integer and the next one of the list.

tuple[int, float]

Example

Linearly interpolates between two values start and end.

start – The start of the range.

end – The end of the range.

alpha – A float between 0 and 1, or an \((n, 1)\) column vector containing \(n\) floats between 0 and 1 to interpolate in a vectorized fashion.

The result of the linear interpolation. If start and end are of type float, and: alpha is also a float, the return is simply another float. alpha is a ColVector, the return is another ColVector. If start and end are of type Point3D, and: alpha is a float, the return is another Point3D. alpha is a ColVector, the return is a Point3D_Array.

The result of the linear interpolation.

If start and end are of type float, and:

alpha is also a float, the return is simply another float.

alpha is a ColVector, the return is another ColVector.

If start and end are of type Point3D, and:

alpha is a float, the return is another Point3D.

alpha is a ColVector, the return is a Point3D_Array.

float | ColVector | Point3D | Point3D_Array

Perform inverse interpolation to determine the alpha values that would produce the specified value given the start and end values or points.

start – The start value or point of the interpolation.

end – The end value or point of the interpolation.

value – The value or point for which the alpha value should be determined.

The alpha values producing the given input when interpolating between start and end.

The alpha values producing the given input

when interpolating between start and end.

Example

Returns True if the spline given by points is closed, by checking if its first and last points are close to each other, or``False`` otherwise.

Note

This function reimplements np.allclose(), because repeated calling of np.allclose() for only 2 points is inefficient.

points (Point3D_Array) – An array of points defining a spline.

Whether the first and last points of the array are close enough or not to be considered the same, thus considering the defined spline as closed.

bool

Examples

Interpolate a value from an old range to a new range.

new_start – The start of the new range.

new_end – The end of the new range.

old_start – The start of the old range.

old_end – The end of the old range.

old_value – The value within the old range whose corresponding value in the new range (with the same alpha value) is desired.

The interpolated value within the new range.

Examples

Returns the midpoint between two values.

start – The first value

end – The second value

The midpoint between the two values

Given an array of points which define a Bézier curve, and two numbers \(a, b\) such that \(0 \le a < b \le 1\), return an array of the same size, which describes the portion of the original Bézier curve on the interval \([a, b]\).

partial_bezier_points() is conceptually equivalent to calling split_bezier() twice and discarding unused Bézier curves, but this is more efficient and doesn’t waste computations.

See also

See split_bezier() for an explanation on how to split Bézier curves.

Note

To find the portion of a Bézier curve with \(t\) between \(a\) and \(b\):

Split the curve at \(t = a\) and extract its 2nd subcurve.

We cannot evaluate the new subcurve at \(t = b\) because its range of values for \(t\) is different. To find the correct value, we need to transform the interval \([a, 1]\) into \([0, 1]\) by first subtracting \(a\) to get \([0, 1-a]\) and then dividing by \(1-a\). Thus, our new value must be \(t = \frac{b - a}{1 - a}\). Define \(u = \frac{b - a}{1 - a}\).

Split the subcurve at \(t = u\) and extract its 1st subcurve.

The final portion is a linear combination of points, and thus the process can be summarized as a linear transformation by some matrix in terms of \(a\) and \(b\). This matrix is given explicitly for Bézier curves up to degree 3, which are often used in Manim. For higher degrees, the algorithm described previously is used.

For the case of a quadratic Bézier curve:

Step 1:

Step 2:

from where one can define a \((3, 3)\) matrix \(P_2\) which, when applied over the array of points, will return the desired partial quadratic Bézier curve:

Similarly, for the cubic Bézier curve case, one can define the following \((4, 4)\) matrix \(P_3\):

points (BezierPointsLike) – set of points defining the bezier curve.

a (float) – lower bound of the desired partial bezier curve.

b (float) – upper bound of the desired partial bezier curve.

An array containing the control points defining the partial Bézier curve.

BezierPoints

Checks if a given point lies on the bezier curves with the given control points.

This is done by solving the bezier polynomial with the point as the constant term; if any real roots exist, the point lies on the bezier curve.

point (Point3DLike) – The Cartesian Coordinates of the point to check.

control_points (BezierPointsLike) – The Cartesian Coordinates of the ordered control points of the bezier curve on which the point may or may not lie.

round_to (float) – A float whose number of decimal places all values such as coordinates of points will be rounded.

Whether the point lies on the curve.

bool

Obtains the proportion along the bezier curve corresponding to a given point given the bezier curve’s control points.

The bezier polynomial is constructed using the coordinates of the given point as well as the bezier curve’s control points. On solving the polynomial for each dimension, if there are roots common to every dimension, those roots give the proportion along the curve the point is at. If there are no real roots, the point does not lie on the curve.

point (Point3DLike) – The Cartesian Coordinates of the point whose parameter should be obtained.

control_points (BezierPointsLike) – The Cartesian Coordinates of the ordered control points of the bezier curve on which the point may or may not lie.

round_to (float) – A float whose number of decimal places all values such as coordinates of points will be rounded.

List containing possible parameters (the proportions along the bezier curve) for the given point on the given bezier curve. This usually only contains one or zero elements, but if the point is, say, at the beginning/end of a closed loop, may return a list with more than 1 value, corresponding to the beginning and end etc. of the loop.

np.ndarray[float]

ValueError – When point and the control points have different shapes.

Split a Bézier curve at argument t into two curves.

Note

See also

A Primer on Bézier Curves #10: Splitting curves. Pomax.

As an example for a cubic Bézier curve, let \(p_0, p_1, p_2, p_3\) be the points needed for the curve \(C_0 = [p_0, \ p_1, \ p_2, \ p_3]\).

Define the 3 linear Béziers \(L_0, L_1, L_2\) as interpolations of \(p_0, p_1, p_2, p_3\):

Define the 2 quadratic Béziers \(Q_0, Q_1\) as interpolations of \(L_0, L_1, L_2\):

Then \(C_0\) is the following interpolation of \(Q_0\) and \(Q_1\):

Evaluating \(C_0\) at a value \(t=t'\) splits \(C_0\) into two cubic Béziers \(H_0\) and \(H_1\), defined by some of the points we calculated earlier:

As the resulting curves are obtained from linear combinations of points, everything can be encoded into a matrix for efficiency, which is done for Bézier curves of degree up to 3.

See also

A Primer on Bézier Curves #11: Splitting curves using matrices. Pomax.

For the simpler case of a quadratic Bézier curve:

from where one can define a \((6, 3)\) split matrix \(S_2\) which can multiply the array of points to compute the return value:

For the previous example with a cubic Bézier curve:

from where one can define a \((8, 4)\) split matrix \(S_3\) which can multiply the array of points to compute the return value:

points (BezierPointsLike) – The control points of the Bézier curve.

t (float) – The t-value at which to split the Bézier curve.

An array containing the control points defining the two Bézier curves.

Point3D_Array

Subdivide a Bézier curve into \(n\) subcurves which have the same shape.

The points at which the curve is split are located at the arguments \(t = \frac{i}{n}\), for \(i \in \{1, ..., n-1\}\).

See also

See split_bezier() for an explanation on how to split Bézier curves.

See partial_bezier_points() for an extra understanding of this function.

Note

The resulting subcurves can be expressed as linear combinations of points, which can be encoded in a single matrix that is precalculated for 2nd and 3rd degree Bézier curves.

As an example for a quadratic Bézier curve: taking inspiration from the explanation in partial_bezier_points(), where the following matrix \(P_2\) was defined to extract the portion of a quadratic Bézier curve for \(t \in [a, b]\):

the plan is to replace \([a, b]\) with \(\left[ \frac{i-1}{n}, \frac{i}{n} \right], \ \forall i \in \{1, ..., n\}\).

As an example for \(n = 2\) divisions, construct \(P_1\) for the interval \(\left[ 0, \frac{1}{2} \right]\), and \(P_2\) for the interval \(\left[ \frac{1}{2}, 1 \right]\):

Therefore, the following \((6, 3)\) subdivision matrix \(D_2\) can be constructed, which will subdivide an array of points into 2 parts:

For quadratic and cubic Bézier curves, the subdivision matrices are memoized for efficiency. For higher degree curves, an iterative algorithm inspired by the one from split_bezier() is used instead.

points (BezierPointsLike) – The control points of the Bézier curve.

n_divisions (int) – The number of curves to subdivide the Bézier curve into

An array containing the points defining the new \(n\) subcurves.

Spline


---

# manim.utils.simple_functions.html

# simple_functions¶

```python
TypeVar('ComparableT', bound=Comparable)
```

```python
>>> solution = binary_search(lambda x: x**2 + 3*x + 1, 11, 0, 5)
>>> bool(abs(solution - 2) < 1e-4)
True
>>> solution = binary_search(lambda x: x**2 + 3*x + 1, 11, 0, 5, tolerance=0.01)
>>> bool(abs(solution - 2) < 0.01)
True
```

```python
>>> binary_search(lambda x: x**2 + 3*x + 1, 71, 0, 5) is None
True
```

```python
>>> clip(15, 11, 20)
15
>>> clip('a', 'h', 'k')
'h'
```

A collection of simple functions.

TypeVar’s

Classes

Comparable

Functions

Searches for a value in a range by repeatedly dividing the range in half.

To be more precise, performs numerical binary search to determine the input to function, between the bounds given, that outputs target to within tolerance (default of 0.0001). Returns None if no input can be found within the bounds.

Examples

Consider the polynomial \(x^2 + 3x + 1\) where we search for a target value of \(11\). An exact solution is \(x = 2\).

Searching in the interval \([0, 5]\) for a target value of \(71\) does not yield a solution:

function (Callable[[float], float])

target (float)

lower_bound (float)

upper_bound (float)

tolerance (float)

float | None

The binomial coefficient n choose k.

\(\binom{n}{k}\) describes the number of possible choices of \(k\) elements from a set of \(n\) elements.

References

https://en.wikipedia.org/wiki/Combination

https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.comb.html

n (int)

k (int)

int

Clips a to the interval [min_a, max_a].

Accepts any comparable objects (i.e. those that support <, >). Returns a if it is between min_a and max_a. Otherwise, whichever of min_a and max_a is closest.

Examples

a (ComparableT)

min_a (ComparableT)

max_a (ComparableT)

ComparableT

Returns the output of the logistic function.

The logistic function, a common example of a sigmoid function, is defined as \(\frac{1}{1 + e^{-x}}\).

References

https://en.wikipedia.org/wiki/Sigmoid_function

https://en.wikipedia.org/wiki/Logistic_function

x (float)

float


---

# manim.animation.updaters.html

# updaters¶

## Modules¶

Animations and utility mobjects related to update functions.

mobject_update_utils

Utility functions for continuous animation of mobjects.

update

Animations that update mobjects.


---

# manim._config.logger_utils.html

# logger_utils¶

Utilities to create and set the logger.

Manim’s logger can be accessed as manim.logger, or as logging.getLogger("manim"), once the library has been imported. Manim also exports a second object, console, which should be used to print on screen messages that need not be logged.

Both logger and console use the rich library to produce rich text format.

Classes

JSONFormatter

A formatter that outputs logs in a custom JSON format.

Functions

Make the manim logger and console.

parser (SectionProxy) – A parser containing any .cfg files in use.

verbosity (str) – The verbosity level of the logger.

The manim logger and consoles. The first console outputs to stdout, the second to stderr. All use the theme returned by parse_theme().

logging.Logger, rich.Console, rich.Console

See also

make_config_parser(), parse_theme()

Notes

The parser is assumed to contain only the options related to configuring the logger at the top level.

Configure the rich style of logger and console output.

parser (SectionProxy) – A parser containing any .cfg files in use.

The rich theme to be used by the manim logger.

rich.Theme

See also

make_logger()

Add a file handler to manim logger.

The path to the file is built using config.log_dir.

scene_name (str) – The name of the scene, used in the name of the log file.

module_name (str) – The name of the module, used in the name of the log file.

log_dir (Path) – Path to the folder where log files are stored.

None


---

# manim.mobject.mobject.html

# mobject¶

```python
Callable[['Mobject', float], object]
```

```python
Callable[['Mobject'], object]
```

```python
from manim import *

class CircleWithContent(VGroup):
    def __init__(self, content):
        super().__init__()
        self.circle = Circle()
        self.content = content
        self.add(self.circle, content)
        content.move_to(self.circle.get_center())

    def clear_content(self):
        self.remove(self.content)
        self.content = None

    @override_animate(clear_content)
    def _clear_content_animation(self, anim_args=None):
        if anim_args is None:
            anim_args = {}
        anim = Uncreate(self.content, **anim_args)
        self.clear_content()
        return anim

class AnimationOverrideExample(Scene):
    def construct(self):
        t = Text("hello!")
        my_mobject = CircleWithContent(t)
        self.play(Create(my_mobject))
        self.play(my_mobject.animate.clear_content())
        self.wait()
```

Base classes for objects that can be displayed.

Type Aliases

Classes

Group

Groups together multiple Mobjects.

Mobject

Mathematical Object: base class for objects that can be displayed on screen.

Functions

Decorator for overriding method animations.

This allows to specify a method (returning an Animation) which is called when the decorated method is used with the .animate syntax for animating the application of a method.

See also

Mobject.animate

Note

Overridden methods cannot be combined with normal or other overridden methods using method chaining with the .animate syntax.

Examples

Example: AnimationOverrideExample ¶

LambdaType


---

# manim.utils.sounds.html

# sounds¶

Sound-related utility functions.

Functions

sound_file_name (StrPath)

Path


---

# manim.utils.deprecation.html

# deprecation¶

```python
TypeVar('T')
```

```python
from manim.utils.deprecation import deprecated

@deprecated
def foo(**kwargs):
    pass


@deprecated
class Bar:
    def __init__(self):
        pass

    @deprecated
    def baz(self):
        pass


foo()
# WARNING  The function foo has been deprecated and may be removed in a later version.

a = Bar()
# WARNING  The class Bar has been deprecated and may be removed in a later version.

a.baz()
# WARNING  The method Bar.baz has been deprecated and may be removed in a later version.
```

```python
from manim.utils.deprecation import deprecated


@deprecated(
    since="v0.2", until="v0.4", replacement="bar", message="It is cooler."
)
def foo():
    pass


foo()
# WARNING  The function foo has been deprecated since v0.2 and is expected to be removed after v0.4. Use bar instead. It is cooler.
```

```python
from manim.utils.deprecation import deprecated


@deprecated(since="05/01/2021", until="06/01/2021")
def foo():
    pass


foo()
# WARNING  The function foo has been deprecated since 05/01/2021 and is expected to be removed after 06/01/2021.
```

```python
from manim.utils.deprecation import deprecated_params

@deprecated_params(params="a, b, c")
def foo(**kwargs):
    pass


foo(x=2, y=3, z=4)
# No warning

foo(a=2, b=3, z=4)
# WARNING  The parameters a and b of method foo have been deprecated and may be removed in a later version.
```

```python
from manim.utils.deprecation import deprecated_params


@deprecated_params(
    params="a, b, c",
    since="v0.2",
    until="v0.4",
    message="The letters x, y, z are cooler.",
)
def foo(**kwargs):
    pass


foo(a=2)
# WARNING  The parameter a of method foo has been deprecated since v0.2 and is expected to be removed after v0.4. The letters x, y, z are cooler.
```

```python
from manim.utils.deprecation import deprecated_params


@deprecated_params(
    redirections=[
        # Two ways to redirect one parameter to another:
        ("old_param", "new_param"),
        lambda old_param2: {"new_param22": old_param2},
    ]
)
def foo(**kwargs):
    return kwargs


foo(x=1, old_param=2)
# WARNING  The parameter old_param of method foo has been deprecated and may be removed in a later version.
# returns {"x": 1, "new_param": 2}
```

```python
from manim.utils.deprecation import deprecated_params


@deprecated_params(
    redirections=[lambda runtime_in_ms: {"run_time": runtime_in_ms / 1000}]
)
def foo(**kwargs):
    return kwargs


foo(runtime_in_ms=500)
# WARNING  The parameter runtime_in_ms of method foo has been deprecated and may be removed in a later version.
# returns {"run_time": 0.5}
```

```python
from manim.utils.deprecation import deprecated_params


@deprecated_params(
    redirections=[lambda buff_x=1, buff_y=1: {"buff": (buff_x, buff_y)}]
)
def foo(**kwargs):
    return kwargs


foo(buff_x=2)
# WARNING  The parameter buff_x of method foo has been deprecated and may be removed in a later version.
# returns {"buff": (2, 1)}
```

```python
from manim.utils.deprecation import deprecated_params


@deprecated_params(
    redirections=[
        lambda buff=1: {"buff_x": buff[0], "buff_y": buff[1]}
        if isinstance(buff, tuple)
        else {"buff_x": buff, "buff_y": buff}
    ]
)
def foo(**kwargs):
    return kwargs


foo(buff=0)
# WARNING  The parameter buff of method foo has been deprecated and may be removed in a later version.
# returns {"buff_x": 0, buff_y: 0}

foo(buff=(1, 2))
# WARNING  The parameter buff of method foo has been deprecated and may be removed in a later version.
# returns {"buff_x": 1, buff_y: 2}
```

Decorators for deprecating classes, functions and function parameters.

TypeVar’s

Functions

Decorator to mark a callable as deprecated.

The decorated callable will cause a warning when used. The docstring of the deprecated callable is adjusted to indicate that this callable is deprecated.

func – The function to be decorated. Should not be set by the user.

since – The version or date since deprecation.

until – The version or date until removal of the deprecated callable.

replacement – The identifier of the callable replacing the deprecated one.

message – The reason for why the callable has been deprecated.

The decorated callable.

Callable

Examples

Basic usage:

You can specify additional information for a more precise warning:

You may also use dates instead of versions:

Decorator to mark parameters of a callable as deprecated.

It can also be used to automatically redirect deprecated parameter values to their replacements.

params (str | Iterable[str] | None) – The parameters to be deprecated. Can consist of: An iterable of strings, with each element representing a parameter to deprecate A single string, with parameter names separated by commas or spaces.

The parameters to be deprecated. Can consist of:

An iterable of strings, with each element representing a parameter to deprecate

A single string, with parameter names separated by commas or spaces.

since (str | None) – The version or date since deprecation.

until (str | None) – The version or date until removal of the deprecated callable.

message (str) – The reason for why the callable has been deprecated.

redirections (None | Iterable[tuple[str, str] | Callable[[...], dict[str, Any]]]) – A list of parameter redirections. Each redirection can be one of the following: A tuple of two strings. The first string defines the name of the deprecated parameter; the second string defines the name of the parameter to redirect to, when attempting to use the first string. A function performing the mapping operation. The parameter names of the function determine which parameters are used as input. The function must return a dictionary which contains the redirected arguments. Redirected parameters are also implicitly deprecated.

A list of parameter redirections. Each redirection can be one of the following:

A tuple of two strings. The first string defines the name of the deprecated parameter; the second string defines the name of the parameter to redirect to, when attempting to use the first string.

A function performing the mapping operation. The parameter names of the function determine which parameters are used as input. The function must return a dictionary which contains the redirected arguments.

Redirected parameters are also implicitly deprecated.

The decorated callable.

Callable

ValueError – If no parameters are defined (neither explicitly nor implicitly).

ValueError – If defined parameters are invalid python identifiers.

Examples

Basic usage:

You can also specify additional information for a more precise warning:

Basic parameter redirection:

Redirecting using a calculated value:

Redirecting multiple parameter values to one:

Redirect one parameter to multiple:


---

# manim.utils.space_ops.html

# space_ops¶

```python
>>> cross2d(np.array([1, 2]), np.array([3, 4]))
np.int64(-2)
>>> cross2d(
...     np.array([[1, 2, 0], [1, 0, 0]]),
...     np.array([[3, 4, 0], [0, 1, 0]]),
... )
array([-2,  1])
```

```python
>>> from manim import Square, get_winding_number
>>> polygon = Square()
>>> get_winding_number(polygon.get_vertices())
np.float64(1.0)
>>> polygon.shift(2 * UP)
Square
>>> get_winding_number(polygon.get_vertices())
np.float64(0.0)
```

Utility functions for two- and three-dimensional vectors.

Functions

point (Sequence[float])

ndarray

Gets angle and axis from a quaternion.

quaternion (Sequence[float]) – The quaternion from which we get the angle and axis.

Gives the angle and axis

Sequence[float]

Returns the angle between two vectors. This angle will always be between 0 and pi

v1 (ndarray) – The first vector.

v2 (ndarray) – The second vector.

The angle between the vectors.

float

Returns polar coordinate theta when vector is projected on xy plane.

vector (Sequence[float] | ndarray) – The vector to find the angle for.

The angle of the vector projected.

float

Returns an array of numbers corresponding to each polar coordinate value (distance, phi, theta).

vec (Sequence[float]) – A numpy array [x, y, z].

ndarray

Gets the center of mass of the points in space.

points (PointNDLike_Array) – The points to find the center of mass from.

The center of mass of the points.

np.ndarray

Finds the cardinal directions using tau.

n (int) – The amount to be rotated, by default 4

start_vect (ndarray) – The direction for the angle to start with, by default RIGHT

The angle which has been rotated.

np.ndarray

complex_func (Callable[[complex], complex])

Callable[[Point3DLike], Point3D]

complex_num (complex)

ndarray

v1 (Vector3D)

v2 (Vector3D)

Vector3D

Compute the determinant(s) of the passed vector (sequences).

a (Vector2D | Vector2D_Array) – A vector or a sequence of vectors.

b (Vector2D | Vector2D_Array) – A vector or a sequence of vectors.

The determinant or sequence of determinants of the first two components of the specified vectors.

Sequence[float] | float

Examples

Returns a list of indices giving a triangulation of a polygon, potentially with holes.

verts (ndarray) – verts is a numpy array of points.

ring_ends (list) – ring_ends is a list of indices indicating where the ends of new paths are.

A list of indices giving a triangulation of a polygon.

list

Return the intersection of a line passing through p0 in direction v0 with one passing through p1 in direction v1 (or array of intersections from arrays of such points/directions). For 3d values, it returns the point on the ray p0 + v0 * t closest to the ray p1 + v1 * t

p0s (Point3DLike_Array)

v0s (Vector3D_Array)

p1s (Point3DLike_Array)

v1s (Vector3D_Array)

threshold (float)

list[Point3D]

Gets the unit normal of the vectors.

v1 (Vector3D) – The first vector.

v2 (Vector3D) – The second vector

tol (float) – [description], by default 1e-6

The normal of the two vectors.

np.ndarray

Determine the number of times a polygon winds around the origin.

The orientation is measured mathematically positively, i.e., counterclockwise.

points (Sequence[ndarray]) – The vertices of the polygon being queried.

float

Examples

Returns the intersection point of two lines, each defined by a pair of distinct points lying on the line.

line1 (Sequence[ndarray]) – A list of two points that determine the first line.

line2 (Sequence[ndarray]) – A list of two points that determine the second line.

The intersection points of the two lines which are intersecting.

np.ndarray

ValueError – Error is produced if the two lines don’t intersect with each other or if the coordinates don’t lie on the xy-plane.

Gets the midpoint of two points.

point1 (Sequence[float]) – The first point.

point2 (Sequence[float]) – The second point.

The midpoint of the points

Union[float, np.ndarray]

v (float)

float

vect (ndarray | tuple[float])

fall_back (ndarray | None)

ndarray

Normalizes an array with the provided axis.

array (ndarray) – The array which has to be normalized.

axis (ndarray) – The axis to be normalized to.

Array which has been normalized according to the axis.

np.ndarray

Returns a list of two points that correspond to the ends of the perpendicular bisector of the two points given.

line (Sequence[ndarray]) – a list of two numpy array points (corresponding to the ends of a line).

norm_vector (Vector3D) – the vector perpendicular to both the line given and the perpendicular bisector.

A list of two numpy array points that correspond to the ends of the perpendicular bisector

list

Used for finding the conjugate of the quaternion

quaternion (Sequence[float]) – The quaternion for which you want to find the conjugate for.

The conjugate of the quaternion.

np.ndarray

Gets a quaternion from an angle and an axis. For more information, check this Wikipedia page.

angle (float) – The angle for the quaternion.

axis (ndarray) – The axis for the quaternion

axis_normalized (bool) – Checks whether the axis is normalized, by default False

Gives back a quaternion from the angle and axis

list[float]

Gets the Hamilton product of the quaternions provided. For more information, check this Wikipedia page.

Returns a list of product of two quaternions.

Union[np.ndarray, List[Union[float, np.ndarray]]]

quats (Sequence[float])

Generates regularly spaced vertices around a circle centered at the origin.

n (int) – The number of vertices

radius (float) – The radius of the circle that the vertices are placed on.

start_angle (float | None) – The angle the vertices start at. If unspecified, for even n values, 0 will be used. For odd n values, 90 degrees is used.

The angle the vertices start at.

If unspecified, for even n values, 0 will be used. For odd n values, 90 degrees is used.

vertices (numpy.ndarray) – The regularly spaced vertices. start_angle (float) – The angle the vertices start at.

vertices (numpy.ndarray) – The regularly spaced vertices.

start_angle (float) – The angle the vertices start at.

tuple[ndarray, float]

Function for rotating a vector.

vector (ndarray) – The vector to be rotated.

angle (float) – The angle to be rotated by.

axis (ndarray) – The axis to be rotated, by default OUT

The rotated vector with provided angle and axis.

np.ndarray

ValueError – If vector is not of dimension 2 or 3.

Returns a rotation matrix for a given angle.

angle (float) – Angle for the rotation matrix.

Gives back the rotated matrix.

np.ndarray

Rotation in R^3 about a specified axis of rotation.

angle (float)

axis (ndarray)

homogeneous (bool)

ndarray

quat (ndarray)

ndarray

angle (float)

axis (ndarray)

ndarray

Converts the quaternion, quat, to an equivalent rotation matrix representation. For more information, check this page.

quat (ndarray) – The quaternion which is to be converted.

Gives back the Rotation matrix representation, returned as a 3-by-3 matrix or 3-by-3-by-N multidimensional array.

List[np.ndarray]

2D implementation of the shoelace formula.

Returns signed area.

float

x_y (Point2D_Array)

Uses the area determined by the shoelace method to determine whether the input set of points is directed clockwise or counterclockwise.

Either "CW" or "CCW".

str

x_y (Point2D_Array)

Returns a numpy array [x, y, z] based on the spherical coordinates given.

spherical (Sequence[float]) – A list of three floats that correspond to the following: r - The distance between the point and the origin. theta - The azimuthal angle of the point to the positive x-axis. phi - The vertical angle of the point to the positive z-axis.

A list of three floats that correspond to the following:

r - The distance between the point and the origin.

theta - The azimuthal angle of the point to the positive x-axis.

phi - The vertical angle of the point to the positive z-axis.

ndarray

dim (int)

thickness (int)

MatrixMN

Returns some matrix in SO(3) which takes the z-axis to the (normalized) vector provided as an argument

vector (ndarray)

ndarray


---

# manim.scene.scene.RerunSceneHandler.html

# RerunSceneHandler¶

Qualified name: manim.scene.scene.RerunSceneHandler

Bases: FileSystemEventHandler

A class to handle rerunning a Scene after the input file is modified.

Methods

on_modified

Called when a file or directory is modified.

Called when a file or directory is modified.

event (DirModifiedEvent or FileModifiedEvent) – Event representing file/directory modification.


---

# manim.animation.transform.ReplacementTransform.html

# ReplacementTransform¶

```python
from manim import *

class ReplacementTransformOrTransform(Scene):
    def construct(self):
        # set up the numbers
        r_transform = VGroup(*[Integer(i) for i in range(1,4)])
        text_1 = Text("ReplacementTransform", color=RED)
        r_transform.add(text_1)

        transform = VGroup(*[Integer(i) for i in range(4,7)])
        text_2 = Text("Transform", color=BLUE)
        transform.add(text_2)

        ints = VGroup(r_transform, transform)
        texts = VGroup(text_1, text_2).scale(0.75)
        r_transform.arrange(direction=UP, buff=1)
        transform.arrange(direction=UP, buff=1)

        ints.arrange(buff=2)
        self.add(ints, texts)

        # The mobs replace each other and none are left behind
        self.play(ReplacementTransform(r_transform[0], r_transform[1]))
        self.play(ReplacementTransform(r_transform[1], r_transform[2]))

        # The mobs linger after the Transform()
        self.play(Transform(transform[0], transform[1]))
        self.play(Transform(transform[1], transform[2]))
        self.wait()
```

Qualified name: manim.animation.transform.ReplacementTransform

Bases: Transform

Replaces and morphs a mobject into a target mobject.

mobject (Mobject) – The starting Mobject.

target_mobject (Mobject) – The target Mobject.

kwargs – Further keyword arguments that are passed to Transform.

Examples

Example: ReplacementTransformOrTransform ¶

Methods

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

target_mobject (Mobject)

None


---

# manim.mobject.table.MathTable.html

# MathTable¶

```python
from manim import *

class MathTableExample(Scene):
    def construct(self):
        t0 = MathTable(
            [["+", 0, 5, 10],
            [0, 0, 5, 10],
            [2, 2, 7, 12],
            [4, 4, 9, 14]],
            include_outer_lines=True)
        self.add(t0)
```

Qualified name: manim.mobject.table.MathTable

Bases: Table

A specialized Table mobject for use with LaTeX.

Examples

Example: MathTableExample ¶

Special case of Table with element_to_mobject set to MathTex. Every entry in table is set in a Latex align environment.

table (Iterable[Iterable[float | str]]) – A 2d array or list of lists. Content of the table have to be valid input for MathTex.

element_to_mobject (Callable[[float | str], VMobject]) – The Mobject class applied to the table entries. Set as MathTex.

kwargs – Additional arguments to be passed to Table.

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Special case of Table with element_to_mobject set to MathTex. Every entry in table is set in a Latex align environment.

table (Iterable[Iterable[float | str]]) – A 2d array or list of lists. Content of the table have to be valid input for MathTex.

element_to_mobject (Callable[[float | str], VMobject]) – The Mobject class applied to the table entries. Set as MathTex.

kwargs – Additional arguments to be passed to Table.


---

# manim.scene.moving_camera_scene.MovingCameraScene.html

# MovingCameraScene¶

Qualified name: manim.scene.moving\_camera\_scene.MovingCameraScene

Bases: Scene

This is a Scene, with special configurations and properties that make it suitable for cases where the camera must be moved around.

Note: Examples are included in the moving_camera_scene module documentation, see below in the ‘see also’ section.

See also

moving_camera_scene MovingCamera

Methods

get_moving_mobjects

This method returns a list of all of the Mobjects in the Scene that are moving, that are also in the animations passed.

Attributes

camera

time

The time since the start of the scene.

This method returns a list of all of the Mobjects in the Scene that are moving, that are also in the animations passed.

*animations (Animation) – The Animations whose mobjects will be checked.


---

# manim.animation.changing.TracedPath.html

# TracedPath¶

```python
from manim import *

class TracedPathExample(Scene):
    def construct(self):
        circ = Circle(color=RED).shift(4*LEFT)
        dot = Dot(color=RED).move_to(circ.get_start())
        rolling_circle = VGroup(circ, dot)
        trace = TracedPath(circ.get_start)
        rolling_circle.add_updater(lambda m: m.rotate(-0.3))
        self.add(trace, rolling_circle)
        self.play(rolling_circle.animate.shift(8*RIGHT), run_time=4, rate_func=linear)
```

```python
from manim import *

class DissipatingPathExample(Scene):
    def construct(self):
        a = Dot(RIGHT * 2)
        b = TracedPath(a.get_center, dissipating_time=0.5, stroke_opacity=[0, 1])
        self.add(a, b)
        self.play(a.animate(path_arc=PI / 4).shift(LEFT * 2))
        self.play(a.animate(path_arc=-PI / 4).shift(LEFT * 2))
        self.wait()
```

Qualified name: manim.animation.changing.TracedPath

Bases: VMobject

Traces the path of a point returned by a function call.

traced_point_func (Callable) – The function to be traced.

stroke_width (float) – The width of the trace.

stroke_color (ParsableManimColor | None) – The color of the trace.

dissipating_time (float | None) – The time taken for the path to dissipate. Default set to None which disables dissipation.

Examples

Example: TracedPathExample ¶

Example: DissipatingPathExample ¶

Methods

update_path

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

traced_point_func (Callable)

stroke_width (float)

stroke_color (ParsableManimColor | None)

dissipating_time (float | None)


---

# manim.scene.zoomed_scene.ZoomedScene.html

# ZoomedScene¶

Qualified name: manim.scene.zoomed\_scene.ZoomedScene

Bases: MovingCameraScene

This is a Scene with special configurations made for when a particular part of the scene must be zoomed in on and displayed separately.

Methods

activate_zooming

This method is used to activate the zooming for the zoomed_camera.

get_zoom_factor

Returns the Zoom factor of the Zoomed camera.

get_zoom_in_animation

Returns the animation of camera zooming in.

get_zoomed_display_pop_out_animation

This is the animation of the popping out of the mini-display that shows the content of the zoomed camera.

setup

This method is used internally by Manim to setup the scene for proper use.

Attributes

camera

time

The time since the start of the scene.

This method is used to activate the zooming for the zoomed_camera.

animate (bool) – Whether or not to animate the activation of the zoomed camera.

Returns the Zoom factor of the Zoomed camera. Defined as the ratio between the height of the zoomed camera and the height of the zoomed mini display. :returns: The zoom factor. :rtype: float

Returns the animation of camera zooming in.

run_time (float) – The run_time of the animation of the camera zooming in.

**kwargs – Any valid keyword arguments of ApplyMethod()

The animation of the camera zooming in.

ApplyMethod

This is the animation of the popping out of the mini-display that shows the content of the zoomed camera.

The Animation of the Zoomed Display popping out.

ApplyMethod

This method is used internally by Manim to setup the scene for proper use.


---

# manim.animation.transform.html

# transform¶

Animations transforming one mobject into another.

Classes

ApplyComplexFunction

ApplyFunction

ApplyMatrix

Applies a matrix transform to an mobject.

ApplyMethod

Animates a mobject by applying a method.

ApplyPointwiseFunction

Animation that applies a pointwise function to a mobject.

ApplyPointwiseFunctionToCenter

ClockwiseTransform

Transforms the points of a mobject along a clockwise oriented arc.

CounterclockwiseTransform

Transforms the points of a mobject along a counterclockwise oriented arc.

CyclicReplace

An animation moving mobjects cyclically.

FadeToColor

Animation that changes color of a mobject.

FadeTransform

Fades one mobject into another.

FadeTransformPieces

Fades submobjects of one mobject into submobjects of another one.

MoveToTarget

Transforms a mobject to the mobject stored in its target attribute.

ReplacementTransform

Replaces and morphs a mobject into a target mobject.

Restore

Transforms a mobject to its last saved state.

ScaleInPlace

Animation that scales a mobject by a certain factor.

ShrinkToCenter

Animation that makes a mobject shrink to center.

Swap

Transform

A Transform transforms a Mobject into a target Mobject.

TransformAnimations

TransformFromCopy

Performs a reversed Transform


---

# manim.camera.mapping_camera.OldMultiCamera.html

# OldMultiCamera¶

Qualified name: manim.camera.mapping\_camera.OldMultiCamera

Bases: Camera

Methods

capture_mobjects

Capture mobjects by printing them on pixel_array.

init_background

Initialize the background.

set_background

Sets the background to the passed pixel_array after converting to valid RGB values.

set_pixel_array

Sets the pixel array of the camera to the passed pixel array.

Attributes

background_color

background_opacity

Capture mobjects by printing them on pixel_array.

This is the essential function that converts the contents of a Scene into an array, which is then converted to an image or video.

mobjects – Mobjects to capture.

kwargs – Keyword arguments to be passed to get_mobjects_to_display().

Notes

For a list of classes that can currently be rendered, see display_funcs().

Initialize the background. If self.background_image is the path of an image the image is set as background; else, the default background color fills the background.

Sets the background to the passed pixel_array after converting to valid RGB values.

pixel_array – The pixel array to set the background to.

convert_from_floats – Whether or not to convert floats values to proper RGB valid ones, by default False

Sets the pixel array of the camera to the passed pixel array.

pixel_array – The pixel array to convert and then set as the camera’s pixel array.

convert_from_floats – Whether or not to convert float values to proper RGB values, by default False


---

# manim.utils.debug.html

# debug¶

```python
from manim import *

class IndexLabelsExample(Scene):
    def construct(self):
        text = MathTex(
            "\\frac{d}{dx}f(x)g(x)=",
            "f(x)\\frac{d}{dx}g(x)",
            "+",
            "g(x)\\frac{d}{dx}f(x)",
        )

        #index the fist term in the MathTex mob
        indices = index_labels(text[0])

        text[0][1].set_color(PURPLE_B)
        text[0][8:12].set_color(DARK_BLUE)

        self.add(text, indices)
```

Debugging utilities.

Functions

Returns a VGroup of Integer mobjects that shows the index of each submobject.

Useful for working with parts of complicated mobjects.

mobject (Mobject) – The mobject that will have its submobjects labelled.

label_height (float) – The height of the labels, by default 0.15.

background_stroke_width (float) – The stroke width of the outline of the labels, by default 5.

background_stroke_color (ManimColor) – The stroke color of the outline of labels.

kwargs (Any) – Additional parameters to be passed into the :class`~.Integer` mobjects used to construct the labels.

VGroup

Examples

Example: IndexLabelsExample ¶

For debugging purposes

mobject (Mobject)

n_tabs (int)

None


---

# manim.mobject.svg.html

# svg¶

## Modules¶

Mobjects related to SVG images.

brace

Mobject representing curly braces.

svg_mobject

Mobjects generated from an SVG file.


---

# manim.animation.transform.TransformAnimations.html

# TransformAnimations¶

Qualified name: manim.animation.transform.TransformAnimations

Bases: Transform

Methods

interpolate

Set the animation progress.

Attributes

path_arc

path_func

run_time

start_anim (Animation)

end_anim (Animation)

rate_func (Callable)

Initialize self. See help(type(self)) for accurate signature.

start_anim (Animation)

end_anim (Animation)

rate_func (Callable)

None

Set the animation progress.

This method gets called for every frame during an animation.

alpha (float) – The relative time to set the animation to, 0 meaning the start, 1 meaning the end.

None


---

# manim.animation.growing.html

# growing¶

```python
from manim import *

class Growing(Scene):
    def construct(self):
        square = Square()
        circle = Circle()
        triangle = Triangle()
        arrow = Arrow(LEFT, RIGHT)
        star = Star()

        VGroup(square, circle, triangle).set_x(0).arrange(buff=1.5).set_y(2)
        VGroup(arrow, star).move_to(DOWN).set_x(0).arrange(buff=1.5).set_y(-2)

        self.play(GrowFromPoint(square, ORIGIN))
        self.play(GrowFromCenter(circle))
        self.play(GrowFromEdge(triangle, DOWN))
        self.play(GrowArrow(arrow))
        self.play(SpinInFromNothing(star))
```

Animations that introduce mobjects to scene by growing them from points.

Example: Growing ¶

Classes

GrowArrow

Introduce an Arrow by growing it from its start toward its tip.

GrowFromCenter

Introduce an Mobject by growing it from its center.

GrowFromEdge

Introduce an Mobject by growing it from one of its bounding box edges.

GrowFromPoint

Introduce an Mobject by growing it from a point.

SpinInFromNothing

Introduce an Mobject spinning and growing it from its center.


---

# manim.animation.transform.TransformFromCopy.html

# TransformFromCopy¶

Qualified name: manim.animation.transform.TransformFromCopy

Bases: Transform

Performs a reversed Transform

Methods

interpolate

Set the animation progress.

Attributes

path_arc

path_func

run_time

mobject (Mobject)

target_mobject (Mobject)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

target_mobject (Mobject)

None

Set the animation progress.

This method gets called for every frame during an animation.

alpha (float) – The relative time to set the animation to, 0 meaning the start, 1 meaning the end.

None


---

# manim.mobject.text.html

# text¶

## Modules¶

Mobjects used to display Text using Pango or LaTeX.

code_mobject

Mobject representing highlighted source code listings.

numbers

Mobjects representing numbers.

tex_mobject

Mobjects representing text rendered using LaTeX.

text_mobject

Mobjects used for displaying (non-LaTeX) text.


---

# manim.animation.transform.ShrinkToCenter.html

# ShrinkToCenter¶

```python
from manim import *

class ShrinkToCenterExample(Scene):
    def construct(self):
        self.play(ShrinkToCenter(Text("Hello World!")))
```

Qualified name: manim.animation.transform.ShrinkToCenter

Bases: ScaleInPlace

Animation that makes a mobject shrink to center.

Examples

Example: ShrinkToCenterExample ¶

Methods

Attributes

path_arc

path_func

run_time

mobject (Mobject)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

None


---

# manim.scene.scene_file_writer.html

# scene_file_writer¶

The interface between scenes and ffmpeg.

Classes

SceneFileWriter

SceneFileWriter is the object that actually writes the animations played, into video files, using FFMPEG.

Functions

input_path (Path)

output_path (Path)

codec_name (str)


---

# manim.mobject.vector_field.ArrowVectorField.html

# ArrowVectorField¶

```python
from manim import *

class BasicUsage(Scene):
    def construct(self):
        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3
        self.add(ArrowVectorField(func))
```

```python
from manim import *

class SizingAndSpacing(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT
        vf = ArrowVectorField(func, x_range=[-7, 7, 1])
        self.add(vf)
        self.wait()

        length_func = lambda x: x / 3
        vf2 = ArrowVectorField(func, x_range=[-7, 7, 1], length_func=length_func)
        self.play(vf.animate.become(vf2))
        self.wait()
```

```python
from manim import *

class Coloring(Scene):
    def construct(self):
        func = lambda pos: pos - LEFT * 5
        colors = [RED, YELLOW, BLUE, DARK_GRAY]
        min_radius = Circle(radius=2, color=colors[0]).shift(LEFT * 5)
        max_radius = Circle(radius=10, color=colors[-1]).shift(LEFT * 5)
        vf = ArrowVectorField(
            func, min_color_scheme_value=2, max_color_scheme_value=10, colors=colors
        )
        self.add(vf, min_radius, max_radius)
```

Qualified name: manim.mobject.vector\_field.ArrowVectorField

Bases: VectorField

A VectorField represented by a set of change vectors.

Vector fields are always based on a function defining the Vector at every position. The values of this functions is displayed as a grid of vectors. By default the color of each vector is determined by it’s magnitude. Other color schemes can be used however.

func (Callable[[np.ndarray], np.ndarray]) – The function defining the rate of change at every position of the vector field.

color (ParsableManimColor | None) – The color of the vector field. If set, position-specific coloring is disabled.

color_scheme (Callable[[np.ndarray], float] | None) – A function mapping a vector to a single value. This value gives the position in the color gradient defined using min_color_scheme_value, max_color_scheme_value and colors.

min_color_scheme_value (float) – The value of the color_scheme function to be mapped to the first color in colors. Lower values also result in the first color of the gradient.

max_color_scheme_value (float) – The value of the color_scheme function to be mapped to the last color in colors. Higher values also result in the last color of the gradient.

colors (Sequence[ParsableManimColor]) – The colors defining the color gradient of the vector field.

x_range (Sequence[float]) – A sequence of x_min, x_max, delta_x

y_range (Sequence[float]) – A sequence of y_min, y_max, delta_y

z_range (Sequence[float]) – A sequence of z_min, z_max, delta_z

three_dimensions (bool) – Enables three_dimensions. Default set to False, automatically turns True if z_range is not None.

length_func (Callable[[float], float]) – The function determining the displayed size of the vectors. The actual size of the vector is passed, the returned value will be used as display size for the vector. By default this is used to cap the displayed size of vectors to reduce the clutter.

opacity (float) – The opacity of the arrows.

vector_config (dict | None) – Additional arguments to be passed to the Vector constructor

kwargs – Additional arguments to be passed to the VGroup constructor

Examples

Example: BasicUsage ¶

Example: SizingAndSpacing ¶

Example: Coloring ¶

Methods

get_vector

Creates a vector in the vector field.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

func (Callable[[np.ndarray], np.ndarray])

color (ParsableManimColor | None)

color_scheme (Callable[[np.ndarray], float] | None)

min_color_scheme_value (float)

max_color_scheme_value (float)

colors (Sequence[ParsableManimColor])

x_range (Sequence[float])

y_range (Sequence[float])

z_range (Sequence[float])

three_dimensions (bool)

length_func (Callable[[float], float])

opacity (float)

vector_config (dict | None)

Creates a vector in the vector field.

The created vector is based on the function of the vector field and is rooted in the given point. Color and length fit the specifications of this vector field.

point (ndarray) – The root point of the vector.


---

# manim.animation.growing.SpinInFromNothing.html

# SpinInFromNothing¶

```python
from manim import *

class SpinInFromNothingExample(Scene):
    def construct(self):
        squares = [Square() for _ in range(3)]
        VGroup(*squares).set_x(0).arrange(buff=2)
        self.play(SpinInFromNothing(squares[0]))
        self.play(SpinInFromNothing(squares[1], angle=2 * PI))
        self.play(SpinInFromNothing(squares[2], point_color=RED))
```

Qualified name: manim.animation.growing.SpinInFromNothing

Bases: GrowFromCenter

Introduce an Mobject spinning and growing it from its center.

mobject (Mobject) – The mobjects to be introduced.

angle (float) – The amount of spinning before mobject reaches its full size. E.g. 2*PI means that the object will do one full spin before being fully introduced.

point_color (str) – Initial color of the mobject before growing to its full size. Leave empty to match mobject’s color.

Examples

Example: SpinInFromNothingExample ¶

Methods

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

angle (float)

point_color (str)

None


---

# manim.scene.vector_space_scene.VectorScene.html

# VectorScene¶

Qualified name: manim.scene.vector\_space\_scene.VectorScene

Bases: Scene

Methods

add_axes

Adds a pair of Axes to the Scene.

add_plane

Adds a NumberPlane object to the background.

add_vector

Returns the Vector after adding it to the Plane.

coords_to_vector

This method writes the vector as a column matrix (henceforth called the label), takes the values in it one by one, and form the corresponding lines that make up the x and y components of the vector.

get_basis_vector_labels

Returns naming labels for the basis vectors.

get_basis_vectors

Returns a VGroup of the Basis Vectors (1,0) and (0,1)

get_vector

Returns an arrow on the Plane given an input numerical vector.

get_vector_label

Returns naming labels for the passed vector.

label_vector

Shortcut method for creating, and animating the addition of a label for the vector.

lock_in_faded_grid

This method freezes the NumberPlane and Axes that were already in the background, and adds new, manipulatable ones to the foreground.

position_x_coordinate

position_y_coordinate

show_ghost_movement

This method plays an animation that partially shows the entire plane moving in the direction of a particular vector.

vector_to_coords

This method displays vector as a Vector() based vector, and then shows the corresponding lines that make up the x and y components of the vector.

write_vector_coordinates

Returns a column matrix indicating the vector coordinates, after writing them to the screen.

Attributes

camera

time

The time since the start of the scene.

Adds a pair of Axes to the Scene.

animate (bool) – Whether or not to animate the addition of the axes through Create.

color (bool) – The color of the axes. Defaults to WHITE.

Adds a NumberPlane object to the background.

animate (bool) – Whether or not to animate the addition of the plane via Create.

**kwargs – Any valid keyword arguments accepted by NumberPlane.

The NumberPlane object.

NumberPlane

Returns the Vector after adding it to the Plane.

vector (Arrow | list | tuple | ndarray) – It can be a pre-made graphical vector, or the coordinates of one.

color (str) – The string of the hex color of the vector. This is only taken into consideration if ‘vector’ is not an Arrow. Defaults to YELLOW.

animate (bool) – Whether or not to animate the addition of the vector by using GrowArrow

**kwargs – Any valid keyword argument of Arrow. These are only considered if vector is not an Arrow.

The arrow representing the vector.

Arrow

This method writes the vector as a column matrix (henceforth called the label), takes the values in it one by one, and form the corresponding lines that make up the x and y components of the vector. Then, an Vector() based vector is created between the lines on the Screen.

vector (ndarray | list | tuple) – The vector to show.

coords_start (ndarray | list | tuple) – The starting point of the location of the label of the vector that shows it numerically. Defaults to 2 * RIGHT + 2 * UP or (2,2)

clean_up (bool) – Whether or not to remove whatever this method did after it’s done.

Returns naming labels for the basis vectors.

**kwargs – Any valid keyword arguments of get_vector_label:vector, label (str,MathTex) at_tip (bool=False), direction (str=”left”), rotate (bool), color (str), label_scale_factor=VECTOR_LABEL_SCALE_FACTOR (int, float),

vector, label (str,MathTex) at_tip (bool=False), direction (str=”left”), rotate (bool), color (str), label_scale_factor=VECTOR_LABEL_SCALE_FACTOR (int, float),

Returns a VGroup of the Basis Vectors (1,0) and (0,1)

i_hat_color (str) – The hex colour to use for the basis vector in the x direction

j_hat_color (str) – The hex colour to use for the basis vector in the y direction

VGroup of the Vector Mobjects representing the basis vectors.

VGroup

Returns an arrow on the Plane given an input numerical vector.

numerical_vector (ndarray | list | tuple) – The Vector to plot.

**kwargs – Any valid keyword argument of Arrow.

The Arrow representing the Vector.

Arrow

Returns naming labels for the passed vector.

vector (Vector) – Vector Object for which to get the label.

at_tip (bool) – Whether or not to place the label at the tip of the vector.

direction (str) – If the label should be on the “left” or right of the vector.

rotate (bool) – Whether or not to rotate it to align it with the vector.

color (str | None) – The color to give the label.

label_scale_factor (float) – How much to scale the label by.

The MathTex of the label.

MathTex

Shortcut method for creating, and animating the addition of a label for the vector.

vector (Vector) – The vector for which the label must be added.

label (MathTex | str) – The MathTex/string of the label.

animate (bool) – Whether or not to animate the labelling w/ Write

**kwargs – Any valid keyword argument of get_vector_label

The MathTex of the label.

MathTex

This method freezes the NumberPlane and Axes that were already in the background, and adds new, manipulatable ones to the foreground.

dimness (float) – The required dimness of the NumberPlane

axes_dimness (float) – The required dimness of the Axes.

This method plays an animation that partially shows the entire plane moving in the direction of a particular vector. This is useful when you wish to convey the idea of mentally moving the entire plane in a direction, without actually moving the plane.

vector (Arrow | list | tuple | ndarray) – The vector which indicates the direction of movement.

This method displays vector as a Vector() based vector, and then shows the corresponding lines that make up the x and y components of the vector. Then, a column matrix (henceforth called the label) is created near the head of the Vector.

vector (ndarray | list | tuple) – The vector to show.

integer_labels (bool) – Whether or not to round the value displayed. in the vector’s label to the nearest integer

clean_up (bool) – Whether or not to remove whatever this method did after it’s done.

Returns a column matrix indicating the vector coordinates, after writing them to the screen.

vector (Arrow) – The arrow representing the vector.

**kwargs – Any valid keyword arguments of coordinate_label():

The column matrix representing the vector.

Matrix


---

# manim.animation.speedmodifier.ChangeSpeed.html

# ChangeSpeed¶

```python
from manim import *

class SpeedModifierExample(Scene):
    def construct(self):
        a = Dot().shift(LEFT * 4)
        b = Dot().shift(RIGHT * 4)
        self.add(a, b)
        self.play(
            ChangeSpeed(
                AnimationGroup(
                    a.animate(run_time=1).shift(RIGHT * 8),
                    b.animate(run_time=1).shift(LEFT * 8),
                ),
                speedinfo={0.3: 1, 0.4: 0.1, 0.6: 0.1, 1: 1},
                rate_func=linear,
            )
        )
```

```python
from manim import *

class SpeedModifierUpdaterExample(Scene):
    def construct(self):
        a = Dot().shift(LEFT * 4)
        self.add(a)

        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))
        self.play(
            ChangeSpeed(
                Wait(2),
                speedinfo={0.4: 1, 0.5: 0.2, 0.8: 0.2, 1: 1},
                affects_speed_updaters=True,
            )
        )
```

```python
from manim import *

class SpeedModifierUpdaterExample2(Scene):
    def construct(self):
        a = Dot().shift(LEFT * 4)
        self.add(a)

        ChangeSpeed.add_updater(a, lambda x, dt: x.shift(RIGHT * 4 * dt))
        self.wait()
        self.play(
            ChangeSpeed(
                Wait(),
                speedinfo={1: 0},
                affects_speed_updaters=True,
            )
        )
```

Qualified name: manim.animation.speedmodifier.ChangeSpeed

Bases: Animation

Modifies the speed of passed animation. AnimationGroup with different lag_ratio can also be used which combines multiple animations into one. The run_time of the passed animation is changed to modify the speed.

anim (Animation | _AnimationBuilder) – Animation of which the speed is to be modified.

speedinfo (dict[float, float]) – Contains nodes (percentage of run_time) and its corresponding speed factor.

rate_func (Callable[[float], float] | None) – Overrides rate_func of passed animation, applied before changing speed.

affects_speed_updaters (bool)

Examples

Example: SpeedModifierExample ¶

Example: SpeedModifierUpdaterExample ¶

Example: SpeedModifierUpdaterExample2 ¶

Methods

add_updater

This static method can be used to apply speed change to updaters.

begin

Begin the animation.

clean_up_from_scene

Clean up the Scene after finishing the animation.

finish

Finish the animation.

get_scaled_total_time

The time taken by the animation under the assumption that the run_time is 1.

interpolate

Set the animation progress.

setup

update_mobjects

Updates things like starting_mobject, and (for Transforms) target_mobject.

Attributes

dt

is_changing_dt

run_time

Initialize self. See help(type(self)) for accurate signature.

anim (Animation | _AnimationBuilder)

speedinfo (dict[float, float])

rate_func (Callable[[float], float] | None)

affects_speed_updaters (bool)

None

Setup up the Scene before starting the animation.

This includes to add() the Animation’s Mobject if the animation is an introducer.

scene – The scene the animation should be cleaned up from.

None

This static method can be used to apply speed change to updaters.

This updater will follow speed and rate function of any ChangeSpeed animation that is playing with affects_speed_updaters=True. By default, updater functions added via the usual Mobject.add_updater() method do not respect the change of animation speed.

mobject (Mobject) – The mobject to which the updater should be attached.

update_function (Updater) – The function that is called whenever a new frame is rendered.

index (int | None) – The position in the list of the mobject’s updaters at which the function should be inserted.

call_updater (bool) – If True, calls the update function when attaching it to the mobject.

See also

ChangeSpeed, Mobject.add_updater()

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None

Finish the animation.

This method gets called when the animation is over.

None

The time taken by the animation under the assumption that the run_time is 1.

float

Set the animation progress.

This method gets called for every frame during an animation.

alpha (float) – The relative time to set the animation to, 0 meaning the start, 1 meaning the end.

None

Updates things like starting_mobject, and (for Transforms) target_mobject. Note, since typically (always?) self.mobject will have its updating suspended during the animation, this will do nothing to self.mobject.

dt (float)

None


---

# manim.mobject.logo.ManimBanner.html

# ManimBanner¶

```python
from manim import *

class DarkThemeBanner(Scene):
    def construct(self):
        banner = ManimBanner()
        self.play(banner.create())
        self.play(banner.expand())
        self.wait()
        self.play(Unwrite(banner))
```

```python
from manim import *

class LightThemeBanner(Scene):
    def construct(self):
        self.camera.background_color = "#ece6e2"
        banner = ManimBanner(dark_theme=False)
        self.play(banner.create())
        self.play(banner.expand())
        self.wait()
        self.play(Unwrite(banner))
```

```python
from manim import *

class ExpandDirections(Scene):
    def construct(self):
        banners = [ManimBanner().scale(0.5).shift(UP*x) for x in [-2, 0, 2]]
        self.play(
            banners[0].expand(direction="right"),
            banners[1].expand(direction="center"),
            banners[2].expand(direction="left"),
        )
```

Qualified name: manim.mobject.logo.ManimBanner

Bases: VGroup

Convenience class representing Manim’s banner.

Can be animated using custom methods.

dark_theme (bool) – If True (the default), the dark theme version of the logo (with light text font) will be rendered. Otherwise, if False, the light theme version (with dark text font) is used.

Examples

Example: DarkThemeBanner ¶

Example: LightThemeBanner ¶

Methods

create

The creation animation for Manim's logo.

expand

An animation that expands Manim's logo into its banner.

scale

Scale the banner by the specified scale factor.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

dark_theme (bool)

The creation animation for Manim’s logo.

run_time (float) – The run time of the animation.

An animation to be used in a Scene.play() call.

AnimationGroup

An animation that expands Manim’s logo into its banner.

The returned animation transforms the banner from its initial state (representing Manim’s logo with just the icons) to its expanded state (showing the full name together with the icons).

See the class documentation for how to use this.

Note

Before calling this method, the text “anim” is not a submobject of the banner object. After the expansion, it is added as a submobject so subsequent animations to the banner object apply to the text “anim” as well.

run_time (float) – The run time of the animation.

direction – The direction in which the logo is expanded.

An animation to be used in a Scene.play() call.

Succession

Examples

Example: ExpandDirections ¶

Scale the banner by the specified scale factor.

scale_factor (float) – The factor used for scaling the banner.

The scaled banner.

ManimBanner


---

# manim.mobject.three_d.html

# three_d¶

## Modules¶

Three-dimensional mobjects.

polyhedra

General polyhedral class and platonic solids.

three_d_utils

Utility functions for three-dimensional mobjects.

three_dimensions

Three-dimensional mobjects.


---

# manim.mobject.vector_field.VectorField.html

# VectorField¶

```python
from manim import *

class Nudging(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[1] / 2) * RIGHT + np.cos(pos[0] / 2) * UP
        vector_field = ArrowVectorField(
            func, x_range=[-7, 7, 1], y_range=[-4, 4, 1], length_func=lambda x: x / 2
        )
        self.add(vector_field)
        circle = Circle(radius=2).shift(LEFT)
        self.add(circle.copy().set_color(GRAY))
        dot = Dot().move_to(circle)

        vector_field.nudge(circle, -2, 60, True)
        vector_field.nudge(dot, -2, 60)

        circle.add_updater(vector_field.get_nudge_updater(pointwise=True))
        dot.add_updater(vector_field.get_nudge_updater())
        self.add(circle, dot)
        self.wait(6)
```

```python
from manim import *

class ScaleVectorFieldFunction(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[1]) * RIGHT + np.cos(pos[0]) * UP
        vector_field = ArrowVectorField(func)
        self.add(vector_field)
        self.wait()

        func = VectorField.scale_func(func, 0.5)
        self.play(vector_field.animate.become(ArrowVectorField(func)))
        self.wait()
```

Qualified name: manim.mobject.vector\_field.VectorField

Bases: VGroup

A vector field.

Vector fields are based on a function defining a vector at every position. This class does by default not include any visible elements but provides methods to move other Mobject s along the vector field.

func (Callable[[np.ndarray], np.ndarray]) – The function defining the rate of change at every position of the VectorField.

color (ParsableManimColor | None) – The color of the vector field. If set, position-specific coloring is disabled.

color_scheme (Callable[[np.ndarray], float] | None) – A function mapping a vector to a single value. This value gives the position in the color gradient defined using min_color_scheme_value, max_color_scheme_value and colors.

min_color_scheme_value (float) – The value of the color_scheme function to be mapped to the first color in colors. Lower values also result in the first color of the gradient.

max_color_scheme_value (float) – The value of the color_scheme function to be mapped to the last color in colors. Higher values also result in the last color of the gradient.

colors (Sequence[ParsableManimColor]) – The colors defining the color gradient of the vector field.

kwargs – Additional arguments to be passed to the VGroup constructor

Methods

fit_to_coordinate_system

Scale the vector field to fit a coordinate system.

get_colored_background_image

Generate an image that displays the vector field.

get_nudge_updater

Get an update function to move a Mobject along the vector field.

get_vectorized_rgba_gradient_function

Generates a gradient of rgbas as a numpy array

nudge

Nudge a Mobject along the vector field.

nudge_submobjects

Apply a nudge along the vector field to all submobjects.

scale_func

Scale a vector field function.

shift_func

Shift a vector field function.

start_submobject_movement

Start continuously moving all submobjects along the vector field.

stop_submobject_movement

Stops the continuous movement started using start_submobject_movement().

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

func (Callable[[np.ndarray], np.ndarray])

color (ParsableManimColor | None)

color_scheme (Callable[[np.ndarray], float] | None)

min_color_scheme_value (float)

max_color_scheme_value (float)

colors (Sequence[ParsableManimColor])

Scale the vector field to fit a coordinate system.

This method is useful when the vector field is defined in a coordinate system different from the one used to display the vector field.

This method can only be used once because it transforms the origin of each vector.

coordinate_system (CoordinateSystem) – The coordinate system to fit the vector field to.

Generate an image that displays the vector field.

The color at each position is calculated by passing the positing through a series of steps: Calculate the vector field function at that position, map that vector to a single value using self.color_scheme and finally generate a color from that value using the color gradient.

sampling_rate (int) – The stepsize at which pixels get included in the image. Lower values give more accurate results, but may take a long time to compute.

The vector field image.

Image.Imgae

Get an update function to move a Mobject along the vector field.

When used with add_updater(), the mobject will move along the vector field, where its speed is determined by the magnitude of the vector field.

speed (float) – At speed=1 the distance a mobject moves per second is equal to the magnitude of the vector field along its path. The speed value scales the speed of such a mobject.

pointwise (bool) – Whether to move the mobject along the vector field. See nudge() for details.

The update function.

Callable[[Mobject, float], Mobject]

Generates a gradient of rgbas as a numpy array

start (float) – start value used for inverse interpolation at inverse_interpolate()

end (float) – end value used for inverse interpolation at inverse_interpolate()

colors (Iterable[ParsableManimColor]) – list of colors to generate the gradient

function to generate the gradients as numpy arrays representing rgba values

Nudge a Mobject along the vector field.

mob (Mobject) – The mobject to move along the vector field

dt (float) – A scalar to the amount the mobject is moved along the vector field. The actual distance is based on the magnitude of the vector field.

substeps (int) – The amount of steps the whole nudge is divided into. Higher values give more accurate approximations.

pointwise (bool) – Whether to move the mobject along the vector field. If False the vector field takes effect on the center of the given Mobject. If True the vector field takes effect on the points of the individual points of the Mobject, potentially distorting it.

This vector field.

VectorField

Examples

Example: Nudging ¶

Apply a nudge along the vector field to all submobjects.

dt (float) – A scalar to the amount the mobject is moved along the vector field. The actual distance is based on the magnitude of the vector field.

substeps (int) – The amount of steps the whole nudge is divided into. Higher values give more accurate approximations.

pointwise (bool) – Whether to move the mobject along the vector field. See nudge() for details.

This vector field.

VectorField

Scale a vector field function.

func (Callable[[ndarray], ndarray]) – The function defining a vector field.

scalar (float) – The scalar to be applied to the vector field.

Callable[[ndarray], ndarray]

Examples

Example: ScaleVectorFieldFunction ¶

The scaled vector field function.

Callable[[np.ndarray], np.ndarray]

func (Callable[[ndarray], ndarray])

scalar (float)

Shift a vector field function.

func (Callable[[ndarray], ndarray]) – The function defining a vector field.

shift_vector (ndarray) – The shift to be applied to the vector field.

The shifted vector field function.

Callable[[np.ndarray], np.ndarray]

Start continuously moving all submobjects along the vector field.

Calling this method multiple times will result in removing the previous updater created by this method.

speed (float) – The speed at which to move the submobjects. See get_nudge_updater() for details.

pointwise (bool) – Whether to move the mobject along the vector field. See nudge() for details.

This vector field.

VectorField

Stops the continuous movement started using start_submobject_movement().

This vector field.

VectorField


---

# manim.animation.creation.ShowIncreasingSubsets.html

# ShowIncreasingSubsets¶

```python
from manim import *

class ShowIncreasingSubsetsScene(Scene):
    def construct(self):
        p = VGroup(Dot(), Square(), Triangle())
        self.add(p)
        self.play(ShowIncreasingSubsets(p))
        self.wait()
```

Qualified name: manim.animation.creation.ShowIncreasingSubsets

Bases: Animation

Show one submobject at a time, leaving all previous ones displayed on screen.

Examples

Example: ShowIncreasingSubsetsScene ¶

Methods

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

update_submobject_list

Attributes

run_time

group (Mobject)

suspend_mobject_updating (bool)

int_func (Callable[[np.ndarray], np.ndarray])

Initialize self. See help(type(self)) for accurate signature.

group (Mobject)

suspend_mobject_updating (bool)

int_func (Callable[[ndarray], ndarray])

None

Interpolates the mobject of the Animation based on alpha value.

alpha (float) – A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

None


---

# manim.scene.vector_space_scene.LinearTransformationScene.html

# LinearTransformationScene¶

```python
from manim import *

class LinearTransformationSceneExample(LinearTransformationScene):
    def __init__(self, **kwargs):
        LinearTransformationScene.__init__(
            self,
            show_coordinates=True,
            leave_ghost_vectors=True,
            **kwargs
        )

    def construct(self):
        matrix = [[1, 1], [0, 1]]
        self.apply_matrix(matrix)
        self.wait()
```

Qualified name: manim.scene.vector\_space\_scene.LinearTransformationScene

Bases: VectorScene

This scene contains special methods that make it especially suitable for showing linear transformations.

include_background_plane (bool) – Whether or not to include the background plane in the scene.

include_foreground_plane (bool) – Whether or not to include the foreground plane in the scene.

background_plane_kwargs (dict | None) – Parameters to be passed to NumberPlane to adjust the background plane.

foreground_plane_kwargs (dict | None) – Parameters to be passed to NumberPlane to adjust the foreground plane.

show_coordinates (bool) – Whether or not to include the coordinates for the background plane.

show_basis_vectors (bool) – Whether to show the basis x_axis -> i_hat and y_axis -> j_hat vectors.

basis_vector_stroke_width (float) – The stroke_width of the basis vectors.

i_hat_color (ParsableManimColor) – The color of the i_hat vector.

j_hat_color (ParsableManimColor) – The color of the j_hat vector.

leave_ghost_vectors (bool) – Indicates the previous position of the basis vectors following a transformation.

Examples

Example: LinearTransformationSceneExample ¶

Methods

add_background_mobject

Adds the mobjects to the special list self.background_mobjects.

add_foreground_mobject

Adds the mobjects to the special list self.foreground_mobjects.

add_moving_mobject

Adds the mobject to the special list self.moving_mobject, and adds a property to the mobject called mobject.target, which keeps track of what the mobject will move to or become etc.

add_special_mobjects

Adds mobjects to a separate list that can be tracked, if these mobjects have some extra importance.

add_title

Adds a title, after scaling it, adding a background rectangle, moving it to the top and adding it to foreground_mobjects adding it as a local variable of self.

add_transformable_label

Method for creating, and animating the addition of a transformable label for the vector.

add_transformable_mobject

Adds the mobjects to the special list self.transformable_mobjects.

add_unit_square

Adds a unit square to the scene via self.get_unit_square.

add_vector

Adds a vector to the scene, and puts it in the special list self.moving_vectors.

apply_function

Applies the given function to each of the mobjects in self.transformable_mobjects, and plays the animation showing this.

apply_inverse

This method applies the linear transformation represented by the inverse of the passed matrix to the number plane, and each vector/similar mobject on it.

apply_inverse_transpose

Applies the inverse of the transformation represented by the given transposed matrix to the number plane and each vector/similar mobject on it.

apply_matrix

Applies the transformation represented by the given matrix to the number plane, and each vector/similar mobject on it.

apply_nonlinear_transformation

Applies the non-linear transformation represented by the given function to the number plane and each vector/similar mobject on it.

apply_transposed_matrix

Applies the transformation represented by the given transposed matrix to the number plane, and each vector/similar mobject on it.

get_ghost_vectors

Returns all ghost vectors ever added to self.

get_matrix_transformation

Returns a function corresponding to the linear transformation represented by the matrix passed.

get_moving_mobject_movement

This method returns an animation that moves a mobject in "self.moving_mobjects" to its corresponding .target value.

get_piece_movement

This method returns an animation that moves an arbitrary mobject in "pieces" to its corresponding .target value.

get_transformable_label_movement

This method returns an animation that moves all labels in "self.transformable_labels" to its corresponding .target .

get_transposed_matrix_transformation

Returns a function corresponding to the linear transformation represented by the transposed matrix passed.

get_unit_square

Returns a unit square for the current NumberPlane.

get_vector_movement

This method returns an animation that moves a mobject in "self.moving_vectors" to its corresponding .target value.

setup

This is meant to be implemented by any scenes which are commonly subclassed, and have some common setup involved before the construct method is called.

update_default_configs

write_vector_coordinates

Returns a column matrix indicating the vector coordinates, after writing them to the screen, and adding them to the special list self.foreground_mobjects

Attributes

camera

time

The time since the start of the scene.

Adds the mobjects to the special list self.background_mobjects.

*mobjects (Mobject) – The mobjects to add to the list.

Adds the mobjects to the special list self.foreground_mobjects.

*mobjects (Mobject) – The mobjects to add to the list

Adds the mobject to the special list self.moving_mobject, and adds a property to the mobject called mobject.target, which keeps track of what the mobject will move to or become etc.

mobject (Mobject) – The mobjects to add to the list

target_mobject (Mobject | None) – What the moving_mobject goes to, etc.

Adds mobjects to a separate list that can be tracked, if these mobjects have some extra importance.

mob_list (list) – The special list to which you want to add these mobjects.

*mobs_to_add (Mobject) – The mobjects to add.

Adds a title, after scaling it, adding a background rectangle, moving it to the top and adding it to foreground_mobjects adding it as a local variable of self. Returns the Scene.

title (str | MathTex | Tex) – What the title should be.

scale_factor (float) – How much the title should be scaled by.

animate (bool) – Whether or not to animate the addition.

The scene with the title added to it.

LinearTransformationScene

Method for creating, and animating the addition of a transformable label for the vector.

vector (Vector) – The vector for which the label must be added.

label (MathTex | str) – The MathTex/string of the label.

transformation_name (str | MathTex) – The name to give the transformation as a label.

new_label (str | MathTex | None) – What the label should display after a Linear Transformation

**kwargs – Any valid keyword argument of get_vector_label

The MathTex of the label.

MathTex

Adds the mobjects to the special list self.transformable_mobjects.

*mobjects (Mobject) – The mobjects to add to the list.

Adds a unit square to the scene via self.get_unit_square.

animate (bool) – Whether or not to animate the addition with DrawBorderThenFill.

**kwargs – Any valid keyword arguments of self.get_unit_square()

The unit square.

Square

Adds a vector to the scene, and puts it in the special list self.moving_vectors.

vector (Arrow | list | tuple | ndarray) – It can be a pre-made graphical vector, or the coordinates of one.

color (str) – The string of the hex color of the vector. This is only taken into consideration if ‘vector’ is not an Arrow. Defaults to YELLOW.

**kwargs – Any valid keyword argument of VectorScene.add_vector.

The arrow representing the vector.

Arrow

Applies the given function to each of the mobjects in self.transformable_mobjects, and plays the animation showing this.

function (Callable[[ndarray], ndarray]) – The function that affects each point of each mobject in self.transformable_mobjects.

added_anims (list) – Any other animations that need to be played simultaneously with this.

**kwargs – Any valid keyword argument of a self.play() call.

This method applies the linear transformation represented by the inverse of the passed matrix to the number plane, and each vector/similar mobject on it.

matrix (ndarray | list | tuple) – The matrix whose inverse is to be applied.

**kwargs – Any valid keyword argument of self.apply_matrix()

Applies the inverse of the transformation represented by the given transposed matrix to the number plane and each vector/similar mobject on it.

t_matrix (ndarray | list | tuple) – The matrix.

**kwargs – Any valid keyword argument of self.apply_transposed_matrix()

Applies the transformation represented by the given matrix to the number plane, and each vector/similar mobject on it.

matrix (ndarray | list | tuple) – The matrix.

**kwargs – Any valid keyword argument of self.apply_transposed_matrix()

Applies the non-linear transformation represented by the given function to the number plane and each vector/similar mobject on it.

function (Callable[[ndarray], ndarray]) – The function.

**kwargs – Any valid keyword argument of self.apply_function()

Applies the transformation represented by the given transposed matrix to the number plane, and each vector/similar mobject on it.

transposed_matrix (ndarray | list | tuple) – The matrix.

**kwargs – Any valid keyword argument of self.apply_function()

Returns all ghost vectors ever added to self. Each element is a VGroup of two ghost vectors.

VGroup

Returns a function corresponding to the linear transformation represented by the matrix passed.

matrix (ndarray | list | tuple) – The matrix.

This method returns an animation that moves a mobject in “self.moving_mobjects” to its corresponding .target value. func is a function that determines where the .target goes.

func (Callable[[ndarray], ndarray]) – The function that determines where the .target of the moving mobject goes.

The animation of the movement.

Animation

This method returns an animation that moves an arbitrary mobject in “pieces” to its corresponding .target value. If self.leave_ghost_vectors is True, ghosts of the original positions/mobjects are left on screen

pieces (list | tuple | ndarray) – The pieces for which the movement must be shown.

The animation of the movement.

Animation

This method returns an animation that moves all labels in “self.transformable_labels” to its corresponding .target .

The animation of the movement.

Animation

Returns a function corresponding to the linear transformation represented by the transposed matrix passed.

transposed_matrix (ndarray | list | tuple) – The matrix.

Returns a unit square for the current NumberPlane.

color (str) – The string of the hex color code of the color wanted.

opacity (float) – The opacity of the square

stroke_width (float) – The stroke_width in pixels of the border of the square

Square

This method returns an animation that moves a mobject in “self.moving_vectors” to its corresponding .target value. func is a function that determines where the .target goes.

func (Callable[[ndarray], ndarray]) – The function that determines where the .target of the moving mobject goes.

The animation of the movement.

Animation

This is meant to be implemented by any scenes which are commonly subclassed, and have some common setup involved before the construct method is called.

Returns a column matrix indicating the vector coordinates, after writing them to the screen, and adding them to the special list self.foreground_mobjects

vector (Arrow) – The arrow representing the vector.

**kwargs – Any valid keyword arguments of VectorScene.write_vector_coordinates

The column matrix representing the vector.

Matrix


---

# manim.scene.vector_space_scene.html

# vector_space_scene¶

A scene suitable for vector spaces.

Classes

LinearTransformationScene

This scene contains special methods that make it especially suitable for showing linear transformations.

VectorScene


---

# manim.animation.transform_matching_parts.TransformMatchingShapes.html

# TransformMatchingShapes¶

```python
from manim import *

class Anagram(Scene):
    def construct(self):
        src = Text("the morse code")
        tar = Text("here come dots")
        self.play(Write(src))
        self.wait(0.5)
        self.play(TransformMatchingShapes(src, tar, path_arc=PI/2))
        self.wait(0.5)
```

Qualified name: manim.animation.transform\_matching\_parts.TransformMatchingShapes

Bases: TransformMatchingAbstractBase

An animation trying to transform groups by matching the shape of their submobjects.

Two submobjects match if the hash of their point coordinates after normalization (i.e., after translation to the origin, fixing the submobject height at 1 unit, and rounding the coordinates to three decimal places) matches.

See also

TransformMatchingAbstractBase

Examples

Example: Anagram ¶

Methods

get_mobject_key

get_mobject_parts

Attributes

run_time

mobject (Mobject)

target_mobject (Mobject)

transform_mismatches (bool)

fade_transform_mismatches (bool)

key_map (dict | None)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

target_mobject (Mobject)

transform_mismatches (bool)

fade_transform_mismatches (bool)

key_map (dict | None)


---

# manim.animation.transform_matching_parts.TransformMatchingAbstractBase.html

# TransformMatchingAbstractBase¶

Qualified name: manim.animation.transform\_matching\_parts.TransformMatchingAbstractBase

Bases: AnimationGroup

Abstract base class for transformations that keep track of matching parts.

Subclasses have to implement the two static methods get_mobject_parts() and get_mobject_key().

Basically, this transformation first maps all submobjects returned by the get_mobject_parts method to certain keys by applying the get_mobject_key method. Then, submobjects with matching keys are transformed into each other.

mobject (Mobject) – The starting Mobject.

target_mobject (Mobject) – The target Mobject.

transform_mismatches (bool) – Controls whether submobjects without a matching key are transformed into each other by using Transform. Default: False.

fade_transform_mismatches (bool) – Controls whether submobjects without a matching key are transformed into each other by using FadeTransform. Default: False.

key_map (dict | None) – Optional. A dictionary mapping keys belonging to some of the starting mobject’s submobjects (i.e., the return values of the get_mobject_key method) to some keys belonging to the target mobject’s submobjects that should be transformed although the keys don’t match.

kwargs – All further keyword arguments are passed to the submobject transformations.

Note

If neither transform_mismatches nor fade_transform_mismatches are set to True, submobjects without matching keys in the starting mobject are faded out in the direction of the unmatched submobjects in the target mobject, and unmatched submobjects in the target mobject are faded in from the direction of the unmatched submobjects in the start mobject.

Methods

clean_up_from_scene

Clean up the Scene after finishing the animation.

get_mobject_key

get_mobject_parts

get_shape_map

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

target_mobject (Mobject)

transform_mismatches (bool)

fade_transform_mismatches (bool)

key_map (dict | None)

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None


---

# manim.animation.transform_matching_parts.TransformMatchingTex.html

# TransformMatchingTex¶

```python
from manim import *

class MatchingEquationParts(Scene):
    def construct(self):
        variables = VGroup(MathTex("a"), MathTex("b"), MathTex("c")).arrange_submobjects().shift(UP)

        eq1 = MathTex("{{x}}^2", "+", "{{y}}^2", "=", "{{z}}^2")
        eq2 = MathTex("{{a}}^2", "+", "{{b}}^2", "=", "{{c}}^2")
        eq3 = MathTex("{{a}}^2", "=", "{{c}}^2", "-", "{{b}}^2")

        self.add(eq1)
        self.wait(0.5)
        self.play(TransformMatchingTex(Group(eq1, variables), eq2))
        self.wait(0.5)
        self.play(TransformMatchingTex(eq2, eq3))
        self.wait(0.5)
```

Qualified name: manim.animation.transform\_matching\_parts.TransformMatchingTex

Bases: TransformMatchingAbstractBase

A transformation trying to transform rendered LaTeX strings.

Two submobjects match if their tex_string matches.

See also

TransformMatchingAbstractBase

Examples

Example: MatchingEquationParts ¶

Methods

get_mobject_key

get_mobject_parts

Attributes

run_time

mobject (Mobject)

target_mobject (Mobject)

transform_mismatches (bool)

fade_transform_mismatches (bool)

key_map (dict | None)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

target_mobject (Mobject)

transform_mismatches (bool)

fade_transform_mismatches (bool)

key_map (dict | None)


---

# manim.scene.section.Section.html

# Section¶

Qualified name: manim.scene.section.Section

Bases: object

A Scene can be segmented into multiple Sections. Refer to the documentation for more info. It consists of multiple animations.

type_ (str)

video (str | None)

name (str)

skip_animations (bool)

Can be used by a third party applications to classify different types of sections.

Path to video file with animations belonging to section relative to sections directory. If None, then the section will not be saved.

Human readable, non-unique name for this section.

Skip rendering the animations in this section when True.

Animations belonging to this section.

See also

DefaultSectionType, CairoRenderer.update_skipping_status(), OpenGLRenderer.update_skipping_status()

Methods

get_clean_partial_movie_files

Return all partial movie files that are not None.

get_dict

Get dictionary representation with metadata of output video.

is_empty

Check whether this section is empty.

Return all partial movie files that are not None.

list[str]

Get dictionary representation with metadata of output video.

The output from this function is used from every section to build the sections index file. The output video must have been created in the sections_dir before executing this method. This is the main part of the Segmented Video API.

sections_dir (Path)

dict[str, Any]

Check whether this section is empty.

Note that animations represented by None are also counted.

bool


---

# manim.animation.transform.Transform.html

# Transform¶

```python
from manim import *

class TransformPathArc(Scene):
    def construct(self):
        def make_arc_path(start, end, arc_angle):
            points = []
            p_fn = path_along_arc(arc_angle)
            # alpha animates between 0.0 and 1.0, where 0.0
            # is the beginning of the animation and 1.0 is the end.
            for alpha in range(0, 11):
                points.append(p_fn(start, end, alpha / 10.0))
            path = VMobject(stroke_color=YELLOW)
            path.set_points_smoothly(points)
            return path

        left = Circle(stroke_color=BLUE_E, fill_opacity=1.0, radius=0.5).move_to(LEFT * 2)
        colors = [TEAL_A, TEAL_B, TEAL_C, TEAL_D, TEAL_E, GREEN_A]
        # Positive angles move counter-clockwise, negative angles move clockwise.
        examples = [-90, 0, 30, 90, 180, 270]
        anims = []
        for idx, angle in enumerate(examples):
            left_c = left.copy().shift((3 - idx) * UP)
            left_c.fill_color = colors[idx]
            right_c = left_c.copy().shift(4 * RIGHT)
            path_arc = make_arc_path(left_c.get_center(), right_c.get_center(),
                                     arc_angle=angle * DEGREES)
            desc = Text('%d°' % examples[idx]).next_to(left_c, LEFT)
            # Make the circles in front of the text in front of the arcs.
            self.add(
                path_arc.set_z_index(1),
                desc.set_z_index(2),
                left_c.set_z_index(3),
            )
            anims.append(Transform(left_c, right_c, path_arc=angle * DEGREES))

        self.play(*anims, run_time=2)
        self.wait()
```

Qualified name: manim.animation.transform.Transform

Bases: Animation

A Transform transforms a Mobject into a target Mobject.

mobject (Mobject | None) – The Mobject to be transformed. It will be mutated to become the target_mobject.

target_mobject (Mobject | None) – The target of the transformation.

path_func (Callable | None) – A function defining the path that the points of the mobject are being moved along until they match the points of the target_mobject, see utils.paths.

path_arc (float) – The arc angle (in radians) that the points of mobject will follow to reach the points of the target if using a circular path arc, see path_arc_centers. See also manim.utils.paths.path_along_arc().

path_arc_axis (np.ndarray) – The axis to rotate along if using a circular path arc, see path_arc_centers.

path_arc_centers (np.ndarray) – The center of the circular arcs along which the points of mobject are moved by the transformation. If this is set and path_func is not set, then a path_along_circles path will be generated using the path_arc parameters and stored in path_func. If path_func is set, this and the other path_arc fields are set as attributes, but a path_func is not generated from it.

The center of the circular arcs along which the points of mobject are moved by the transformation.

If this is set and path_func is not set, then a path_along_circles path will be generated using the path_arc parameters and stored in path_func. If path_func is set, this and the other path_arc fields are set as attributes, but a path_func is not generated from it.

replace_mobject_with_target_in_scene (bool) – Controls which mobject is replaced when the transformation is complete. If set to True, mobject will be removed from the scene and target_mobject will replace it. Otherwise, target_mobject is never added and mobject just takes its shape.

Controls which mobject is replaced when the transformation is complete.

If set to True, mobject will be removed from the scene and target_mobject will replace it. Otherwise, target_mobject is never added and mobject just takes its shape.

Examples

Example: TransformPathArc ¶

Methods

begin

Begin the animation.

clean_up_from_scene

Clean up the Scene after finishing the animation.

create_target

get_all_families_zipped

get_all_mobjects

Get all mobjects involved in the animation.

interpolate_submobject

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject | None)

target_mobject (Mobject | None)

path_func (Callable | None)

path_arc (float)

path_arc_axis (ndarray)

path_arc_centers (ndarray)

replace_mobject_with_target_in_scene (bool)

None

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None

Get all mobjects involved in the animation.

Ordering must match the ordering of arguments to interpolate_submobject

The sequence of mobjects.

Sequence[Mobject]


---

# manim.animation.rotation.html

# rotation¶

Animations related to rotation.

Classes

Rotate

Animation that rotates a Mobject.

Rotating


---

# manim.animation.transform.Restore.html

# Restore¶

```python
from manim import *

class RestoreExample(Scene):
    def construct(self):
        s = Square()
        s.save_state()
        self.play(FadeIn(s))
        self.play(s.animate.set_color(PURPLE).set_opacity(0.5).shift(2*LEFT).scale(3))
        self.play(s.animate.shift(5*DOWN).rotate(PI/4))
        self.wait()
        self.play(Restore(s), run_time=2)
```

Qualified name: manim.animation.transform.Restore

Bases: ApplyMethod

Transforms a mobject to its last saved state.

To save the state of a mobject, use the save_state() method.

Examples

Example: RestoreExample ¶

Methods

Attributes

path_arc

path_func

run_time

mobject (Mobject)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

None


---

# manim.scene.section.DefaultSectionType.html

# DefaultSectionType¶

```python
class PresentationSectionType(str, Enum):
    # start, end, wait for continuation by user
    NORMAL = "presentation.normal"
    # start, end, immediately continue to next section
    SKIP = "presentation.skip"
    # start, end, restart, immediately continue to next section when continued by user
    LOOP = "presentation.loop"
    # start, end, restart, finish animation first when user continues
    COMPLETE_LOOP = "presentation.complete_loop"
```

Qualified name: manim.scene.section.DefaultSectionType

Bases: str, Enum

The type of a section can be used for third party applications. A presentation system could for example use the types to created loops.

Examples

This class can be reimplemented for more types:

Methods

Attributes

NORMAL


---

# manim.animation.creation.AddTextLetterByLetter.html

# AddTextLetterByLetter¶

Qualified name: manim.animation.creation.AddTextLetterByLetter

Bases: ShowIncreasingSubsets

Show a Text letter by letter on the scene.

time_per_char (float) – Frequency of appearance of the letters.

tip:: (..) – This is currently only possible for class:~.Text and not for class:~.MathTex

text (Text)

suspend_mobject_updating (bool)

int_func (Callable[[np.ndarray], np.ndarray])

rate_func (Callable[[float], float])

run_time (float | None)

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

text (Text)

suspend_mobject_updating (bool)

int_func (Callable[[np.ndarray], np.ndarray])

rate_func (Callable[[float], float])

time_per_char (float)

run_time (float | None)

None


---

# manim.animation.movement.PhaseFlow.html

# PhaseFlow¶

Qualified name: manim.animation.movement.PhaseFlow

Bases: Animation

Methods

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

Attributes

run_time

function (Callable[[np.ndarray], np.ndarray])

mobject (Mobject)

virtual_time (float)

suspend_mobject_updating (bool)

rate_func (Callable[[float], float])

Initialize self. See help(type(self)) for accurate signature.

function (Callable[[np.ndarray], np.ndarray])

mobject (Mobject)

virtual_time (float)

suspend_mobject_updating (bool)

rate_func (Callable[[float], float])

None

Interpolates the mobject of the Animation based on alpha value.

alpha (float) – A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

None


---

# manim.animation.growing.GrowArrow.html

# GrowArrow¶

```python
from manim import *

class GrowArrowExample(Scene):
    def construct(self):
        arrows = [Arrow(2 * LEFT, 2 * RIGHT), Arrow(2 * DR, 2 * UL)]
        VGroup(*arrows).set_x(0).arrange(buff=2)
        self.play(GrowArrow(arrows[0]))
        self.play(GrowArrow(arrows[1], point_color=RED))
```

Qualified name: manim.animation.growing.GrowArrow

Bases: GrowFromPoint

Introduce an Arrow by growing it from its start toward its tip.

arrow (Arrow) – The arrow to be introduced.

point_color (str) – Initial color of the arrow before growing to its full size. Leave empty to match arrow’s color.

Examples

Example: GrowArrowExample ¶

Methods

create_starting_mobject

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

arrow (Arrow)

point_color (str)

None


---

# manim.animation.growing.GrowFromPoint.html

# GrowFromPoint¶

```python
from manim import *

class GrowFromPointExample(Scene):
    def construct(self):
        dot = Dot(3 * UR, color=GREEN)
        squares = [Square() for _ in range(4)]
        VGroup(*squares).set_x(0).arrange(buff=1)
        self.add(dot)
        self.play(GrowFromPoint(squares[0], ORIGIN))
        self.play(GrowFromPoint(squares[1], [-2, 2, 0]))
        self.play(GrowFromPoint(squares[2], [3, -2, 0], RED))
        self.play(GrowFromPoint(squares[3], dot, dot.get_color()))
```

Qualified name: manim.animation.growing.GrowFromPoint

Bases: Transform

Introduce an Mobject by growing it from a point.

mobject (Mobject) – The mobjects to be introduced.

point (np.ndarray) – The point from which the mobject grows.

point_color (str) – Initial color of the mobject before growing to its full size. Leave empty to match mobject’s color.

Examples

Example: GrowFromPointExample ¶

Methods

create_starting_mobject

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

point (np.ndarray)

point_color (str)

None


---

# manim.mobject.matrix.html

# matrix¶

```python
from manim import *

class MatrixExamples(Scene):
    def construct(self):
        m0 = Matrix([["\\pi", 0], [-1, 1]])
        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],
            left_bracket="(",
            right_bracket=")")
        m2 = DecimalMatrix(
            [[3.456, 2.122], [33.2244, 12.33]],
            element_to_mobject_config={"num_decimal_places": 2},
            left_bracket=r"\{",
            right_bracket=r"\}")
        m3 = MobjectMatrix(
            [[Circle().scale(0.3), Square().scale(0.3)],
            [MathTex("\\pi").scale(2), Star().scale(0.3)]],
            left_bracket="\\langle",
            right_bracket="\\rangle")
        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)
        self.add(g)
```

```python
from manim import *

class DeterminantOfAMatrix(Scene):
    def construct(self):
        matrix = Matrix([
            [2, 0],
            [-1, 1]
        ])

        # scaling down the `det` string
        det = get_det_text(matrix,
                    determinant=3,
                    initial_scale_factor=1)

        # must add the matrix
        self.add(matrix)
        self.add(det)
```

Mobjects representing matrices.

Examples

Example: MatrixExamples ¶

Classes

DecimalMatrix

A mobject that displays a matrix with decimal entries on the screen.

IntegerMatrix

A mobject that displays a matrix with integer entries on the screen.

Matrix

A mobject that displays a matrix on the screen.

MobjectMatrix

A mobject that displays a matrix of mobject entries on the screen.

Functions

Helper function to create determinant.

matrix (Matrix) – The matrix whose determinant is to be created

determinant (int | str | None) – The value of the determinant of the matrix

background_rect (bool) – The background rectangle

initial_scale_factor (float) – The scale of the text det w.r.t the matrix

A VGroup containing the determinant

VGroup

Examples

Example: DeterminantOfAMatrix ¶


---

# manim.animation.numbers.ChangingDecimal.html

# ChangingDecimal¶

Qualified name: manim.animation.numbers.ChangingDecimal

Bases: Animation

Methods

check_validity_of_input

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

Attributes

run_time

decimal_mob (DecimalNumber)

number_update_func (Callable[[float], float])

suspend_mobject_updating (bool | None)

Initialize self. See help(type(self)) for accurate signature.

decimal_mob (DecimalNumber)

number_update_func (Callable[[float], float])

suspend_mobject_updating (bool | None)

None

Interpolates the mobject of the Animation based on alpha value.

alpha (float) – A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

None


---

# manim.utils.hashing.html

# hashing¶

Utilities for scene caching.

Functions

Take the list of animations and a list of mobjects and output their hashes. This is meant to be used for scene.play function.

scene_object (Scene) – The scene object.

camera_object (Camera | OpenGLCamera) – The camera object used in the scene.

animations_list (Iterable[Animation]) – The list of animations.

current_mobjects_list (Iterable[Mobject]) – The list of mobjects.

A string concatenation of the respective hashes of camera_object, animations_list and current_mobjects_list, separated by _.

str

Recursively serialize object to JSON using the CustomEncoder class.

obj (dict) – The dict to flatten

The flattened object

str


---

# manim.mobject.table.html

# table¶

```python
from manim import *

class TableExamples(Scene):
    def construct(self):
        t0 = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")],
            top_left_entry=Text("TOP"))
        t0.add_highlighted_cell((2,2), color=GREEN)
        x_vals = np.linspace(-2,2,5)
        y_vals = np.exp(x_vals)
        t1 = DecimalTable(
            [x_vals, y_vals],
            row_labels=[MathTex("x"), MathTex("f(x)")],
            include_outer_lines=True)
        t1.add(t1.get_cell((2,2), color=RED))
        t2 = MathTable(
            [["+", 0, 5, 10],
            [0, 0, 5, 10],
            [2, 2, 7, 12],
            [4, 4, 9, 14]],
            include_outer_lines=True)
        t2.get_horizontal_lines()[:3].set_color(BLUE)
        t2.get_vertical_lines()[:3].set_color(BLUE)
        t2.get_horizontal_lines()[:3].set_z_index(1)
        cross = VGroup(
            Line(UP + LEFT, DOWN + RIGHT),
            Line(UP + RIGHT, DOWN + LEFT))
        a = Circle().set_color(RED).scale(0.5)
        b = cross.set_color(BLUE).scale(0.5)
        t3 = MobjectTable(
            [[a.copy(),b.copy(),a.copy()],
            [b.copy(),a.copy(),a.copy()],
            [a.copy(),b.copy(),b.copy()]])
        t3.add(Line(
            t3.get_corner(DL), t3.get_corner(UR)
        ).set_color(RED))
        vals = np.arange(1,21).reshape(5,4)
        t4 = IntegerTable(
            vals,
            include_outer_lines=True
        )
        g1 = Group(t0, t1).scale(0.5).arrange(buff=1).to_edge(UP, buff=1)
        g2 = Group(t2, t3, t4).scale(0.5).arrange(buff=1).to_edge(DOWN, buff=1)
        self.add(g1, g2)
```

Mobjects representing tables.

Examples

Example: TableExamples ¶

Classes

DecimalTable

A specialized Table mobject for use with DecimalNumber to display decimal entries.

IntegerTable

A specialized Table mobject for use with Integer.

MathTable

A specialized Table mobject for use with LaTeX.

MobjectTable

A specialized Table mobject for use with Mobject.

Table

A mobject that displays a table on the screen.


---

# manim.scene.moving_camera_scene.html

# moving_camera_scene¶

```python
from manim import *

class ChangingCameraWidthAndRestore(MovingCameraScene):
    def construct(self):
        text = Text("Hello World").set_color(BLUE)
        self.add(text)
        self.camera.frame.save_state()
        self.play(self.camera.frame.animate.set(width=text.width * 1.2))
        self.wait(0.3)
        self.play(Restore(self.camera.frame))
```

```python
from manim import *

class MovingCameraCenter(MovingCameraScene):
    def construct(self):
        s = Square(color=RED, fill_opacity=0.5).move_to(2 * LEFT)
        t = Triangle(color=GREEN, fill_opacity=0.5).move_to(2 * RIGHT)
        self.wait(0.3)
        self.add(s, t)
        self.play(self.camera.frame.animate.move_to(s))
        self.wait(0.3)
        self.play(self.camera.frame.animate.move_to(t))
```

```python
from manim import *

class MovingAndZoomingCamera(MovingCameraScene):
    def construct(self):
        s = Square(color=BLUE, fill_opacity=0.5).move_to(2 * LEFT)
        t = Triangle(color=YELLOW, fill_opacity=0.5).move_to(2 * RIGHT)
        self.add(s, t)
        self.play(self.camera.frame.animate.move_to(s).set(width=s.width*2))
        self.wait(0.3)
        self.play(self.camera.frame.animate.move_to(t).set(width=t.width*2))

        self.play(self.camera.frame.animate.move_to(ORIGIN).set(width=14))
```

```python
from manim import *

class MovingCameraOnGraph(MovingCameraScene):
    def construct(self):
        self.camera.frame.save_state()

        ax = Axes(x_range=[-1, 10], y_range=[-1, 10])
        graph = ax.plot(lambda x: np.sin(x), color=WHITE, x_range=[0, 3 * PI])

        dot_1 = Dot(ax.i2gp(graph.t_min, graph))
        dot_2 = Dot(ax.i2gp(graph.t_max, graph))
        self.add(ax, graph, dot_1, dot_2)

        self.play(self.camera.frame.animate.scale(0.5).move_to(dot_1))
        self.play(self.camera.frame.animate.move_to(dot_2))
        self.play(Restore(self.camera.frame))
        self.wait()
```

```python
from manim import *

class SlidingMultipleScenes(MovingCameraScene):
    def construct(self):
        def create_scene(number):
            frame = Rectangle(width=16,height=9)
            circ = Circle().shift(LEFT)
            text = Tex(f"This is Scene {str(number)}").next_to(circ, RIGHT)
            frame.add(circ,text)
            return frame

        group = VGroup(*(create_scene(i) for i in range(4))).arrange_in_grid(buff=4)
        self.add(group)
        self.camera.auto_zoom(group[0], animate=False)
        for scene in group:
            self.play(self.camera.auto_zoom(scene))
            self.wait()

        self.play(self.camera.auto_zoom(group, margin=2))
```

A scene whose camera can be moved around.

See also

moving_camera

Examples

Example: ChangingCameraWidthAndRestore ¶

Example: MovingCameraCenter ¶

Example: MovingAndZoomingCamera ¶

Example: MovingCameraOnGraph ¶

Example: SlidingMultipleScenes ¶

Classes

MovingCameraScene

This is a Scene, with special configurations and properties that make it suitable for cases where the camera must be moved around.


---

# manim.animation.indication.html

# indication¶

```python
from manim import *

class Indications(Scene):
    def construct(self):
        indications = [ApplyWave,Circumscribe,Flash,FocusOn,Indicate,ShowPassingFlash,Wiggle]
        names = [Tex(i.__name__).scale(3) for i in indications]

        self.add(names[0])
        for i in range(len(names)):
            if indications[i] is Flash:
                self.play(Flash(UP))
            elif indications[i] is ShowPassingFlash:
                self.play(ShowPassingFlash(Underline(names[i])))
            else:
                self.play(indications[i](names[i]))
            self.play(AnimationGroup(
                FadeOut(names[i], shift=UP*1.5),
                FadeIn(names[(i+1)%len(names)], shift=UP*1.5),
            ))
```

Animations drawing attention to particular mobjects.

Examples

Example: Indications ¶

Classes

ApplyWave

Send a wave through the Mobject distorting it temporarily.

Blink

Blink the mobject.

Circumscribe

Draw a temporary line surrounding the mobject.

Flash

Send out lines in all directions.

FocusOn

Shrink a spotlight to a position.

Indicate

Indicate a Mobject by temporarily resizing and recoloring it.

ShowPassingFlash

Show only a sliver of the VMobject each frame.

ShowPassingFlashWithThinningStrokeWidth

Wiggle

Wiggle a Mobject.


---

# manim.animation.transform.MoveToTarget.html

# MoveToTarget¶

```python
from manim import *

class MoveToTargetExample(Scene):
    def construct(self):
        c = Circle()

        c.generate_target()
        c.target.set_fill(color=GREEN, opacity=0.5)
        c.target.shift(2*RIGHT + UP).scale(0.5)

        self.add(c)
        self.play(MoveToTarget(c))
```

Qualified name: manim.animation.transform.MoveToTarget

Bases: Transform

Transforms a mobject to the mobject stored in its target attribute.

After calling the generate_target() method, the target attribute of the mobject is populated with a copy of it. After modifying the attribute, playing the MoveToTarget animation transforms the original mobject into the modified one stored in the target attribute.

Examples

Example: MoveToTargetExample ¶

Methods

check_validity_of_input

Attributes

path_arc

path_func

run_time

mobject (Mobject)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

None


---

# manim.animation.transform_matching_parts.html

# transform_matching_parts¶

Animations that try to transform Mobjects while keeping track of identical parts.

Classes

TransformMatchingAbstractBase

Abstract base class for transformations that keep track of matching parts.

TransformMatchingShapes

An animation trying to transform groups by matching the shape of their submobjects.

TransformMatchingTex

A transformation trying to transform rendered LaTeX strings.


---

# manim.mobject.table.MobjectTable.html

# MobjectTable¶

```python
from manim import *

class MobjectTableExample(Scene):
    def construct(self):
        cross = VGroup(
            Line(UP + LEFT, DOWN + RIGHT),
            Line(UP + RIGHT, DOWN + LEFT),
        )
        a = Circle().set_color(RED).scale(0.5)
        b = cross.set_color(BLUE).scale(0.5)
        t0 = MobjectTable(
            [[a.copy(),b.copy(),a.copy()],
            [b.copy(),a.copy(),a.copy()],
            [a.copy(),b.copy(),b.copy()]]
        )
        line = Line(
            t0.get_corner(DL), t0.get_corner(UR)
        ).set_color(RED)
        self.add(t0, line)
```

Qualified name: manim.mobject.table.MobjectTable

Bases: Table

A specialized Table mobject for use with Mobject.

Examples

Example: MobjectTableExample ¶

Special case of Table with element_to_mobject set to an identity function. Here, every item in table must already be of type Mobject.

table (Iterable[Iterable[VMobject]]) – A 2D array or list of lists. Content of the table must be of type Mobject.

element_to_mobject (Callable[[VMobject], VMobject]) – The Mobject class applied to the table entries. Set as lambda m : m to return itself.

kwargs – Additional arguments to be passed to Table.

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Special case of Table with element_to_mobject set to an identity function. Here, every item in table must already be of type Mobject.

table (Iterable[Iterable[VMobject]]) – A 2D array or list of lists. Content of the table must be of type Mobject.

element_to_mobject (Callable[[VMobject], VMobject]) – The Mobject class applied to the table entries. Set as lambda m : m to return itself.

kwargs – Additional arguments to be passed to Table.


---

# manim.animation.specialized.Broadcast.html

# Broadcast¶

```python
from manim import *

class BroadcastExample(Scene):
    def construct(self):
        mob = Circle(radius=4, color=TEAL_A)
        self.play(Broadcast(mob))
```

Qualified name: manim.animation.specialized.Broadcast

Bases: LaggedStart

Broadcast a mobject starting from an initial_width, up to the actual size of the mobject.

mobject – The mobject to be broadcast.

focal_point (Sequence[float]) – The center of the broadcast, by default ORIGIN.

n_mobs (int) – The number of mobjects that emerge from the focal point, by default 5.

initial_opacity (float) – The starting stroke opacity of the mobjects emitted from the broadcast, by default 1.

final_opacity (float) – The final stroke opacity of the mobjects emitted from the broadcast, by default 0.

initial_width (float) – The initial width of the mobjects, by default 0.0.

remover (bool) – Whether the mobjects should be removed from the scene after the animation, by default True.

lag_ratio (float) – The time between each iteration of the mobject, by default 0.2.

run_time (float) – The total duration of the animation, by default 3.

kwargs (Any) – Additional arguments to be passed to LaggedStart.

Examples

Example: BroadcastExample ¶

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

focal_point (Sequence[float])

n_mobs (int)

initial_opacity (float)

final_opacity (float)

initial_width (float)

remover (bool)

lag_ratio (float)

run_time (float)

kwargs (Any)


---

# manim.animation.animation.Wait.html

# Wait¶

Qualified name: manim.animation.animation.Wait

Bases: Animation

A “no operation” animation.

run_time (float) – The amount of time that should pass.

stop_condition (Callable[[], bool] | None) – A function without positional arguments that evaluates to a boolean. The function is evaluated after every new frame has been rendered. Playing the animation stops after the return value is truthy, or after the specified run_time has passed.

frozen_frame (bool | None) – Controls whether or not the wait animation is static, i.e., corresponds to a frozen frame. If False is passed, the render loop still progresses through the animation as usual and (among other things) continues to call updater functions. If None (the default value), the Scene.play() call tries to determine whether the Wait call can be static or not itself via Scene.should_mobjects_update().

kwargs – Keyword arguments to be passed to the parent class, Animation.

rate_func (Callable[[float], float])

Methods

begin

Begin the animation.

clean_up_from_scene

Clean up the Scene after finishing the animation.

finish

Finish the animation.

interpolate

Set the animation progress.

update_mobjects

Updates things like starting_mobject, and (for Transforms) target_mobject.

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

run_time (float)

stop_condition (Callable[[], bool] | None)

frozen_frame (bool | None)

rate_func (Callable[[float], float])

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None

Finish the animation.

This method gets called when the animation is over.

None

Set the animation progress.

This method gets called for every frame during an animation.

alpha (float) – The relative time to set the animation to, 0 meaning the start, 1 meaning the end.

None

Updates things like starting_mobject, and (for Transforms) target_mobject. Note, since typically (always?) self.mobject will have its updating suspended during the animation, this will do nothing to self.mobject.

dt (float)

None


---

# manim.animation.composition.html

# composition¶

Tools for displaying multiple animations at once.

Classes

AnimationGroup

Plays a group or series of Animation.

LaggedStart

Adjusts the timing of a series of Animation according to lag_ratio.

LaggedStartMap

Plays a series of Animation while mapping a function to submobjects.

Succession

Plays a series of animations in succession.


---

# manim.animation.indication.Indicate.html

# Indicate¶

```python
from manim import *

class UsingIndicate(Scene):
    def construct(self):
        tex = Tex("Indicate").scale(3)
        self.play(Indicate(tex))
        self.wait()
```

Qualified name: manim.animation.indication.Indicate

Bases: Transform

Indicate a Mobject by temporarily resizing and recoloring it.

mobject (Mobject) – The mobject to indicate.

scale_factor (float) – The factor by which the mobject will be temporally scaled

color (str) – The color the mobject temporally takes.

rate_func (Callable[[float, float | None], np.ndarray]) – The function defining the animation progress at every point in time.

kwargs – Additional arguments to be passed to the Succession constructor

Examples

Example: UsingIndicate ¶

Methods

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

scale_factor (float)

color (str)

rate_func (Callable[[float, float | None], ndarray])

None


---

# manim.mobject.table.IntegerTable.html

# IntegerTable¶

```python
from manim import *

class IntegerTableExample(Scene):
    def construct(self):
        t0 = IntegerTable(
            [[0,30,45,60,90],
            [90,60,45,30,0]],
            col_labels=[
                MathTex(r"\frac{\sqrt{0}}{2}"),
                MathTex(r"\frac{\sqrt{1}}{2}"),
                MathTex(r"\frac{\sqrt{2}}{2}"),
                MathTex(r"\frac{\sqrt{3}}{2}"),
                MathTex(r"\frac{\sqrt{4}}{2}")],
            row_labels=[MathTex(r"\sin"), MathTex(r"\cos")],
            h_buff=1,
            element_to_mobject_config={"unit": r"^{\circ}"})
        self.add(t0)
```

Qualified name: manim.mobject.table.IntegerTable

Bases: Table

A specialized Table mobject for use with Integer.

Examples

Example: IntegerTableExample ¶

Special case of Table with element_to_mobject set to Integer. Will round if there are decimal entries in the table.

table (Iterable[Iterable[float | str]]) – A 2d array or list of lists. Content of the table has to be valid input for Integer.

element_to_mobject (Callable[[float | str], VMobject]) – The Mobject class applied to the table entries. Set as Integer.

kwargs – Additional arguments to be passed to Table.

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Special case of Table with element_to_mobject set to Integer. Will round if there are decimal entries in the table.

table (Iterable[Iterable[float | str]]) – A 2d array or list of lists. Content of the table has to be valid input for Integer.

element_to_mobject (Callable[[float | str], VMobject]) – The Mobject class applied to the table entries. Set as Integer.

kwargs – Additional arguments to be passed to Table.


---

# manim.animation.indication.ApplyWave.html

# ApplyWave¶

```python
from manim import *

class ApplyingWaves(Scene):
    def construct(self):
        tex = Tex("WaveWaveWaveWaveWave").scale(2)
        self.play(ApplyWave(tex))
        self.play(ApplyWave(
            tex,
            direction=RIGHT,
            time_width=0.5,
            amplitude=0.3
        ))
        self.play(ApplyWave(
            tex,
            rate_func=linear,
            ripples=4
        ))
```

Qualified name: manim.animation.indication.ApplyWave

Bases: Homotopy

Send a wave through the Mobject distorting it temporarily.

mobject (Mobject) – The mobject to be distorted.

direction (np.ndarray) – The direction in which the wave nudges points of the shape

amplitude (float) – The distance points of the shape get shifted

wave_func (Callable[[float], float]) – The function defining the shape of one wave flank.

time_width (float) – The length of the wave relative to the width of the mobject.

ripples (int) – The number of ripples of the wave

run_time (float) – The duration of the animation.

Examples

Example: ApplyingWaves ¶

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

direction (ndarray)

amplitude (float)

wave_func (Callable[[float], float])

time_width (float)

ripples (int)

run_time (float)

None


---

# manim.mobject.graph.GenericGraph.html

# GenericGraph¶

```python
from manim import *

class ChangeGraphLayout(Scene):
    def construct(self):
        G = Graph([1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5)],
                  layout={1: [-2, 0, 0], 2: [-1, 0, 0], 3: [0, 0, 0],
                          4: [1, 0, 0], 5: [2, 0, 0]}
                  )
        self.play(Create(G))
        self.play(G.animate.change_layout("circular"))
        self.wait()
```

```python
from manim import *

import networkx as nx

nxgraph = nx.erdos_renyi_graph(14, 0.5)

class ImportNetworkxGraph(Scene):
    def construct(self):
        G = Graph.from_networkx(nxgraph, layout="spring", layout_scale=3.5)
        self.play(Create(G))
        self.play(*[G[v].animate.move_to(5*RIGHT*np.cos(ind/7 * PI) +
                                         3*UP*np.sin(ind/7 * PI))
                    for ind, v in enumerate(G.vertices)])
        self.play(Uncreate(G))
```

```python
>>> G = Graph([1, 2, 3], [(1, 2), (2, 3)])
>>> removed = G.remove_vertices(2, 3); removed
VGroup(Line, Line, Dot, Dot)
>>> G
Undirected graph on 1 vertices and 0 edges
```

Qualified name: manim.mobject.graph.GenericGraph

Bases: VMobject

Abstract base class for graphs (that is, a collection of vertices connected with edges).

Graphs can be instantiated by passing both a list of (distinct, hashable) vertex names, together with list of edges (as tuples of vertex names). See the examples for concrete implementations of this class for details.

Note

This implementation uses updaters to make the edges move with the vertices.

See also

Graph, DiGraph

vertices (Sequence[Hashable]) – A list of vertices. Must be hashable elements.

edges (Sequence[tuple[Hashable, Hashable]]) – A list of edges, specified as tuples (u, v) where both u and v are vertices.

labels (bool | dict) – Controls whether or not vertices are labeled. If False (the default), the vertices are not labeled; if True they are labeled using their names (as specified in vertices) via MathTex. Alternatively, custom labels can be specified by passing a dictionary whose keys are the vertices, and whose values are the corresponding vertex labels (rendered via, e.g., Text or Tex).

label_fill_color (str) – Sets the fill color of the default labels generated when labels is set to True. Has no effect for other values of labels.

layout (LayoutName | dict[Hashable, Point3DLike] | LayoutFunction) – Either one of "spring" (the default), "circular", "kamada_kawai", "planar", "random", "shell", "spectral", "spiral", "tree", and "partite" for automatic vertex positioning primarily using networkx (see their documentation for more details), a dictionary specifying a coordinate (value) for each vertex (key) for manual positioning, or a .:class:~.LayoutFunction with a user-defined automatic layout.

layout_config (dict | None) – Only for automatic layouts. A dictionary whose entries are passed as keyword arguments to the named layout or automatic layout function specified via layout. The tree layout also accepts a special parameter vertex_spacing passed as a keyword argument inside the layout_config dictionary. Passing a tuple (space_x, space_y) as this argument overrides the value of layout_scale and ensures that vertices are arranged in a way such that the centers of siblings in the same layer are at least space_x units apart horizontally, and neighboring layers are spaced space_y units vertically.

layout_scale (float | tuple[float, float, float]) – The scale of automatically generated layouts: the vertices will be arranged such that the coordinates are located within the interval [-scale, scale]. Some layouts accept a tuple (scale_x, scale_y) causing the first coordinate to be in the interval [-scale_x, scale_x], and the second in [-scale_y, scale_y]. Default: 2.

vertex_type (type[Mobject]) – The mobject class used for displaying vertices in the scene.

vertex_config (dict | None) – Either a dictionary containing keyword arguments to be passed to the class specified via vertex_type, or a dictionary whose keys are the vertices, and whose values are dictionaries containing keyword arguments for the mobject related to the corresponding vertex.

vertex_mobjects (dict | None) – A dictionary whose keys are the vertices, and whose values are mobjects to be used as vertices. Passing vertices here overrides all other configuration options for a vertex.

edge_type (type[Mobject]) – The mobject class used for displaying edges in the scene. Must be a subclass of Line for default updaters to work.

edge_config (dict | None) – Either a dictionary containing keyword arguments to be passed to the class specified via edge_type, or a dictionary whose keys are the edges, and whose values are dictionaries containing keyword arguments for the mobject related to the corresponding edge.

partitions (Sequence[Sequence[Hashable]] | None)

root_vertex (Hashable | None)

Methods

add_edges

Add new edges to the graph.

add_vertices

Add a list of vertices to the graph.

change_layout

Change the layout of this graph.

from_networkx

Build a Graph or DiGraph from a given networkx graph.

remove_edges

Remove several edges from the graph.

remove_vertices

Remove several vertices from the graph.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Add a new edge to the graph.

edge (tuple[Hashable, Hashable]) – The edge (as a tuple of vertex identifiers) to be added. If a non-existing vertex is passed, a new vertex with default settings will be created. Create new vertices yourself beforehand to customize them.

edge_type (type[Mobject]) – The mobject class used for displaying edges in the scene.

edge_config (dict | None) – A dictionary containing keyword arguments to be passed to the class specified via edge_type.

A group containing all newly added vertices and edges.

Group

Add a vertex to the graph.

vertex (Hashable) – A hashable vertex identifier.

position (Point3DLike | None) – The coordinates where the new vertex should be added. If None, the center of the graph is used.

label (bool) – Controls whether or not the vertex is labeled. If False (the default), the vertex is not labeled; if True it is labeled using its names (as specified in vertex) via MathTex. Alternatively, any Mobject can be passed to be used as the label.

label_fill_color (str) – Sets the fill color of the default labels generated when labels is set to True. Has no effect for other values of label.

vertex_type (type[Mobject]) – The mobject class used for displaying vertices in the scene.

vertex_config (dict | None) – A dictionary containing keyword arguments to be passed to the class specified via vertex_type.

vertex_mobject (dict | None) – The mobject to be used as the vertex. Overrides all other vertex customization options.

Mobject

Return an empty networkx graph for the given graph type.

Graph

Initialize self. See help(type(self)) for accurate signature.

vertices (Sequence[Hashable])

edges (Sequence[tuple[Hashable, Hashable]])

labels (bool | dict)

label_fill_color (str)

layout (Literal['circular', 'kamada_kawai', 'partite', 'planar', 'random', 'shell', 'spectral', 'spiral', 'spring', 'tree'] | dict[~collections.abc.Hashable, ~manim.typing.Point3DLike] | ~manim.mobject.graph.LayoutFunction)

layout_scale (float | tuple[float, float, float])

layout_config (dict | None)

vertex_type (type[Mobject])

vertex_config (dict | None)

vertex_mobjects (dict | None)

edge_type (type[Mobject])

partitions (Sequence[Sequence[Hashable]] | None)

root_vertex (Hashable | None)

edge_config (dict | None)

None

Helper method for populating the edges of the graph.

edges (list[tuple[Hashable, Hashable]])

edge_type (type[Mobject])

Remove an edge from the graph.

edge (tuple[Hashable]) – The edge (i.e., a tuple of vertex identifiers) to be removed from the graph.

The removed edge.

Mobject

Remove a vertex (as well as all incident edges) from the graph.

vertex – The identifier of a vertex to be removed.

A mobject containing all removed objects.

Group

Add new edges to the graph.

edges (tuple[Hashable, Hashable]) – Edges (as tuples of vertex identifiers) to be added. If a non-existing vertex is passed, a new vertex with default settings will be created. Create new vertices yourself beforehand to customize them.

edge_type (type[Mobject]) – The mobject class used for displaying edges in the scene.

edge_config (dict | None) – A dictionary either containing keyword arguments to be passed to the class specified via edge_type, or a dictionary whose keys are the edge tuples, and whose values are dictionaries containing keyword arguments to be passed for the construction of the corresponding edge.

kwargs – Any further keyword arguments are passed to add_vertices() which is used to create new vertices in the passed edges.

A group containing all newly added vertices and edges.

Group

Add a list of vertices to the graph.

vertices (Hashable) – Hashable vertex identifiers.

positions (dict | None) – A dictionary specifying the coordinates where the new vertices should be added. If None, all vertices are created at the center of the graph.

labels (bool) – Controls whether or not the vertex is labeled. If False (the default), the vertex is not labeled; if True it is labeled using its names (as specified in vertex) via MathTex. Alternatively, any Mobject can be passed to be used as the label.

label_fill_color (str) – Sets the fill color of the default labels generated when labels is set to True. Has no effect for other values of labels.

vertex_type (type[Mobject]) – The mobject class used for displaying vertices in the scene.

vertex_config (dict | None) – A dictionary containing keyword arguments to be passed to the class specified via vertex_type.

vertex_mobjects (dict | None) – A dictionary whose keys are the vertex identifiers, and whose values are mobjects that should be used as vertices. Overrides all other vertex customization options.

self (Graph)

Change the layout of this graph.

See the documentation of Graph for details about the keyword arguments.

Examples

Example: ChangeGraphLayout ¶

layout (Literal['circular', 'kamada_kawai', 'partite', 'planar', 'random', 'shell', 'spectral', 'spiral', 'spring', 'tree'] | dict[~collections.abc.Hashable, ~manim.typing.Point3DLike] | ~manim.mobject.graph.LayoutFunction)

layout_scale (float | tuple[float, float, float])

layout_config (dict[str, Any] | None)

partitions (list[list[Hashable]] | None)

root_vertex (Hashable | None)

Graph

Build a Graph or DiGraph from a given networkx graph.

nxgraph (Graph | DiGraph) – A networkx graph or digraph.

**kwargs – Keywords to be passed to the constructor of Graph.

Examples

Example: ImportNetworkxGraph ¶

Remove several edges from the graph.

edges (tuple[Hashable]) – Edges to be removed from the graph.

A group containing all removed edges.

Group

Remove several vertices from the graph.

vertices – Vertices to be removed from the graph.

Examples


---

# manim.mobject.value_tracker.ComplexValueTracker.html

# ComplexValueTracker¶

```python
from manim import *

class ComplexValueTrackerExample(Scene):
    def construct(self):
        tracker = ComplexValueTracker(-2+1j)
        dot = Dot().add_updater(
            lambda x: x.move_to(tracker.points)
        )

        self.add(NumberPlane(), dot)

        self.play(tracker.animate.set_value(3+2j))
        self.play(tracker.animate.set_value(tracker.get_value() * 1j))
        self.play(tracker.animate.set_value(tracker.get_value() - 2j))
        self.play(tracker.animate.set_value(tracker.get_value() / (-2 + 3j)))
```

Qualified name: manim.mobject.value\_tracker.ComplexValueTracker

Bases: ValueTracker

Tracks a complex-valued parameter.

When the value is set through animate, the value will take a straight path from the source point to the destination point.

Examples

Example: ComplexValueTrackerExample ¶

Methods

get_value

Get the current value of this value tracker as a complex number.

set_value

Sets a new complex value to the ComplexValueTracker

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

Get the current value of this value tracker as a complex number.

The value is internally stored as a points array [a, b, 0]. This can be accessed directly to represent the value geometrically, see the usage example.

Sets a new complex value to the ComplexValueTracker


---

# manim.camera.three_d_camera.html

# three_d_camera¶

A camera that can be positioned and oriented in three-dimensional space.

Classes

ThreeDCamera

Initializes the ThreeDCamera


---

# manim.camera.mapping_camera.html

# mapping_camera¶

A camera that allows mapping between objects.

Classes

MappingCamera

Camera object that allows mapping between objects.

OldMultiCamera

SplitScreenCamera


---

# manim.utils.commands.html

# commands¶

Classes

VideoMetadata

Functions

command (str)

cwd (StrOrBytesPath | None)

command_input (str | None)

tuple[str, str, int]

Get list of paths relative to dirpath of all files in dir and subdirs recursively.

dirpath (Path)

Generator[str, None, None]

path_to_video (str | PathLike)

VideoMetadata


---

# manim.animation.movement.html

# movement¶

Animations related to movement.

Classes

ComplexHomotopy

Complex Homotopy a function Cx[0, 1] to C

Homotopy

A Homotopy.

MoveAlongPath

Make one mobject move along the path of another mobject.

PhaseFlow

SmoothedVectorizedHomotopy


---

# manim.animation.creation.DrawBorderThenFill.html

# DrawBorderThenFill¶

```python
from manim import *

class ShowDrawBorderThenFill(Scene):
    def construct(self):
        self.play(DrawBorderThenFill(Square(fill_opacity=1, fill_color=ORANGE)))
```

Qualified name: manim.animation.creation.DrawBorderThenFill

Bases: Animation

Draw the border first and then show the fill.

Examples

Example: ShowDrawBorderThenFill ¶

Methods

begin

Begin the animation.

get_all_mobjects

Get all mobjects involved in the animation.

get_outline

get_stroke_color

interpolate_submobject

Attributes

run_time

vmobject (VMobject | OpenGLVMobject)

run_time (float)

rate_func (Callable[[float], float])

stroke_width (float)

stroke_color (str)

draw_border_animation_config (dict)

fill_animation_config (dict)

introducer (bool)

Initialize self. See help(type(self)) for accurate signature.

vmobject (VMobject | OpenGLVMobject)

run_time (float)

rate_func (Callable[[float], float])

stroke_width (float)

stroke_color (str)

draw_border_animation_config (dict)

fill_animation_config (dict)

introducer (bool)

None

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Get all mobjects involved in the animation.

Ordering must match the ordering of arguments to interpolate_submobject

The sequence of mobjects.

Sequence[Mobject]


---

# manim.mobject.graphing.html

# graphing¶

## Modules¶

Coordinate systems and function graphing related mobjects.

coordinate_systems

Mobjects that represent coordinate systems.

functions

Mobjects representing function graphs.

number_line

Mobject representing a number line.

probability

Mobjects representing objects from probability theory and statistics.

scale


---

# manim.mobject.utils.html

# utils¶

```python
>>> from manim.mobject.utils import get_mobject_class
>>> get_mobject_class().__name__ in ['Mobject', 'OpenGLMobject']
True
```

```python
>>> from manim.mobject.utils import get_point_mobject_class
>>> get_point_mobject_class().__name__ in ['PMobject', 'OpenGLPMobject']
True
```

```python
>>> from manim.mobject.utils import get_vectorized_mobject_class
>>> get_vectorized_mobject_class().__name__ in ['VMobject', 'OpenGLVMobject']
True
```

Utilities for working with mobjects.

Functions

Gets the base mobject class, depending on the currently active renderer.

Note

This method is intended to be used in the code base of Manim itself or in plugins where code should work independent of the selected renderer.

Examples

The function has to be explicitly imported. We test that the name of the returned class is one of the known mobject base classes:

type

Gets the point cloud mobject class, depending on the currently active renderer.

Note

This method is intended to be used in the code base of Manim itself or in plugins where code should work independent of the selected renderer.

Examples

The function has to be explicitly imported. We test that the name of the returned class is one of the known mobject base classes:

type

Gets the vectorized mobject class, depending on the currently active renderer.

Note

This method is intended to be used in the code base of Manim itself or in plugins where code should work independent of the selected renderer.

Examples

The function has to be explicitly imported. We test that the name of the returned class is one of the known mobject base classes:

type


---

# manim.animation.specialized.html

# specialized¶

Classes

Broadcast

Broadcast a mobject starting from an initial_width, up to the actual size of the mobject.


---

# manim.mobject.logo.html

# logo¶

Utilities for Manim’s logo and banner.

Classes

ManimBanner

Convenience class representing Manim's banner.


---

# manim.animation.creation.AddTextWordByWord.html

# AddTextWordByWord¶

Qualified name: manim.animation.creation.AddTextWordByWord

Bases: Succession

Show a Text word by word on the scene. Note: currently broken.

Methods

Attributes

run_time

text_mobject (Text)

run_time (float)

time_per_char (float)

Initialize self. See help(type(self)) for accurate signature.

text_mobject (Text)

run_time (float)

time_per_char (float)

None


---

# manim.animation.changing.html

# changing¶

Animation of a mobject boundary and tracing of points.

Classes

AnimatedBoundary

Boundary of a VMobject with animated color change.

TracedPath

Traces the path of a point returned by a function call.


---

# manim.animation.growing.GrowFromEdge.html

# GrowFromEdge¶

```python
from manim import *

class GrowFromEdgeExample(Scene):
    def construct(self):
        squares = [Square() for _ in range(4)]
        VGroup(*squares).set_x(0).arrange(buff=1)
        self.play(GrowFromEdge(squares[0], DOWN))
        self.play(GrowFromEdge(squares[1], RIGHT))
        self.play(GrowFromEdge(squares[2], UR))
        self.play(GrowFromEdge(squares[3], UP, point_color=RED))
```

Qualified name: manim.animation.growing.GrowFromEdge

Bases: GrowFromPoint

Introduce an Mobject by growing it from one of its bounding box edges.

mobject (Mobject) – The mobjects to be introduced.

edge (np.ndarray) – The direction to seek bounding box edge of mobject.

point_color (str) – Initial color of the mobject before growing to its full size. Leave empty to match mobject’s color.

Examples

Example: GrowFromEdgeExample ¶

Methods

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

edge (np.ndarray)

point_color (str)

None


---

# manim.animation.creation.Create.html

# Create¶

```python
from manim import *

class CreateScene(Scene):
    def construct(self):
        self.play(Create(Square()))
```

Qualified name: manim.animation.creation.Create

Bases: ShowPartial

Incrementally show a VMobject.

mobject (VMobject | OpenGLVMobject | OpenGLSurface) – The VMobject to animate.

lag_ratio (float)

introducer (bool)

TypeError – If mobject is not an instance of VMobject.

Examples

Example: CreateScene ¶

See also

ShowPassingFlash

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (VMobject | OpenGLVMobject | OpenGLSurface)

lag_ratio (float)

introducer (bool)

None


---

# manim.animation.indication.Flash.html

# Flash¶

```python
from manim import *

class UsingFlash(Scene):
    def construct(self):
        dot = Dot(color=YELLOW).shift(DOWN)
        self.add(Tex("Flash the dot below:"), dot)
        self.play(Flash(dot))
        self.wait()
```

```python
from manim import *

class FlashOnCircle(Scene):
    def construct(self):
        radius = 2
        circle = Circle(radius)
        self.add(circle)
        self.play(Flash(
            circle, line_length=1,
            num_lines=30, color=RED,
            flash_radius=radius+SMALL_BUFF,
            time_width=0.3, run_time=2,
            rate_func = rush_from
        ))
```

Qualified name: manim.animation.indication.Flash

Bases: AnimationGroup

Send out lines in all directions.

point (np.ndarray | Mobject) – The center of the flash lines. If it is a Mobject its center will be used.

line_length (float) – The length of the flash lines.

num_lines (int) – The number of flash lines.

flash_radius (float) – The distance from point at which the flash lines start.

line_stroke_width (int) – The stroke width of the flash lines.

color (str) – The color of the flash lines.

time_width (float) – The time width used for the flash lines. See ShowPassingFlash for more details.

run_time (float) – The duration of the animation.

kwargs – Additional arguments to be passed to the Succession constructor

Examples

Example: UsingFlash ¶

Example: FlashOnCircle ¶

Methods

create_line_anims

create_lines

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

point (ndarray | Mobject)

line_length (float)

num_lines (int)

flash_radius (float)

line_stroke_width (int)

color (str)

time_width (float)

run_time (float)

None


---

# manim.mobject.graph.html

# graph¶

```python
nx.classes.graph.Graph | nx.classes.digraph.DiGraph
```

Mobjects used to represent mathematical graphs (think graph theory, not plotting).

Type Aliases

Classes

DiGraph

A directed graph.

GenericGraph

Abstract base class for graphs (that is, a collection of vertices connected with edges).

Graph

An undirected graph (vertices connected with edges).

LayoutFunction

A protocol for automatic layout functions that compute a layout for a graph to be used in change_layout().


---

# manim.mobject.table.Table.html

# Table¶

```python
from manim import *

class TableExamples(Scene):
    def construct(self):
        t0 = Table(
            [["This", "is a"],
            ["simple", "Table in \\n Manim."]])
        t1 = Table(
            [["This", "is a"],
            ["simple", "Table."]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        t1.add_highlighted_cell((2,2), color=YELLOW)
        t2 = Table(
            [["This", "is a"],
            ["simple", "Table."]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")],
            top_left_entry=Star().scale(0.3),
            include_outer_lines=True,
            arrange_in_grid_config={"cell_alignment": RIGHT})
        t2.add(t2.get_cell((2,2), color=RED))
        t3 = Table(
            [["This", "is a"],
            ["simple", "Table."]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")],
            top_left_entry=Star().scale(0.3),
            include_outer_lines=True,
            line_config={"stroke_width": 1, "color": YELLOW})
        t3.remove(*t3.get_vertical_lines())
        g = Group(
            t0,t1,t2,t3
        ).scale(0.7).arrange_in_grid(buff=1)
        self.add(g)
```

```python
from manim import *

class BackgroundRectanglesExample(Scene):
    def construct(self):
        background = Rectangle(height=6.5, width=13)
        background.set_fill(opacity=.5)
        background.set_color([TEAL, RED, YELLOW])
        self.add(background)
        t0 = Table(
            [["This", "is a"],
            ["simple", "Table."]],
            add_background_rectangles_to_entries=True)
        t1 = Table(
            [["This", "is a"],
            ["simple", "Table."]],
            include_background_rectangle=True)
        g = Group(t0, t1).scale(0.7).arrange(buff=0.5)
        self.add(g)
```

```python
from manim import *

class AddHighlightedCellExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        table.add_highlighted_cell((2,2), color=GREEN)
        self.add(table)
```

```python
from manim import *

class CreateTableExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")],
            include_outer_lines=True)
        self.play(table.create())
        self.wait()
```

```python
from manim import *

class GetCellExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        cell = table.get_cell((2,2), color=RED)
        self.add(table, cell)
```

```python
from manim import *

class GetColLabelsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        lab = table.get_col_labels()
        for item in lab:
            item.set_color(random_bright_color())
        self.add(table)
```

```python
from manim import *

class GetColumnsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        table.add(SurroundingRectangle(table.get_columns()[1]))
        self.add(table)
```

```python
from manim import *

class GetEntriesExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        ent = table.get_entries()
        for item in ent:
            item.set_color(random_bright_color())
        table.get_entries((2,2)).rotate(PI)
        self.add(table)
```

```python
from manim import *

class GetEntriesWithoutLabelsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        ent = table.get_entries_without_labels()
        colors = [BLUE, GREEN, YELLOW, RED]
        for k in range(len(colors)):
            ent[k].set_color(colors[k])
        table.get_entries_without_labels((2,2)).rotate(PI)
        self.add(table)
```

```python
from manim import *

class GetHighlightedCellExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        highlight = table.get_highlighted_cell((2,2), color=GREEN)
        table.add_to_back(highlight)
        self.add(table)
```

```python
from manim import *

class GetHorizontalLinesExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        table.get_horizontal_lines().set_color(RED)
        self.add(table)
```

```python
from manim import *

class GetLabelsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        lab = table.get_labels()
        colors = [BLUE, GREEN, YELLOW, RED]
        for k in range(len(colors)):
            lab[k].set_color(colors[k])
        self.add(table)
```

```python
from manim import *

class GetRowLabelsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        lab = table.get_row_labels()
        for item in lab:
            item.set_color(random_bright_color())
        self.add(table)
```

```python
from manim import *

class GetRowsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        table.add(SurroundingRectangle(table.get_rows()[1]))
        self.add(table)
```

```python
from manim import *

class GetVerticalLinesExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")])
        table.get_vertical_lines()[0].set_color(RED)
        self.add(table)
```

```python
from manim import *

class MobjectScaleExample(Scene):
    def construct(self):
        c1 = Circle(1, RED).set_x(-1)
        c2 = Circle(1, GREEN).set_x(1)

        vg = VGroup(c1, c2)
        vg.set_stroke(width=50)
        self.add(vg)

        self.play(
            c1.animate.scale(.25),
            c2.animate.scale(.25,
                scale_stroke=True)
        )
```

```python
from manim import *

class SetColumnColorsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")]
        ).set_column_colors([RED,BLUE], GREEN)
        self.add(table)
```

```python
from manim import *

class SetRowColorsExample(Scene):
    def construct(self):
        table = Table(
            [["First", "Second"],
            ["Third","Fourth"]],
            row_labels=[Text("R1"), Text("R2")],
            col_labels=[Text("C1"), Text("C2")]
        ).set_row_colors([RED,BLUE], GREEN)
        self.add(table)
```

Qualified name: manim.mobject.table.Table

Bases: VGroup

A mobject that displays a table on the screen.

table (Iterable[Iterable[float | str | VMobject]]) – A 2D array or list of lists. Content of the table has to be a valid input for the callable set in element_to_mobject.

row_labels (Iterable[VMobject] | None) – List of VMobject representing the labels of each row.

col_labels (Iterable[VMobject] | None) – List of VMobject representing the labels of each column.

top_left_entry (VMobject | None) – The top-left entry of the table, can only be specified if row and column labels are given.

v_buff (float) – Vertical buffer passed to arrange_in_grid(), by default 0.8.

h_buff (float) – Horizontal buffer passed to arrange_in_grid(), by default 1.3.

include_outer_lines (bool) – True if the table should include outer lines, by default False.

add_background_rectangles_to_entries (bool) – True if background rectangles should be added to entries, by default False.

entries_background_color (ParsableManimColor) – Background color of entries if add_background_rectangles_to_entries is True.

include_background_rectangle (bool) – True if the table should have a background rectangle, by default False.

background_rectangle_color (ParsableManimColor) – Background color of table if include_background_rectangle is True.

element_to_mobject (Callable[[float | str | VMobject], VMobject]) – The Mobject class applied to the table entries. by default Paragraph. For common choices, see text_mobject/tex_mobject.

element_to_mobject_config (dict) – Custom configuration passed to element_to_mobject, by default {}.

arrange_in_grid_config (dict) – Dict passed to arrange_in_grid(), customizes the arrangement of the table.

line_config (dict) – Dict passed to Line, customizes the lines of the table.

kwargs – Additional arguments to be passed to VGroup.

Examples

Example: TableExamples ¶

Example: BackgroundRectanglesExample ¶

Methods

add_background_to_entries

Adds a black BackgroundRectangle to each entry of the table.

add_highlighted_cell

Highlights one cell at a specific position on the table by adding a BackgroundRectangle.

create

Customized create-type function for tables.

get_cell

Returns one specific cell as a rectangular Polygon without the entry.

get_col_labels

Return the column labels of the table.

get_columns

Return columns of the table as a VGroup of VGroup.

get_entries

Return the individual entries of the table (including labels) or one specific entry if the parameter, pos, is set.

get_entries_without_labels

Return the individual entries of the table (without labels) or one specific entry if the parameter, pos, is set.

get_highlighted_cell

Returns a BackgroundRectangle of the cell at the given position.

get_horizontal_lines

Return the horizontal lines of the table.

get_labels

Returns the labels of the table.

get_row_labels

Return the row labels of the table.

get_rows

Return the rows of the table as a VGroup of VGroup.

get_vertical_lines

Return the vertical lines of the table.

scale

Scale the size by a factor.

set_column_colors

Set individual colors for each column of the table.

set_row_colors

Set individual colors for each row of the table.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Adds the horizontal lines to the table.

Table

Adds labels to an in a grid arranged VGroup.

mob_table (VGroup) – An in a grid organized class:~.VGroup.

Returns the mob_table with added labels.

VGroup

Adds the vertical lines to the table

Table

Arranges the VMobject of table in a grid.

table (Iterable[Iterable[VMobject]]) – A 2D iterable object with VMobject entries.

The VMobject of the table in a VGroup already arranged in a table-like grid.

VGroup

Initialize self. See help(type(self)) for accurate signature.

table (Iterable[Iterable[float | str | VMobject]])

row_labels (Iterable[VMobject] | None)

col_labels (Iterable[VMobject] | None)

top_left_entry (VMobject | None)

v_buff (float)

h_buff (float)

include_outer_lines (bool)

add_background_rectangles_to_entries (bool)

entries_background_color (ParsableManimColor)

include_background_rectangle (bool)

background_rectangle_color (ParsableManimColor)

element_to_mobject (Callable[[float | str | VMobject], VMobject])

element_to_mobject_config (dict)

arrange_in_grid_config (dict)

line_config (dict)

Initilaizes the entries of table as VMobject.

table (Iterable[Iterable[float | str | VMobject]]) – A 2D array or list of lists. Content of the table has to be a valid input for the callable set in element_to_mobject.

List of VMobject from the entries of table.

List

Adds a black BackgroundRectangle to each entry of the table.

color (ParsableManimColor)

Table

Highlights one cell at a specific position on the table by adding a BackgroundRectangle.

pos (Sequence[int]) – The position of a specific entry on the table. (1,1) being the top left entry of the table.

color (ParsableManimColor) – The color used to highlight the cell.

kwargs – Additional arguments to be passed to BackgroundRectangle.

Table

Examples

Example: AddHighlightedCellExample ¶

Customized create-type function for tables.

lag_ratio (float) – The lag ratio of the animation.

line_animation (Callable[[VMobject | VGroup], Animation]) – The animation style of the table lines, see creation for examples.

label_animation (Callable[[VMobject | VGroup], Animation]) – The animation style of the table labels, see creation for examples.

element_animation (Callable[[VMobject | VGroup], Animation]) – The animation style of the table elements, see creation for examples.

entry_animation (Callable[[VMobject | VGroup], Animation]) – The entry animation of the table background, see creation for examples.

kwargs – Further arguments passed to the creation animations.

AnimationGroup containing creation of the lines and of the elements.

AnimationGroup

Examples

Example: CreateTableExample ¶

Returns one specific cell as a rectangular Polygon without the entry.

pos (Sequence[int]) – The position of a specific entry on the table. (1,1) being the top left entry of the table.

kwargs – Additional arguments to be passed to Polygon.

Polygon mimicking one specific cell of the Table.

Polygon

Examples

Example: GetCellExample ¶

Return the column labels of the table.

VGroup containing the column labels of the table.

VGroup

Examples

Example: GetColLabelsExample ¶

Return columns of the table as a VGroup of VGroup.

VGroup containing each column in a VGroup.

VGroup

Examples

Example: GetColumnsExample ¶

Return the individual entries of the table (including labels) or one specific entry if the parameter, pos, is set.

pos (Sequence[int] | None) – The position of a specific entry on the table. (1,1) being the top left entry of the table.

VGroup containing all entries of the table (including labels) or the VMobject at the given position if pos is set.

Union[VMobject, VGroup]

Examples

Example: GetEntriesExample ¶

Return the individual entries of the table (without labels) or one specific entry if the parameter, pos, is set.

pos (Sequence[int] | None) – The position of a specific entry on the table. (1,1) being the top left entry of the table (without labels).

VGroup containing all entries of the table (without labels) or the VMobject at the given position if pos is set.

Union[VMobject, VGroup]

Examples

Example: GetEntriesWithoutLabelsExample ¶

Returns a BackgroundRectangle of the cell at the given position.

pos (Sequence[int]) – The position of a specific entry on the table. (1,1) being the top left entry of the table.

color (ParsableManimColor) – The color used to highlight the cell.

kwargs – Additional arguments to be passed to BackgroundRectangle.

BackgroundRectangle

Examples

Example: GetHighlightedCellExample ¶

Return the horizontal lines of the table.

VGroup containing all the horizontal lines of the table.

VGroup

Examples

Example: GetHorizontalLinesExample ¶

Returns the labels of the table.

VGroup containing all the labels of the table.

VGroup

Examples

Example: GetLabelsExample ¶

Return the row labels of the table.

VGroup containing the row labels of the table.

VGroup

Examples

Example: GetRowLabelsExample ¶

Return the rows of the table as a VGroup of VGroup.

VGroup containing each row in a VGroup.

VGroup

Examples

Example: GetRowsExample ¶

Return the vertical lines of the table.

VGroup containing all the vertical lines of the table.

VGroup

Examples

Example: GetVerticalLinesExample ¶

Scale the size by a factor.

Default behavior is to scale about the center of the vmobject.

scale_factor (float) – The scaling factor \(\alpha\). If \(0 < |\alpha| < 1\), the mobject will shrink, and for \(|\alpha| > 1\) it will grow. Furthermore, if \(\alpha < 0\), the mobject is also flipped.

scale_stroke – Boolean determining if the object’s outline is scaled when the object is scaled. If enabled, and object with 2px outline is scaled by a factor of .5, it will have an outline of 1px.

kwargs – Additional keyword arguments passed to scale().

self

VMobject

Examples

Example: MobjectScaleExample ¶

See also

move_to()

Set individual colors for each column of the table.

colors (Iterable[ParsableManimColor]) – An iterable of colors; each color corresponds to a column.

Table

Examples

Example: SetColumnColorsExample ¶

Set individual colors for each row of the table.

colors (Iterable[ParsableManimColor]) – An iterable of colors; each color corresponds to a row.

Table

Examples

Example: SetRowColorsExample ¶


---

# configuration.html

# Configuration¶

## Module Index¶

_config

Set the global config and logger.

utils

Utilities to create and set the config.

logger_utils

Utilities to create and set the logger.


---

# manim._config.utils.html

# utils¶

Utilities to create and set the config.

The main class exported by this module is ManimConfig. This class contains all configuration options, including frame geometry (e.g. frame height/width, frame rate), output (e.g. directories, logging), styling (e.g. background color, transparency), and general behavior (e.g. writing a movie vs writing a single frame).

See Configuration for an introduction to Manim’s configuration system.

Classes

ManimConfig

Dict-like class storing all config options.

ManimFrame

Functions

The paths where .cfg files will be searched for.

When manim is first imported, it processes any .cfg files it finds. This function returns the locations in which these files are searched for. In ascending order of precedence, these are: the library-wide config file, the user-wide config file, and the folder-wide config file.

The library-wide config file determines manim’s default behavior. The user-wide config file is stored in the user’s home folder, and determines the behavior of manim whenever the user invokes it from anywhere in the system. The folder-wide config file only affects scenes that are in the same folder. The latter two files are optional.

These files, if they exist, are meant to loaded into a single configparser.ConfigParser object, and then processed by ManimConfig.

List of paths which may contain .cfg files, in ascending order of precedence.

List[Path]

See also

make_config_parser(), ManimConfig.digest_file(), ManimConfig.digest_parser()

Notes

The location of the user-wide config file is OS-specific.

Make a ConfigParser object and load any .cfg files.

The user-wide file, if it exists, overrides the library-wide file. The folder-wide file, if it exists, overrides the other two.

The folder-wide file can be ignored by passing custom_file. However, the user-wide and library-wide config files cannot be ignored.

custom_file (StrPath | None) – Path to a custom config file. If used, the folder-wide file in the relevant directory will be ignored, if it exists. If None, the folder-wide file will be used, if it exists.

A parser containing the config options found in the .cfg files that were found. It is guaranteed to contain at least the config options found in the library-wide file.

ConfigParser

See also

config_file_paths()


---

# manim.animation.transform.FadeToColor.html

# FadeToColor¶

```python
from manim import *

class FadeToColorExample(Scene):
    def construct(self):
        self.play(FadeToColor(Text("Hello World!"), color=RED))
```

Qualified name: manim.animation.transform.FadeToColor

Bases: ApplyMethod

Animation that changes color of a mobject.

Examples

Example: FadeToColorExample ¶

Methods

Attributes

path_arc

path_func

run_time

mobject (Mobject)

color (str)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

color (str)

None


---

# manim.animation.composition.LaggedStart.html

# LaggedStart¶

```python
from manim import *

class LaggedStartExample(Scene):
    def construct(self):
        title = Text("lag_ratio = 0.25").to_edge(UP)

        dot1 = Dot(point=LEFT * 2 + UP, radius=0.16)
        dot2 = Dot(point=LEFT * 2, radius=0.16)
        dot3 = Dot(point=LEFT * 2 + DOWN, radius=0.16)
        line_25 = DashedLine(
            start=LEFT + UP * 2,
            end=LEFT + DOWN * 2,
            color=RED
        )
        label = Text("25%", font_size=24).next_to(line_25, UP)
        self.add(title, dot1, dot2, dot3, line_25, label)

        self.play(LaggedStart(
            dot1.animate.shift(RIGHT * 4),
            dot2.animate.shift(RIGHT * 4),
            dot3.animate.shift(RIGHT * 4),
            lag_ratio=0.25,
            run_time=4
        ))
```

Qualified name: manim.animation.composition.LaggedStart

Bases: AnimationGroup

Adjusts the timing of a series of Animation according to lag_ratio.

animations (Animation) – Sequence of Animation objects to be played.

lag_ratio (float) – Defines the delay after which the animation is applied to submobjects. A lag_ratio of n.nn means the next animation will play when nnn% of the current animation has played. Defaults to 0.05, meaning that the next animation will begin when 5% of the current animation has played. This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

Defines the delay after which the animation is applied to submobjects. A lag_ratio of n.nn means the next animation will play when nnn% of the current animation has played. Defaults to 0.05, meaning that the next animation will begin when 5% of the current animation has played.

This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

Examples

Example: LaggedStartExample ¶

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

animations (Animation)

lag_ratio (float)


---

# manim.scene.three_d_scene.SpecialThreeDScene.html

# SpecialThreeDScene¶

Qualified name: manim.scene.three\_d\_scene.SpecialThreeDScene

Bases: ThreeDScene

An extension of ThreeDScene with more settings.

It has some extra configuration for axes, spheres, and an override for low quality rendering. Further key differences are:

The camera shades applicable 3DMobjects by default, except if rendering in low quality.

Some default params for Spheres and Axes have been added.

Methods

get_axes

Return a set of 3D axes.

get_default_camera_position

Returns the default_angled_camera position.

get_sphere

Returns a sphere with the passed keyword arguments as properties.

set_camera_to_default_position

Sets the camera to its default position.

Attributes

camera

time

The time since the start of the scene.

Return a set of 3D axes.

A set of 3D axes.

ThreeDAxes

Returns the default_angled_camera position.

Dictionary of phi, theta, focal_distance, and gamma.

dict

Returns a sphere with the passed keyword arguments as properties.

**kwargs – Any valid parameter of Sphere or Surface.

The sphere object.

Sphere

Sets the camera to its default position.


---

# manim.animation.rotation.Rotating.html

# Rotating¶

Qualified name: manim.animation.rotation.Rotating

Bases: Animation

Methods

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

Attributes

run_time

mobject (Mobject)

axis (np.ndarray)

radians (np.ndarray)

about_point (np.ndarray | None)

about_edge (np.ndarray | None)

run_time (float)

rate_func (Callable[[float], float])

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

axis (np.ndarray)

radians (np.ndarray)

about_point (np.ndarray | None)

about_edge (np.ndarray | None)

run_time (float)

rate_func (Callable[[float], float])

None

Interpolates the mobject of the Animation based on alpha value.

alpha (float) – A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

None


---

# manim.animation.transform.ApplyMatrix.html

# ApplyMatrix¶

```python
from manim import *

class ApplyMatrixExample(Scene):
    def construct(self):
        matrix = [[1, 1], [0, 2/3]]
        self.play(ApplyMatrix(matrix, Text("Hello World!")), ApplyMatrix(matrix, NumberPlane()))
```

Qualified name: manim.animation.transform.ApplyMatrix

Bases: ApplyPointwiseFunction

Applies a matrix transform to an mobject.

matrix (np.ndarray) – The transformation matrix.

mobject (Mobject) – The Mobject.

about_point (np.ndarray) – The origin point for the transform. Defaults to ORIGIN.

kwargs – Further keyword arguments that are passed to ApplyPointwiseFunction.

Examples

Example: ApplyMatrixExample ¶

Methods

initialize_matrix

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

matrix (ndarray)

mobject (Mobject)

about_point (ndarray)

None


---

# manim.animation.composition.AnimationGroup.html

# AnimationGroup¶

Qualified name: manim.animation.composition.AnimationGroup

Bases: Animation

Plays a group or series of Animation.

animations (Animation | Iterable[Animation] | types.GeneratorType[Animation]) – Sequence of Animation objects to be played.

group (Group | VGroup | OpenGLGroup | OpenGLVGroup) – A group of multiple Mobject.

run_time (float | None) – The duration of the animation in seconds.

rate_func (Callable[[float], float]) – The function defining the animation progress based on the relative runtime (see rate_functions) .

lag_ratio (float) – Defines the delay after which the animation is applied to submobjects. A lag_ratio of n.nn means the next animation will play when nnn% of the current animation has played. Defaults to 0.0, meaning that all animations will be played together. This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

Defines the delay after which the animation is applied to submobjects. A lag_ratio of n.nn means the next animation will play when nnn% of the current animation has played. Defaults to 0.0, meaning that all animations will be played together.

This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

Methods

begin

Begin the animation.

build_animations_with_timings

Creates a list of triplets of the form (anim, start_time, end_time).

clean_up_from_scene

Clean up the Scene after finishing the animation.

finish

Finish the animation.

get_all_mobjects

Get all mobjects involved in the animation.

init_run_time

Calculates the run time of the animation, if different from run_time.

interpolate

Set the animation progress.

update_mobjects

Updates things like starting_mobject, and (for Transforms) target_mobject.

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

animations (Animation | Iterable[Animation] | types.GeneratorType[Animation])

group (Group | VGroup | OpenGLGroup | OpenGLVGroup)

run_time (float | None)

rate_func (Callable[[float], float])

lag_ratio (float)

None

Setup up the Scene before starting the animation.

This includes to add() the Animation’s Mobject if the animation is an introducer.

scene – The scene the animation should be cleaned up from.

None

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Creates a list of triplets of the form (anim, start_time, end_time).

None

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None

Finish the animation.

This method gets called when the animation is over.

None

Get all mobjects involved in the animation.

Ordering must match the ordering of arguments to interpolate_submobject

The sequence of mobjects.

Sequence[Mobject]

Calculates the run time of the animation, if different from run_time.

run_time – The duration of the animation in seconds.

The duration of the animation in seconds.

run_time

Set the animation progress.

This method gets called for every frame during an animation.

alpha (float) – The relative time to set the animation to, 0 meaning the start, 1 meaning the end.

None

Updates things like starting_mobject, and (for Transforms) target_mobject. Note, since typically (always?) self.mobject will have its updating suspended during the animation, this will do nothing to self.mobject.

dt (float)

None


---

# manim.animation.creation.ShowPartial.html

# ShowPartial¶

Qualified name: manim.animation.creation.ShowPartial

Bases: Animation

Abstract class for Animations that show the VMobject partially.

TypeError – If mobject is not an instance of VMobject.

mobject (VMobject | OpenGLVMobject | OpenGLSurface | None)

See also

Create, ShowPassingFlash

Methods

interpolate_submobject

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (VMobject | OpenGLVMobject | OpenGLSurface | None)


---

# manim.animation.creation.ShowSubmobjectsOneByOne.html

# ShowSubmobjectsOneByOne¶

Qualified name: manim.animation.creation.ShowSubmobjectsOneByOne

Bases: ShowIncreasingSubsets

Show one submobject at a time, removing all previously displayed ones from screen.

Methods

update_submobject_list

Attributes

run_time

group (Iterable[Mobject])

int_func (Callable[[np.ndarray], np.ndarray])

Initialize self. See help(type(self)) for accurate signature.

group (Iterable[Mobject])

int_func (Callable[[ndarray], ndarray])

None


---

# manim.mobject.vector_field.StreamLines.html

# StreamLines¶

```python
from manim import *

class BasicUsage(Scene):
    def construct(self):
        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3
        self.add(StreamLines(func))
```

```python
from manim import *

class SpawningAndFlowingArea(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0]) * UR + np.cos(pos[1]) * LEFT + pos / 5
        stream_lines = StreamLines(
            func, x_range=[-3, 3, 0.2], y_range=[-2, 2, 0.2], padding=1
        )

        spawning_area = Rectangle(width=6, height=4)
        flowing_area = Rectangle(width=8, height=6)
        labels = [Tex("Spawning Area"), Tex("Flowing Area").shift(DOWN * 2.5)]
        for lbl in labels:
            lbl.add_background_rectangle(opacity=0.6, buff=0.05)

        self.add(stream_lines, spawning_area, flowing_area, *labels)
```

```python
from manim import *

class StreamLineCreation(Scene):
    def construct(self):
        func = lambda pos: (pos[0] * UR + pos[1] * LEFT) - pos
        stream_lines = StreamLines(
            func,
            color=YELLOW,
            x_range=[-7, 7, 1],
            y_range=[-4, 4, 1],
            stroke_width=3,
            virtual_time=1,  # use shorter lines
            max_anchors_per_line=5,  # better performance with fewer anchors
        )
        self.play(stream_lines.create())  # uses virtual_time as run_time
        self.wait()
```

```python
from manim import *

class EndAnimation(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT
        stream_lines = StreamLines(
            func, stroke_width=3, max_anchors_per_line=5, virtual_time=1, color=BLUE
        )
        self.add(stream_lines)
        stream_lines.start_animation(warm_up=False, flow_speed=1.5, time_width=0.5)
        self.wait(1)
        self.play(stream_lines.end_animation())
```

```python
from manim import *

class ContinuousMotion(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT
        stream_lines = StreamLines(func, stroke_width=3, max_anchors_per_line=30)
        self.add(stream_lines)
        stream_lines.start_animation(warm_up=False, flow_speed=1.5)
        self.wait(stream_lines.virtual_time / stream_lines.flow_speed)
```

Qualified name: manim.mobject.vector\_field.StreamLines

Bases: VectorField

StreamLines represent the flow of a VectorField using the trace of moving agents.

Vector fields are always based on a function defining the vector at every position. The values of this functions is displayed by moving many agents along the vector field and showing their trace.

func (Callable[[np.ndarray], np.ndarray]) – The function defining the rate of change at every position of the vector field.

color (ParsableManimColor | None) – The color of the vector field. If set, position-specific coloring is disabled.

color_scheme (Callable[[np.ndarray], float] | None) – A function mapping a vector to a single value. This value gives the position in the color gradient defined using min_color_scheme_value, max_color_scheme_value and colors.

min_color_scheme_value (float) – The value of the color_scheme function to be mapped to the first color in colors. Lower values also result in the first color of the gradient.

max_color_scheme_value (float) – The value of the color_scheme function to be mapped to the last color in colors. Higher values also result in the last color of the gradient.

colors (Sequence[ParsableManimColor]) – The colors defining the color gradient of the vector field.

x_range (Sequence[float]) – A sequence of x_min, x_max, delta_x

y_range (Sequence[float]) – A sequence of y_min, y_max, delta_y

z_range (Sequence[float]) – A sequence of z_min, z_max, delta_z

three_dimensions (bool) – Enables three_dimensions. Default set to False, automatically turns True if z_range is not None.

noise_factor (float | None) – The amount by which the starting position of each agent is altered along each axis. Defaults to delta_y / 2 if not defined.

n_repeats – The number of agents generated at each starting point.

dt – The factor by which the distance an agent moves per step is stretched. Lower values result in a better approximation of the trajectories in the vector field.

virtual_time – The time the agents get to move in the vector field. Higher values therefore result in longer stream lines. However, this whole time gets simulated upon creation.

max_anchors_per_line – The maximum number of anchors per line. Lines with more anchors get reduced in complexity, not in length.

padding – The distance agents can move out of the generation area before being terminated.

stroke_width – The stroke with of the stream lines.

opacity – The opacity of the stream lines.

Examples

Example: BasicUsage ¶

Example: SpawningAndFlowingArea ¶

Methods

create

The creation animation of the stream lines.

end_animation

End the stream line animation smoothly.

start_animation

Animates the stream lines using an updater.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

func (Callable[[np.ndarray], np.ndarray])

color (ParsableManimColor | None)

color_scheme (Callable[[np.ndarray], float] | None)

min_color_scheme_value (float)

max_color_scheme_value (float)

colors (Sequence[ParsableManimColor])

x_range (Sequence[float])

y_range (Sequence[float])

z_range (Sequence[float])

three_dimensions (bool)

noise_factor (float | None)

The creation animation of the stream lines.

The stream lines appear in random order.

lag_ratio (float | None) – The lag ratio of the animation. If undefined, it will be selected so that the total animation length is 1.5 times the run time of each stream line creation.

run_time (Callable[[float], float] | None) – The run time of every single stream line creation. The runtime of the whole animation might be longer due to the lag_ratio. If undefined, the virtual time of the stream lines is used as run time.

The creation animation of the stream lines.

AnimationGroup

Examples

Example: StreamLineCreation ¶

End the stream line animation smoothly.

Returns an animation resulting in fully displayed stream lines without a noticeable cut.

The animation fading out the running stream animation.

AnimationGroup

ValueError – if no stream line animation is running

Examples

Example: EndAnimation ¶

Animates the stream lines using an updater.

The stream lines will continuously flow

warm_up (bool) – If True the animation is initialized line by line. Otherwise it starts with all lines shown.

flow_speed (float) – At flow_speed=1 the distance the flow moves per second is equal to the magnitude of the vector field along its path. The speed value scales the speed of this flow.

time_width (float) – The proportion of the stream line shown while being animated

rate_func (Callable[[float], float]) – The rate function of each stream line flashing

line_animation_class (type[ShowPassingFlash]) – The animation class being used

None

Examples

Example: ContinuousMotion ¶


---

# manim.mobject.matrix.MobjectMatrix.html

# MobjectMatrix¶

```python
from manim import *

class MobjectMatrixExample(Scene):
    def construct(self):
        a = Circle().scale(0.3)
        b = Square().scale(0.3)
        c = MathTex("\\pi").scale(2)
        d = Star().scale(0.3)
        m0 = MobjectMatrix([[a, b], [c, d]])
        self.add(m0)
```

Qualified name: manim.mobject.matrix.MobjectMatrix

Bases: Matrix

A mobject that displays a matrix of mobject entries on the screen.

Examples

Example: MobjectMatrixExample ¶

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.


---

# manim.scene.three_d_scene.ThreeDScene.html

# ThreeDScene¶

Qualified name: manim.scene.three\_d\_scene.ThreeDScene

Bases: Scene

This is a Scene, with special configurations and properties that make it suitable for Three Dimensional Scenes.

Methods

add_fixed_in_frame_mobjects

This method is used to prevent the rotation and movement of mobjects as the camera moves around.

add_fixed_orientation_mobjects

This method is used to prevent the rotation and tilting of mobjects as the camera moves around.

begin_3dillusion_camera_rotation

This method creates a 3D camera rotation illusion around the current camera orientation.

begin_ambient_camera_rotation

This method begins an ambient rotation of the camera about the Z_AXIS, in the anticlockwise direction

get_moving_mobjects

This method returns a list of all of the Mobjects in the Scene that are moving, that are also in the animations passed.

move_camera

This method animates the movement of the camera to the given spherical coordinates.

remove_fixed_in_frame_mobjects

This method undoes what add_fixed_in_frame_mobjects does.

remove_fixed_orientation_mobjects

This method "unfixes" the orientation of the mobjects passed, meaning they will no longer be at the same angle relative to the camera.

set_camera_orientation

This method sets the orientation of the camera in the scene.

set_to_default_angled_camera_orientation

This method sets the default_angled_camera_orientation to the keyword arguments passed, and sets the camera to that orientation.

stop_3dillusion_camera_rotation

This method stops all illusion camera rotations.

stop_ambient_camera_rotation

This method stops all ambient camera rotation.

Attributes

camera

time

The time since the start of the scene.

This method is used to prevent the rotation and movement of mobjects as the camera moves around. The mobject is essentially overlaid, and is not impacted by the camera’s movement in any way.

*mobjects (Mobject) – The Mobjects whose orientation must be fixed.

This method is used to prevent the rotation and tilting of mobjects as the camera moves around. The mobject can still move in the x,y,z directions, but will always be at the angle (relative to the camera) that it was at when it was passed through this method.)

*mobjects (Mobject) – The Mobject(s) whose orientation must be fixed.

**kwargs – Some valid kwargs areuse_static_center_func : bool center_func : function

use_static_center_func : bool center_func : function

This method creates a 3D camera rotation illusion around the current camera orientation.

rate (float) – The rate at which the camera rotation illusion should operate.

origin_phi (float | None) – The polar angle the camera should move around. Defaults to the current phi angle.

origin_theta (float | None) – The azimutal angle the camera should move around. Defaults to the current theta angle.

This method begins an ambient rotation of the camera about the Z_AXIS, in the anticlockwise direction

rate (float) – The rate at which the camera should rotate about the Z_AXIS. Negative rate means clockwise rotation.

about (str) – one of 3 options: [“theta”, “phi”, “gamma”]. defaults to theta.

This method returns a list of all of the Mobjects in the Scene that are moving, that are also in the animations passed.

*animations (Animation) – The animations whose mobjects will be checked.

This method animates the movement of the camera to the given spherical coordinates.

phi (float | None) – The polar angle i.e the angle between Z_AXIS and Camera through ORIGIN in radians.

theta (float | None) – The azimuthal angle i.e the angle that spins the camera around the Z_AXIS.

focal_distance (float | None) – The radial focal_distance between ORIGIN and Camera.

gamma (float | None) – The rotation of the camera about the vector from the ORIGIN to the Camera.

zoom (float | None) – The zoom factor of the camera.

frame_center (Mobject | Sequence[float] | None) – The new center of the camera frame in cartesian coordinates.

added_anims (Iterable[Animation]) – Any other animations to be played at the same time.

This method undoes what add_fixed_in_frame_mobjects does. It allows the mobject to be affected by the movement of the camera.

*mobjects (Mobject) – The Mobjects whose position and orientation must be unfixed.

This method “unfixes” the orientation of the mobjects passed, meaning they will no longer be at the same angle relative to the camera. This only makes sense if the mobject was passed through add_fixed_orientation_mobjects first.

*mobjects (Mobject) – The Mobjects whose orientation must be unfixed.

This method sets the orientation of the camera in the scene.

phi (float | None) – The polar angle i.e the angle between Z_AXIS and Camera through ORIGIN in radians.

theta (float | None) – The azimuthal angle i.e the angle that spins the camera around the Z_AXIS.

focal_distance (float | None) – The focal_distance of the Camera.

gamma (float | None) – The rotation of the camera about the vector from the ORIGIN to the Camera.

zoom (float | None) – The zoom factor of the scene.

frame_center (Mobject | Sequence[float] | None) – The new center of the camera frame in cartesian coordinates.

This method sets the default_angled_camera_orientation to the keyword arguments passed, and sets the camera to that orientation.

**kwargs – Some recognised kwargs are phi, theta, focal_distance, gamma, which have the same meaning as the parameters in set_camera_orientation.

This method stops all illusion camera rotations.

This method stops all ambient camera rotation.


---

# manim.mobject.matrix.DecimalMatrix.html

# DecimalMatrix¶

```python
from manim import *

class DecimalMatrixExample(Scene):
    def construct(self):
        m0 = DecimalMatrix(
            [[3.456, 2.122], [33.2244, 12]],
            element_to_mobject_config={"num_decimal_places": 2},
            left_bracket="\\{",
            right_bracket="\\}")
        self.add(m0)
```

Qualified name: manim.mobject.matrix.DecimalMatrix

Bases: Matrix

A mobject that displays a matrix with decimal entries on the screen.

Examples

Example: DecimalMatrixExample ¶

Will round/truncate the decimal places as per the provided config.

matrix (Iterable) – A numpy 2d array or list of lists

element_to_mobject (Mobject) – Mobject to use, by default DecimalNumber

element_to_mobject_config (dict[str, Mobject]) – Config for the desired mobject, by default {“num_decimal_places”: 1}

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Will round/truncate the decimal places as per the provided config.

matrix (Iterable) – A numpy 2d array or list of lists

element_to_mobject (Mobject) – Mobject to use, by default DecimalNumber

element_to_mobject_config (dict[str, Mobject]) – Config for the desired mobject, by default {“num_decimal_places”: 1}


---

# manim.animation.numbers.html

# numbers¶

Animations for changing numbers.

Classes

ChangeDecimalToValue

ChangingDecimal


---

# manim.animation.fading.html

# fading¶

```python
from manim import *

class Fading(Scene):
    def construct(self):
        tex_in = Tex("Fade", "In").scale(3)
        tex_out = Tex("Fade", "Out").scale(3)
        self.play(FadeIn(tex_in, shift=DOWN, scale=0.66))
        self.play(ReplacementTransform(tex_in, tex_out))
        self.play(FadeOut(tex_out, shift=DOWN * 2, scale=1.5))
```

Fading in and out of view.

Example: Fading ¶

Classes

FadeIn

Fade in Mobject s.

FadeOut

Fade out Mobject s.


---

# manim.utils.tex.html

# tex¶

Utilities for processing LaTeX templates.

Classes

TexTemplate

TeX templates are used to create Tex and MathTex objects.


---

# manim.camera.camera.Camera.html

# Camera¶

Qualified name: manim.camera.camera.Camera

Bases: object

Base camera class.

This is the object which takes care of what exactly is displayed on screen at any given moment.

background_image (str | None) – The path to an image that should be the background image. If not set, the background is filled with self.background_color

background (np.ndarray | None) – What background is set to. By default, None.

pixel_height (int | None) – The height of the scene in pixels.

pixel_width (int | None) – The width of the scene in pixels.

kwargs – Additional arguments (background_color, background_opacity) to be set.

frame_center (np.ndarray)

image_mode (str)

n_channels (int)

pixel_array_dtype (str)

cairo_line_width_multiple (float)

use_z_index (bool)

frame_height (float | None)

frame_width (float | None)

frame_rate (float | None)

background_color (ParsableManimColor | None)

background_opacity (float | None)

Methods

adjust_out_of_range_points

If any of the points in the passed array are out of the viable range, they are adjusted suitably.

adjusted_thickness

Computes the adjusted stroke width for a zoomed camera.

apply_fill

Fills the cairo context

apply_stroke

Applies a stroke to the VMobject in the cairo context.

cache_cairo_context

Caches the passed Pixel array into a Cairo Context

capture_mobject

Capture mobjects by storing it in pixel_array.

capture_mobjects

Capture mobjects by printing them on pixel_array.

convert_pixel_array

Converts a pixel array from values that have floats in then to proper RGB values.

display_image_mobject

Displays an ImageMobject by changing the pixel_array suitably.

display_multiple_background_colored_vmobjects

Displays multiple vmobjects that have the same color as the background.

display_multiple_image_mobjects

Displays multiple image mobjects by modifying the passed pixel_array.

display_multiple_non_background_colored_vmobjects

Displays multiple VMobjects in the cairo context, as long as they don't have background colors.

display_multiple_point_cloud_mobjects

Displays multiple PMobjects by modifying the passed pixel array.

display_multiple_vectorized_mobjects

Displays multiple VMobjects in the pixel_array

display_point_cloud

Displays a PMobject by modifying the pixel array suitably.

display_vectorized

Displays a VMobject in the cairo context

get_background_colored_vmobject_displayer

Returns the background_colored_vmobject_displayer if it exists or makes one and returns it if not.

get_cached_cairo_context

Returns the cached cairo context of the passed pixel array if it exists, and None if it doesn't.

get_cairo_context

Returns the cairo context for a pixel array after caching it to self.pixel_array_to_cairo_context If that array has already been cached, it returns the cached version instead.

get_coords_of_all_pixels

Returns the cartesian coordinates of each pixel.

get_fill_rgbas

Returns the RGBA array of the fill of the passed VMobject

get_image

Returns an image from the passed pixel array, or from the current frame if the passed pixel array is none.

get_mobjects_to_display

Used to get the list of mobjects to display with the camera.

get_stroke_rgbas

Gets the RGBA array for the stroke of the passed VMobject.

get_thickening_nudges

Determine a list of vectors used to nudge two-dimensional pixel coordinates.

init_background

Initialize the background.

is_in_frame

Checks whether the passed mobject is in frame or not.

make_background_from_func

Makes a pixel array for the background by using coords_to_colors_func to determine each pixel's color.

on_screen_pixels

Returns array of pixels that are on the screen from a given array of pixel_coordinates

overlay_PIL_image

Overlays a PIL image on the passed pixel array.

overlay_rgba_array

Overlays an RGBA array on top of the given Pixel array.

points_to_pixel_coords

reset

Resets the camera's pixel array to that of the background

reset_pixel_shape

This method resets the height and width of a single pixel to the passed new_height and new_width.

resize_frame_shape

Changes frame_shape to match the aspect ratio of the pixels, where fixed_dimension determines whether frame_height or frame_width remains fixed while the other changes accordingly.

set_background

Sets the background to the passed pixel_array after converting to valid RGB values.

set_background_from_func

Sets the background to a pixel array using coords_to_colors_func to determine each pixel's color.

set_cairo_context_color

Sets the color of the cairo context

set_cairo_context_path

Sets a path for the cairo context with the vmobject passed

set_frame_to_background

set_pixel_array

Sets the pixel array of the camera to the passed pixel array.

thickened_coordinates

Returns thickened coordinates for a passed array of pixel coords and a thickness to thicken by.

transform_points_pre_display

type_or_raise

Return the type of mobject, if it is a type that can be rendered.

Attributes

background_color

background_opacity

If any of the points in the passed array are out of the viable range, they are adjusted suitably.

points (ndarray) – The points to adjust

The adjusted points.

np.array

Computes the adjusted stroke width for a zoomed camera.

thickness (float) – The stroke width of a mobject.

The adjusted stroke width that reflects zooming in with the camera.

float

Fills the cairo context

ctx (Context) – The cairo context

vmobject (VMobject) – The VMobject

The camera object.

Camera

Applies a stroke to the VMobject in the cairo context.

ctx (Context) – The cairo context

vmobject (VMobject) – The VMobject

background (bool) – Whether or not to consider the background when applying this stroke width, by default False

The camera object with the stroke applied.

Camera

Caches the passed Pixel array into a Cairo Context

pixel_array (ndarray) – The pixel array to cache

ctx (Context) – The context to cache it into.

Capture mobjects by storing it in pixel_array.

This is a single-mobject version of capture_mobjects().

mobject (Mobject) – Mobject to capture.

kwargs (Any) – Keyword arguments to be passed to get_mobjects_to_display().

Capture mobjects by printing them on pixel_array.

This is the essential function that converts the contents of a Scene into an array, which is then converted to an image or video.

mobjects (Iterable[Mobject]) – Mobjects to capture.

kwargs – Keyword arguments to be passed to get_mobjects_to_display().

Notes

For a list of classes that can currently be rendered, see display_funcs().

Converts a pixel array from values that have floats in then to proper RGB values.

pixel_array (ndarray | list | tuple) – Pixel array to convert.

convert_from_floats (bool) – Whether or not to convert float values to ints, by default False

The new, converted pixel array.

np.array

Displays an ImageMobject by changing the pixel_array suitably.

image_mobject (AbstractImageMobject) – The imageMobject to display

pixel_array (ndarray) – The Pixel array to put the imagemobject in.

Displays multiple vmobjects that have the same color as the background.

cvmobjects (list) – List of Colored VMobjects

pixel_array (ndarray) – The pixel array.

The camera object.

Camera

Displays multiple image mobjects by modifying the passed pixel_array.

image_mobjects (list) – list of ImageMobjects

pixel_array (ndarray) – The pixel array to modify.

Displays multiple VMobjects in the cairo context, as long as they don’t have background colors.

vmobjects (list) – list of the VMobjects

pixel_array (ndarray) – The Pixel array to add the VMobjects to.

Displays multiple PMobjects by modifying the passed pixel array.

pmobjects (list) – List of PMobjects

pixel_array (ndarray) – The pixel array to modify.

Displays multiple VMobjects in the pixel_array

vmobjects (list) – list of VMobjects to display

pixel_array (ndarray) – The pixel array

Displays a PMobject by modifying the pixel array suitably.

TODO: Write a description for the rgbas argument.

pmobject (PMobject) – Point Cloud Mobject

points (list) – The points to display in the point cloud mobject

rgbas (ndarray)

thickness (float) – The thickness of each point of the PMobject

pixel_array (ndarray) – The pixel array to modify.

Displays a VMobject in the cairo context

vmobject (VMobject) – The Vectorized Mobject to display

ctx (Context) – The cairo context to use.

The camera object

Camera

Returns the background_colored_vmobject_displayer if it exists or makes one and returns it if not.

Object that displays VMobjects that have the same color as the background.

BackGroundColoredVMobjectDisplayer

Returns the cached cairo context of the passed pixel array if it exists, and None if it doesn’t.

pixel_array (ndarray) – The pixel array to check.

The cached cairo context.

cairo.Context

Returns the cairo context for a pixel array after caching it to self.pixel_array_to_cairo_context If that array has already been cached, it returns the cached version instead.

pixel_array (ndarray) – The Pixel array to get the cairo context of.

The cairo context of the pixel array.

cairo.Context

Returns the cartesian coordinates of each pixel.

The array of cartesian coordinates.

np.ndarray

Returns the RGBA array of the fill of the passed VMobject

vmobject (VMobject) – The VMobject

The RGBA Array of the fill of the VMobject

np.array

Returns an image from the passed pixel array, or from the current frame if the passed pixel array is none.

pixel_array (ndarray | list | tuple | None) – The pixel array from which to get an image, by default None

The PIL image of the array.

PIL.Image

Used to get the list of mobjects to display with the camera.

mobjects (Iterable[Mobject]) – The Mobjects

include_submobjects (bool) – Whether or not to include the submobjects of mobjects, by default True

excluded_mobjects (list | None) – Any mobjects to exclude, by default None

list of mobjects

list

Gets the RGBA array for the stroke of the passed VMobject.

vmobject (VMobject) – The VMobject

background (bool) – Whether or not to consider the background when getting the stroke RGBAs, by default False

The RGBA array of the stroke.

np.ndarray

Determine a list of vectors used to nudge two-dimensional pixel coordinates.

thickness (float)

np.array

Initialize the background. If self.background_image is the path of an image the image is set as background; else, the default background color fills the background.

Checks whether the passed mobject is in frame or not.

mobject (Mobject) – The mobject for which the checking needs to be done.

True if in frame, False otherwise.

bool

Makes a pixel array for the background by using coords_to_colors_func to determine each pixel’s color. Each input pixel’s color. Each input to coords_to_colors_func is an (x, y) pair in space (in ordinary space coordinates; not pixel coordinates), and each output is expected to be an RGBA array of 4 floats.

coords_to_colors_func (Callable[[ndarray], ndarray]) – The function whose input is an (x,y) pair of coordinates and whose return values must be the colors for that point

The pixel array which can then be passed to set_background.

np.array

Returns array of pixels that are on the screen from a given array of pixel_coordinates

pixel_coords (ndarray) – The pixel coords to check.

The pixel coords on screen.

np.array

Overlays a PIL image on the passed pixel array.

pixel_array (ndarray) – The Pixel array

image (<module 'PIL.Image' from '/home/docs/checkouts/readthedocs.org/user_builds/manimce/envs/stable/lib/python3.13/site-packages/PIL/Image.py'>) – The Image to overlay.

Overlays an RGBA array on top of the given Pixel array.

pixel_array (ndarray) – The original pixel array to modify.

new_array (ndarray) – The new pixel array to overlay.

Resets the camera’s pixel array to that of the background

The camera object after setting the pixel array.

Camera

This method resets the height and width of a single pixel to the passed new_height and new_width.

new_height (float) – The new height of the entire scene in pixels

new_width (float) – The new width of the entire scene in pixels

Changes frame_shape to match the aspect ratio of the pixels, where fixed_dimension determines whether frame_height or frame_width remains fixed while the other changes accordingly.

fixed_dimension (int) – If 0, height is scaled with respect to width else, width is scaled with respect to height.

Sets the background to the passed pixel_array after converting to valid RGB values.

pixel_array (ndarray | list | tuple) – The pixel array to set the background to.

convert_from_floats (bool) – Whether or not to convert floats values to proper RGB valid ones, by default False

Sets the background to a pixel array using coords_to_colors_func to determine each pixel’s color. Each input pixel’s color. Each input to coords_to_colors_func is an (x, y) pair in space (in ordinary space coordinates; not pixel coordinates), and each output is expected to be an RGBA array of 4 floats.

coords_to_colors_func (Callable[[ndarray], ndarray]) – The function whose input is an (x,y) pair of coordinates and whose return values must be the colors for that point

Sets the color of the cairo context

ctx (Context) – The cairo context

rgbas (ndarray) – The RGBA array with which to color the context.

vmobject (VMobject) – The VMobject with which to set the color.

The camera object

Camera

Sets a path for the cairo context with the vmobject passed

ctx (Context) – The cairo context

vmobject (VMobject) – The VMobject

Camera object after setting cairo_context_path

Camera

Sets the pixel array of the camera to the passed pixel array.

pixel_array (ndarray | list | tuple) – The pixel array to convert and then set as the camera’s pixel array.

convert_from_floats (bool) – Whether or not to convert float values to proper RGB values, by default False

Returns thickened coordinates for a passed array of pixel coords and a thickness to thicken by.

pixel_coords (ndarray) – Pixel coordinates

thickness (float) – Thickness

Array of thickened pixel coords.

np.array

Return the type of mobject, if it is a type that can be rendered.

If mobject is an instance of a class that inherits from a class that can be rendered, return the super class. For example, an instance of a Square is also an instance of VMobject, and these can be rendered. Therefore, type_or_raise(Square()) returns True.

mobject (Mobject) – The object to take the type of.

Notes

For a list of classes that can currently be rendered, see display_funcs().

The type of mobjects, if it can be rendered.

Type[Mobject]

TypeError – When mobject is not an instance of a class that can be rendered.

mobject (Mobject)


---

# mobjects.html

# Mobjects¶

frame

Special rectangles.

geometry

Various geometric Mobjects.

graph

Mobjects used to represent mathematical graphs (think graph theory, not plotting).

graphing

Coordinate systems and function graphing related mobjects.

logo

Utilities for Manim's logo and banner.

matrix

Mobjects representing matrices.

mobject

Base classes for objects that can be displayed.

svg

Mobjects related to SVG images.

table

Mobjects representing tables.

text

Mobjects used to display Text using Pango or LaTeX.

three_d

Three-dimensional mobjects.

types

Specialized mobject base classes.

utils

Utilities for working with mobjects.

value_tracker

Simple mobjects that can be used for storing (and updating) a value.

vector_field

Mobjects representing vector fields.


---

# manim.animation.movement.ComplexHomotopy.html

# ComplexHomotopy¶

Qualified name: manim.animation.movement.ComplexHomotopy

Bases: Homotopy

Complex Homotopy a function Cx[0, 1] to C

Methods

Attributes

run_time

complex_homotopy (Callable[[complex], float])

mobject (Mobject)

Complex Homotopy a function Cx[0, 1] to C

complex_homotopy (Callable[[complex], float])

mobject (Mobject)

None


---

# utilities_misc.html

# Utilities and other modules¶

## Module Index¶

bezier

Utility functions related to Bézier curves.

cli

The Manim CLI, and the available commands for manim.

color

Utilities for working with colors and predefined color constants.

commands

config_ops

Utilities that might be useful for configuration dictionaries.

constants

Constant definitions.

debug

Debugging utilities.

deprecation

Decorators for deprecating classes, functions and function parameters.

docbuild

Utilities for building the Manim documentation.

hashing

Utilities for scene caching.

images

Image manipulation utilities.

ipython_magic

Utilities for using Manim with IPython (in particular: Jupyter notebooks)

iterables

Operations on iterables.

paths

Functions determining transformation paths between sets of points.

rate_functions

A selection of rate functions, i.e., speed curves for animations.

simple_functions

A collection of simple functions.

sounds

Sound-related utility functions.

space_ops

Utility functions for two- and three-dimensional vectors.

testing

Utilities for Manim tests using pytest.

tex

Utilities for processing LaTeX templates.

tex_file_writing

Interface for writing, compiling, and converting .tex files.

tex_templates

A library of LaTeX templates.

typing

Custom type definitions used in Manim.


---

# manim.mobject.graph.LayoutFunction.html

# LayoutFunction¶

```python
from manim import *

class CustomLayoutExample(Scene):
    def construct(self):
        import numpy as np
        import networkx as nx

        # create custom layout
        def custom_layout(
            graph: nx.Graph,
            scale: float | tuple[float, float, float] = 2,
            n: int | None = None,
            *args: Any,
            **kwargs: Any,
        ):
            nodes = sorted(list(graph))
            height = len(nodes) // n
            return {
                node: (scale * np.array([
                    (i % n) - (n-1)/2,
                    -(i // n) + height/2,
                    0
                ])) for i, node in enumerate(graph)
            }

        # draw graph
        n = 4
        graph = Graph(
            [i for i in range(4 * 2 - 1)],
            [(0, 1), (0, 4), (1, 2), (1, 5), (2, 3), (2, 6), (4, 5), (5, 6)],
            labels=True,
            layout=custom_layout,
            layout_config={'n': n}
        )
        self.add(graph)
```

```python
from manim import *

class CircularLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],
            layout="circular",
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class KamadaKawaiLayout(Scene):
    def construct(self):
        from collections import defaultdict
        distances: dict[int, dict[int, float]] = defaultdict(dict)

        # set desired distances
        distances[1][2] = 1  # distance between vertices 1 and 2 is 1
        distances[2][3] = 1  # distance between vertices 2 and 3 is 1
        distances[3][4] = 2  # etc
        distances[4][5] = 3
        distances[5][6] = 5
        distances[6][1] = 8

        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)],
            layout="kamada_kawai",
            layout_config={"dist": distances},
            layout_scale=4,
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class PartiteLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],
            layout="partite",
            layout_config={"partitions": [[1,2],[3,4],[5,6]]},
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class PlanarLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],
            layout="planar",
            layout_scale=4,
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class RandomLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],
            layout="random",
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class ShellLayout(Scene):
    def construct(self):
        nlist = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
        graph = Graph(
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [(1, 2), (2, 3), (3, 1), (4, 1), (4, 2), (5, 2), (6, 2), (6, 3), (7, 3), (8, 3), (8, 1), (9, 1)],
            layout="shell",
            layout_config={"nlist": nlist},
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class SpectralLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],
            layout="spectral",
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class SpiralLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],
            layout="spiral",
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class SpringLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6],
            [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (5, 1), (1, 3), (3, 5)],
            layout="spring",
            labels=True
        )
        self.add(graph)
```

```python
from manim import *

class TreeLayout(Scene):
    def construct(self):
        graph = Graph(
            [1, 2, 3, 4, 5, 6, 7],
            [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)],
            layout="tree",
            layout_config={"root_vertex": 1},
            labels=True
        )
        self.add(graph)
```

Qualified name: manim.mobject.graph.LayoutFunction

Bases: Protocol

A protocol for automatic layout functions that compute a layout for a graph to be used in change_layout().

Note

The layout function must be a pure function, i.e., it must not modify the graph passed to it.

Examples

Here is an example that arranges nodes in an n x m grid in sorted order.

Example: CustomLayoutExample ¶

Several automatic layouts are provided by manim, and can be used by passing their name as the layout parameter to change_layout(). Alternatively, a custom layout function can be passed to change_layout() as the layout parameter. Such a function must adhere to the LayoutFunction protocol.

The LayoutFunction s provided by manim are illustrated below:

Circular Layout: places the vertices on a circle

Example: CircularLayout ¶

Kamada Kawai Layout: tries to place the vertices such that the given distances between them are respected

Example: KamadaKawaiLayout ¶

Partite Layout: places vertices into distinct partitions

Example: PartiteLayout ¶

Planar Layout: places vertices such that edges do not cross

Example: PlanarLayout ¶

Random Layout: randomly places vertices

Example: RandomLayout ¶

Shell Layout: places vertices in concentric circles

Example: ShellLayout ¶

Spectral Layout: places vertices using the eigenvectors of the graph Laplacian (clusters nodes which are an approximation of the ratio cut)

Example: SpectralLayout ¶

Sprial Layout: places vertices in a spiraling pattern

Example: SpiralLayout ¶

Spring Layout: places nodes according to the Fruchterman-Reingold force-directed algorithm (attempts to minimize edge length while maximizing node separation)

Example: SpringLayout ¶

Tree Layout: places vertices into a tree with a root node and branches (can only be used with legal trees)

Example: TreeLayout ¶

Methods


---

# manim.animation.indication.Wiggle.html

# Wiggle¶

```python
from manim import *

class ApplyingWaves(Scene):
    def construct(self):
        tex = Tex("Wiggle").scale(3)
        self.play(Wiggle(tex))
        self.wait()
```

Qualified name: manim.animation.indication.Wiggle

Bases: Animation

Wiggle a Mobject.

mobject (Mobject) – The mobject to wiggle.

scale_value (float) – The factor by which the mobject will be temporarily scaled.

rotation_angle (float) – The wiggle angle.

n_wiggles (int) – The number of wiggles.

scale_about_point (np.ndarray | None) – The point about which the mobject gets scaled.

rotate_about_point (np.ndarray | None) – The point around which the mobject gets rotated.

run_time (float) – The duration of the animation

Examples

Example: ApplyingWaves ¶

Methods

get_rotate_about_point

get_scale_about_point

interpolate_submobject

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

scale_value (float)

rotation_angle (float)

n_wiggles (int)

scale_about_point (ndarray | None)

rotate_about_point (ndarray | None)

run_time (float)

None


---

# manim.animation.transform.FadeTransformPieces.html

# FadeTransformPieces¶

```python
from manim import *

class FadeTransformSubmobjects(Scene):
    def construct(self):
        src = VGroup(Square(), Circle().shift(LEFT + UP))
        src.shift(3*LEFT + 2*UP)
        src_copy = src.copy().shift(4*DOWN)

        target = VGroup(Circle(), Triangle().shift(RIGHT + DOWN))
        target.shift(3*RIGHT + 2*UP)
        target_copy = target.copy().shift(4*DOWN)

        self.play(FadeIn(src), FadeIn(src_copy))
        self.play(
            FadeTransform(src, target),
            FadeTransformPieces(src_copy, target_copy)
        )
        self.play(*[FadeOut(mobj) for mobj in self.mobjects])
```

Qualified name: manim.animation.transform.FadeTransformPieces

Bases: FadeTransform

Fades submobjects of one mobject into submobjects of another one.

See also

FadeTransform

Examples

Example: FadeTransformSubmobjects ¶

Methods

begin

Initial setup for the animation.

ghost_to

Replaces the source submobjects by the target submobjects and sets the opacity to 0.

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

Initial setup for the animation.

The mobject to which this animation is bound is a group consisting of both the starting and the ending mobject. At the start, the ending mobject replaces the starting mobject (and is completely faded). In the end, it is set to be the other way around.

Replaces the source submobjects by the target submobjects and sets the opacity to 0.


---

# manim.constants.html

# constants¶

Constant definitions.

Module Attributes

ORIGIN

The center of the coordinate system.

UP

One unit step in the positive Y direction.

DOWN

One unit step in the negative Y direction.

RIGHT

One unit step in the positive X direction.

LEFT

One unit step in the negative X direction.

IN

One unit step in the negative Z direction.

OUT

One unit step in the positive Z direction.

UL

One step up plus one step left.

UR

One step up plus one step right.

DL

One step down plus one step left.

DR

One step down plus one step right.

Classes

CapStyleType

Collection of available cap styles.

LineJointType

Collection of available line joint types.

QualityDict

RendererType

An enumeration of all renderer types that can be assigned to the config.renderer attribute.


---

# manim.animation.transform.ScaleInPlace.html

# ScaleInPlace¶

```python
from manim import *

class ScaleInPlaceExample(Scene):
    def construct(self):
        self.play(ScaleInPlace(Text("Hello World!"), 2))
```

Qualified name: manim.animation.transform.ScaleInPlace

Bases: ApplyMethod

Animation that scales a mobject by a certain factor.

Examples

Example: ScaleInPlaceExample ¶

Methods

Attributes

path_arc

path_func

run_time

mobject (Mobject)

scale_factor (float)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

scale_factor (float)

None


---

# manim.utils.config_ops.html

# config_ops¶

Utilities that might be useful for configuration dictionaries.

Classes

DictAsObject

Functions

Creates a dict whose keyset is the union of all the input dictionaries. The value for each key is based on the first dict in the list with that key.

dicts later in the list have higher priority

When values are dictionaries, it is applied recursively

dicts (dict[Any, Any])

dict[Any, Any]

current_dict (dict[Any, Any])

others (dict[Any, Any])

None


---

# manim.animation.movement.Homotopy.html

# Homotopy¶

```python
from manim import *

class HomotopyExample(Scene):
    def construct(self):
        square = Square()

        def homotopy(x, y, z, t):
            if t <= 0.25:
                progress = t / 0.25
                return (x, y + progress * 0.2 * np.sin(x), z)
            else:
                wave_progress = (t - 0.25) / 0.75
                return (x, y + 0.2 * np.sin(x + 10 * wave_progress), z)

        self.play(Homotopy(homotopy, square, rate_func= linear, run_time=2))
```

Qualified name: manim.animation.movement.Homotopy

Bases: Animation

A Homotopy.

This is an animation transforming the points of a mobject according to the specified transformation function. With the parameter \(t\) moving from 0 to 1 throughout the animation and \((x, y, z)\) describing the coordinates of the point of a mobject, the function passed to the homotopy keyword argument should transform the tuple \((x, y, z, t)\) to \((x', y', z')\), the coordinates the original point is transformed to at time \(t\).

homotopy (Callable[[float, float, float, float], tuple[float, float, float]]) – A function mapping \((x, y, z, t)\) to \((x', y', z')\).

mobject (Mobject) – The mobject transformed under the given homotopy.

run_time (float) – The run time of the animation.

apply_function_kwargs (dict[str, Any] | None) – Keyword arguments propagated to Mobject.apply_function().

kwargs – Further keyword arguments passed to the parent class.

Examples

Example: HomotopyExample ¶

Methods

function_at_time_t

interpolate_submobject

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

homotopy (Callable[[float, float, float, float], tuple[float, float, float]])

mobject (Mobject)

run_time (float)

apply_function_kwargs (dict[str, Any] | None)

None


---

# manim.animation.transform.ApplyMethod.html

# ApplyMethod¶

Qualified name: manim.animation.transform.ApplyMethod

Bases: Transform

Animates a mobject by applying a method.

Note that only the method needs to be passed to this animation, it is not required to pass the corresponding mobject. Furthermore, this animation class only works if the method returns the modified mobject.

method (Callable) – The method that will be applied in the animation.

args – Any positional arguments to be passed when applying the method.

kwargs – Any keyword arguments passed to Transform.

Methods

check_validity_of_input

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

method (Callable)

None


---

# manim.mobject.value_tracker.ValueTracker.html

# ValueTracker¶

```python
from manim import *

class ValueTrackerExample(Scene):
    def construct(self):
        number_line = NumberLine()
        pointer = Vector(DOWN)
        label = MathTex("x").add_updater(lambda m: m.next_to(pointer, UP))

        tracker = ValueTracker(0)
        pointer.add_updater(
            lambda m: m.next_to(
                        number_line.n2p(tracker.get_value()),
                        UP
                    )
        )
        self.add(number_line, pointer,label)
        tracker += 1.5
        self.wait(1)
        tracker -= 4
        self.wait(0.5)
        self.play(tracker.animate.set_value(5))
        self.wait(0.5)
        self.play(tracker.animate.set_value(3))
        self.play(tracker.animate.increment_value(-2))
        self.wait(0.5)
```

```python
from manim import *

class ValueTrackerExample(Scene):
    def construct(self):
        tracker = ValueTracker(0)
        label = Dot(radius=3).add_updater(lambda x : x.set_x(tracker.get_value()))
        self.add(label)
        self.add(tracker)
        tracker.add_updater(lambda mobject, dt: mobject.increment_value(dt))
        self.wait(2)
```

Qualified name: manim.mobject.value\_tracker.ValueTracker

Bases: Mobject

A mobject that can be used for tracking (real-valued) parameters. Useful for animating parameter changes.

Not meant to be displayed. Instead the position encodes some number, often one which another animation or continual_animation uses for its update function, and by treating it as a mobject it can still be animated and manipulated just like anything else.

This value changes continuously when animated using the animate syntax.

Examples

Example: ValueTrackerExample ¶

Note

You can also link ValueTrackers to updaters. In this case, you have to make sure that the ValueTracker is added to the scene by add

Example: ValueTrackerExample ¶

Methods

get_value

Get the current value of this ValueTracker.

increment_value

Increments (adds) a scalar value to the ValueTracker

interpolate

Turns self into an interpolation between mobject1 and mobject2.

set_value

Sets a new scalar value to the ValueTracker

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

Get the current value of this ValueTracker.

float

Increments (adds) a scalar value to the ValueTracker

d_value (float)

Turns self into an interpolation between mobject1 and mobject2.

Sets a new scalar value to the ValueTracker

value (float)


---

# manim.animation.creation.Uncreate.html

# Uncreate¶

```python
from manim import *

class ShowUncreate(Scene):
    def construct(self):
        self.play(Uncreate(Square()))
```

Qualified name: manim.animation.creation.Uncreate

Bases: Create

Like Create but in reverse.

Examples

Example: ShowUncreate ¶

See also

Create

Methods

Attributes

run_time

mobject (VMobject | OpenGLVMobject)

reverse_rate_function (bool)

remover (bool)

Initialize self. See help(type(self)) for accurate signature.

mobject (VMobject | OpenGLVMobject)

reverse_rate_function (bool)

remover (bool)

None


---

# manim.animation.creation.RemoveTextLetterByLetter.html

# RemoveTextLetterByLetter¶

Qualified name: manim.animation.creation.RemoveTextLetterByLetter

Bases: AddTextLetterByLetter

Remove a Text letter by letter from the scene.

time_per_char (float) – Frequency of appearance of the letters.

tip:: (..) – This is currently only possible for class:~.Text and not for class:~.MathTex

text (Text)

suspend_mobject_updating (bool)

int_func (Callable[[np.ndarray], np.ndarray])

rate_func (Callable[[float], float])

run_time (float | None)

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

text (Text)

suspend_mobject_updating (bool)

int_func (Callable[[np.ndarray], np.ndarray])

rate_func (Callable[[float], float])

time_per_char (float)

run_time (float | None)

None


---

# manim.animation.fading.FadeOut.html

# FadeOut¶

```python
from manim import *

class FadeInExample(Scene):
    def construct(self):
        dot = Dot(UP * 2 + LEFT)
        self.add(dot)
        tex = Tex(
            "FadeOut with ", "shift ", r" or target\_position", " and scale"
        ).scale(1)
        animations = [
            FadeOut(tex[0]),
            FadeOut(tex[1], shift=DOWN),
            FadeOut(tex[2], target_position=dot),
            FadeOut(tex[3], scale=0.5),
        ]
        self.play(AnimationGroup(*animations, lag_ratio=0.5))
```

Qualified name: manim.animation.fading.FadeOut

Bases: _Fade

Fade out Mobject s.

mobjects (Mobject) – The mobjects to be faded out.

shift – The vector by which the mobject shifts while being faded out.

target_position – The position to which the mobject moves while being faded out. In case another mobject is given as target position, its center is used.

scale – The factor by which the mobject is scaled while being faded out.

Examples

Example: FadeInExample ¶

Methods

clean_up_from_scene

Clean up the Scene after finishing the animation.

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobjects (Mobject)

None

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None


---

# manim.utils.tex_file_writing.html

# tex_file_writing¶

Interface for writing, compiling, and converting .tex files.

See also

mobject.svg.tex_mobject

Functions

Compiles a tex_file into a .dvi or a .xdv or a .pdf

tex_file (Path) – File name of TeX file to be typeset.

tex_compiler (str) – String containing the compiler to be used, e.g. pdflatex or lualatex

output_format (str) – String containing the output format generated by the compiler, e.g. .dvi or .pdf

Path to generated output file in desired format (DVI, XDV or PDF).

Path

Converts a .dvi, .xdv, or .pdf file into an svg using dvisvgm.

dvi_file (Path) – File name of the input file to be converted.

extension (str) – String containing the file extension and thus indicating the file type, e.g. .dvi or .pdf

page (int) – Page to be converted if input file is multi-page.

Path to generated SVG file.

Path

Deletes every file that does not have a suffix in (".svg", ".tex", *additional_endings)

additional_endings (Iterable[str]) – Additional endings to whitelist

None

Takes a tex expression (and an optional tex environment), and returns a fully formed tex file ready for compilation.

expression (str) – String containing the TeX expression to be rendered, e.g. \\sqrt{2} or foo

environment (str | None) – The string containing the environment in which the expression should be typeset, e.g. align*

tex_template (TexTemplate | None) – Template class used to typesetting. If not set, use default template set via config[“tex_template”]

Path to generated TeX file

Path

matching (Match[str])

Generator[str]

matching (Match[str])

Generator[str]

Prepares the TeX compilation command, i.e. the TeX compiler name and all necessary CLI flags.

tex_compiler (str) – String containing the compiler to be used, e.g. pdflatex or lualatex

output_format (str) – String containing the output format generated by the compiler, e.g. .dvi or .pdf

tex_file (Path) – File name of TeX file to be typeset.

tex_dir (Path) – Path to the directory where compiler output will be stored.

Compilation command according to given parameters

list[str]

log_file (Path)

tex_compiler (str)

tex_file (Path)

None

tex_compilation_log (Sequence[str])

error_start_index (int)

tex_source (Sequence[str])

None

expression (Any)

str

Takes a tex expression and returns the svg version of the compiled tex

expression (str) – String containing the TeX expression to be rendered, e.g. \\sqrt{2} or foo

environment (str | None) – The string containing the environment in which the expression should be typeset, e.g. align*

tex_template (TexTemplate | None) – Template class used to typesetting. If not set, use default template set via config[“tex_template”]

Path to generated SVG file.

Path


---

# scenes.html

# Scenes¶

moving_camera_scene

A scene whose camera can be moved around.

section

building blocks of segmented video API

scene

Basic canvas for animations.

scene_file_writer

The interface between scenes and ffmpeg.

three_d_scene

A scene suitable for rendering three-dimensional objects and animations.

vector_space_scene

A scene suitable for vector spaces.

zoomed_scene

A scene supporting zooming in on a specified section.


---

# manim.animation.creation.SpiralIn.html

# SpiralIn¶

```python
from manim import *

class SpiralInExample(Scene):
    def construct(self):
        pi = MathTex(r"\pi").scale(7)
        pi.shift(2.25 * LEFT + 1.5 * UP)
        circle = Circle(color=GREEN_C, fill_opacity=1).shift(LEFT)
        square = Square(color=BLUE_D, fill_opacity=1).shift(UP)
        shapes = VGroup(pi, circle, square)
        self.play(SpiralIn(shapes))
```

Qualified name: manim.animation.creation.SpiralIn

Bases: Animation

Create the Mobject with sub-Mobjects flying in on spiral trajectories.

shapes (Mobject) – The Mobject on which to be operated.

scale_factor (float) – The factor used for scaling the effect.

fade_in_fraction – Fractional duration of initial fade-in of sub-Mobjects as they fly inward.

Examples

Example: SpiralInExample ¶

Methods

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

shapes (Mobject)

scale_factor (float)

None

Interpolates the mobject of the Animation based on alpha value.

alpha (float) – A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

None


---

# manim.mobject.table.DecimalTable.html

# DecimalTable¶

```python
from manim import *

class DecimalTableExample(Scene):
    def construct(self):
        x_vals = [-2,-1,0,1,2]
        y_vals = np.exp(x_vals)
        t0 = DecimalTable(
            [x_vals, y_vals],
            row_labels=[MathTex("x"), MathTex("f(x)=e^{x}")],
            h_buff=1,
            element_to_mobject_config={"num_decimal_places": 2})
        self.add(t0)
```

Qualified name: manim.mobject.table.DecimalTable

Bases: Table

A specialized Table mobject for use with DecimalNumber to display decimal entries.

Examples

Example: DecimalTableExample ¶

Special case of Table with element_to_mobject set to DecimalNumber. By default, num_decimal_places is set to 1. Will round/truncate the decimal places based on the provided element_to_mobject_config.

table (Iterable[Iterable[float | str]]) – A 2D array, or a list of lists. Content of the table must be valid input for DecimalNumber.

element_to_mobject (Callable[[float | str], VMobject]) – The Mobject class applied to the table entries. Set as DecimalNumber.

element_to_mobject_config (dict) – Element to mobject config, here set as {“num_decimal_places”: 1}.

kwargs – Additional arguments to be passed to Table.

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Special case of Table with element_to_mobject set to DecimalNumber. By default, num_decimal_places is set to 1. Will round/truncate the decimal places based on the provided element_to_mobject_config.

table (Iterable[Iterable[float | str]]) – A 2D array, or a list of lists. Content of the table must be valid input for DecimalNumber.

element_to_mobject (Callable[[float | str], VMobject]) – The Mobject class applied to the table entries. Set as DecimalNumber.

element_to_mobject_config (dict) – Element to mobject config, here set as {“num_decimal_places”: 1}.

kwargs – Additional arguments to be passed to Table.


---

# manim.camera.camera.BackgroundColoredVMobjectDisplayer.html

# BackgroundColoredVMobjectDisplayer¶

Qualified name: manim.camera.camera.BackgroundColoredVMobjectDisplayer

Bases: object

Auxiliary class that handles displaying vectorized mobjects with a set background image.

camera (Camera) – Camera object to use.

Methods

display

Displays the colored VMobjects.

get_background_array

Gets the background array that has the passed file_name.

reset_pixel_array

resize_background_array

Resizes the pixel array representing the background.

resize_background_array_to_match

Resizes the background array to match the passed pixel array.

Displays the colored VMobjects.

*cvmobjects (VMobject) – The VMobjects

The pixel array with the cvmobjects displayed.

np.array

Gets the background array that has the passed file_name.

image (Image | Path | str) – The background image or its file name.

The pixel array of the image.

np.ndarray

Resizes the pixel array representing the background.

background_array (ndarray) – The pixel

new_width (float) – The new width of the background

new_height (float) – The new height of the background

mode (str) – The PIL image mode, by default “RGBA”

The numpy pixel array of the resized background.

np.array

Resizes the background array to match the passed pixel array.

background_array (ndarray) – The prospective pixel array.

pixel_array (ndarray) – The pixel array whose width and height should be matched.

The resized background array.

np.array


---

# manim.animation.transform.ClockwiseTransform.html

# ClockwiseTransform¶

```python
from manim import *

class ClockwiseExample(Scene):
    def construct(self):
        dl, dr = Dot(), Dot()
        sl, sr = Square(), Square()

        VGroup(dl, sl).arrange(DOWN).shift(2*LEFT)
        VGroup(dr, sr).arrange(DOWN).shift(2*RIGHT)

        self.add(dl, dr)
        self.wait()
        self.play(
            ClockwiseTransform(dl, sl),
            Transform(dr, sr)
        )
        self.wait()
```

Qualified name: manim.animation.transform.ClockwiseTransform

Bases: Transform

Transforms the points of a mobject along a clockwise oriented arc.

See also

Transform, CounterclockwiseTransform

Examples

Example: ClockwiseExample ¶

Methods

Attributes

path_arc

path_func

run_time

mobject (Mobject)

target_mobject (Mobject)

path_arc (float)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

target_mobject (Mobject)

path_arc (float)

None


---

# manim.scene.scene.Scene.html

# Scene¶

```python
class MyScene(Scene):
    def construct(self):
        self.play(Write(Text("Hello World!")))
```

```python
from manim import *

class SoundExample(Scene):
    # Source of sound under Creative Commons 0 License. https://freesound.org/people/Druminfected/sounds/250551/
    def construct(self):
        dot = Dot().set_color(GREEN)
        self.add_sound("click.wav")
        self.add(dot)
        self.wait()
        self.add_sound("click.wav")
        dot.set_color(BLUE)
        self.wait()
        self.add_sound("click.wav")
        dot.set_color(RED)
        self.wait()
```

```python
class SubcaptionExample(Scene):
    def construct(self):
        square = Square()
        circle = Circle()

        # first option: via the add_subcaption method
        self.add_subcaption("Hello square!", duration=1)
        self.play(Create(square))

        # second option: within the call to Scene.play
        self.play(
            Transform(square, circle), subcaption="The square transforms."
        )
```

```python
class MyScene(Scene):
    def construct(self):
        self.play(Write(Text("Hello World!")))
```

Qualified name: manim.scene.scene.Scene

Bases: object

A Scene is the canvas of your animation.

The primary role of Scene is to provide the user with tools to manage mobjects and animations. Generally speaking, a manim script consists of a class that derives from Scene whose Scene.construct() method is overridden by the user’s code.

Mobjects are displayed on screen by calling Scene.add() and removed from screen by calling Scene.remove(). All mobjects currently on screen are kept in Scene.mobjects. Animations are played by calling Scene.play().

A Scene is rendered internally by calling Scene.render(). This in turn calls Scene.setup(), Scene.construct(), and Scene.tear_down(), in that order.

It is not recommended to override the __init__ method in user Scenes. For code that should be ran before a Scene is rendered, use Scene.setup() instead.

Examples

Override the Scene.construct() method with your code.

Methods

add

Mobjects will be displayed, from background to foreground in the order with which they are added.

add_foreground_mobject

Adds a single mobject to the foreground, and internally to the list foreground_mobjects, and mobjects.

add_foreground_mobjects

Adds mobjects to the foreground, and internally to the list foreground_mobjects, and mobjects.

add_mobjects_from_animations

add_sound

This method is used to add a sound to the animation.

add_subcaption

Adds an entry in the corresponding subcaption file at the current time stamp.

add_updater

Add an update function to the scene.

begin_animations

Start the animations of the scene.

bring_to_back

Removes the mobject from the scene and adds them to the back of the scene.

bring_to_front

Adds the passed mobjects to the scene again, pushing them to he front of the scene.

check_interactive_embed_is_valid

clear

Removes all mobjects present in self.mobjects and self.foreground_mobjects from the scene.

compile_animation_data

Given a list of animations, compile the corresponding static and moving mobjects, and gather the animation durations.

compile_animations

Creates _MethodAnimations from any _AnimationBuilders and updates animation kwargs with kwargs passed to play().

construct

Add content to the Scene.

embed

get_attrs

Gets attributes of a scene given the attribute's identifier/name.

get_mobject_family_members

Returns list of family-members of all mobjects in scene.

get_moving_and_static_mobjects

get_moving_mobjects

Gets all moving mobjects in the passed animation(s).

get_restructured_mobject_list

Given a list of mobjects and a list of mobjects to be removed, this filters out the removable mobjects from the list of mobjects.

get_run_time

Gets the total run time for a list of animations.

get_time_progression

You will hardly use this when making your own animations.

get_top_level_mobjects

Returns all mobjects which are not submobjects.

interact

interactive_embed

Like embed(), but allows for screen interaction.

is_current_animation_frozen_frame

Returns whether the current animation produces a static frame (generally a Wait).

mouse_drag_orbit_controls

mouse_scroll_orbit_controls

next_section

Create separation here; the last section gets finished and a new one gets created.

on_key_press

on_key_release

on_mouse_drag

on_mouse_motion

on_mouse_press

on_mouse_scroll

pause

Pauses the scene (i.e., displays a frozen frame).

play

Plays an animation in this scene.

play_internal

This method is used to prep the animations for rendering, apply the arguments and parameters required to them, render them, and write them to the video file.

remove

Removes mobjects in the passed list of mobjects from the scene and the foreground, by removing them from "mobjects" and "foreground_mobjects"

remove_foreground_mobject

Removes a single mobject from the foreground, and internally from the list foreground_mobjects.

remove_foreground_mobjects

Removes mobjects from the foreground, and internally from the list foreground_mobjects.

remove_updater

Remove an update function from the scene.

render

Renders this Scene.

replace

Replace one mobject in the scene with another, preserving draw order.

restructure_mobjects

tl:wr

set_key_function

setup

This is meant to be implemented by any scenes which are commonly subclassed, and have some common setup involved before the construct method is called.

should_update_mobjects

Returns True if the mobjects of this scene should be updated.

tear_down

This is meant to be implemented by any scenes which are commonly subclassed, and have some common method to be invoked before the scene ends.

update_meshes

update_mobjects

Begins updating all mobjects in the Scene.

update_self

Run all scene updater functions.

update_to_time

validate_run_time

wait

Plays a "no operation" animation.

wait_until

Wait until a condition is satisfied, up to a given maximum duration.

Attributes

camera

time

The time since the start of the scene.

renderer (CairoRenderer | OpenGLRenderer | None)

camera_class (type[Camera])

always_update_mobjects (bool)

random_seed (int | None)

skip_animations (bool)

You will hardly use this when making your own animations. This method is for Manim’s internal use.

Uses get_time_progression() to obtain a CommandLine ProgressBar whose fill_time is dependent on the qualities of the passed Animation,

animations (list[Animation]) – The list of animations to get the time progression for.

duration (float) – duration of wait time

The CommandLine Progress Bar.

time_progression

Mobjects will be displayed, from background to foreground in the order with which they are added.

*mobjects (Mobject) – Mobjects to add.

The same scene after adding the Mobjects in.

Scene

Adds a single mobject to the foreground, and internally to the list foreground_mobjects, and mobjects.

mobject (Mobject) – The Mobject to add to the foreground.

The Scene, with the foreground mobject added.

Scene

Adds mobjects to the foreground, and internally to the list foreground_mobjects, and mobjects.

*mobjects (Mobject) – The Mobjects to add to the foreground.

The Scene, with the foreground mobjects added.

Scene

This method is used to add a sound to the animation.

sound_file (str) – The path to the sound file.

time_offset (float) – The offset in the sound file after which the sound can be played.

gain (float | None) – Amplification of the sound.

Examples

Example: SoundExample ¶

Download the resource for the previous example here .

Adds an entry in the corresponding subcaption file at the current time stamp.

The current time stamp is obtained from Scene.time.

content (str) – The subcaption content.

duration (float) – The duration (in seconds) for which the subcaption is shown.

offset (float) – This offset (in seconds) is added to the starting time stamp of the subcaption.

None

Examples

This example illustrates both possibilities for adding subcaptions to Manimations:

Add an update function to the scene.

The scene updater functions are run every frame, and they are the last type of updaters to run.

Warning

When using the Cairo renderer, scene updaters that modify mobjects are not detected in the same way that mobject updaters are. To be more concrete, a mobject only modified via a scene updater will not necessarily be added to the list of moving mobjects and thus might not be updated every frame.

TL;DR: Use mobject updaters to update mobjects.

func (Callable[[float], None]) – The updater function. It takes a float, which is the time difference since the last update (usually equal to the frame rate).

None

See also

Scene.remove_updater(), Scene.update_self()

Start the animations of the scene.

None

Removes the mobject from the scene and adds them to the back of the scene.

*mobjects (Mobject) – The mobject(s) to push to the back of the scene.

The Scene, with the mobjects pushed to the back of the scene.

Scene

Adds the passed mobjects to the scene again, pushing them to he front of the scene.

*mobjects (Mobject) – The mobject(s) to bring to the front of the scene.

The Scene, with the mobjects brought to the front of the scene.

Scene

Removes all mobjects present in self.mobjects and self.foreground_mobjects from the scene.

The Scene, with all of its mobjects in self.mobjects and self.foreground_mobjects removed.

Scene

Given a list of animations, compile the corresponding static and moving mobjects, and gather the animation durations.

This also begins the animations.

animations (Animation | Mobject | _AnimationBuilder) – Animation or mobject with mobject method and params

play_kwargs – Named parameters affecting what was passed in animations, e.g. run_time, lag_ratio and so on.

None if there is nothing to play, or self otherwise.

self, None

Creates _MethodAnimations from any _AnimationBuilders and updates animation kwargs with kwargs passed to play().

*args (Animation | Mobject | _AnimationBuilder) – Animations to be played.

**kwargs – Configuration for the call to play().

Animations to be played.

Tuple[Animation]

Add content to the Scene.

From within Scene.construct(), display mobjects on screen by calling Scene.add() and remove them from screen by calling Scene.remove(). All mobjects currently on screen are kept in Scene.mobjects. Play animations by calling Scene.play().

Notes

Initialization code should go in Scene.setup(). Termination code should go in Scene.tear_down().

Examples

A typical manim script includes a class derived from Scene with an overridden Scene.construct() method:

See also

Scene.setup(), Scene.render(), Scene.tear_down()

Gets attributes of a scene given the attribute’s identifier/name.

*keys (str) – Name(s) of the argument(s) to return the attribute of.

List of attributes of the passed identifiers.

list

Returns list of family-members of all mobjects in scene. If a Circle() and a VGroup(Rectangle(),Triangle()) were added, it returns not only the Circle(), Rectangle() and Triangle(), but also the VGroup() object.

List of mobject family members.

list

Gets all moving mobjects in the passed animation(s).

*animations (Animation) – The animations to check for moving mobjects.

The list of mobjects that could be moving in the Animation(s)

list

Given a list of mobjects and a list of mobjects to be removed, this filters out the removable mobjects from the list of mobjects.

mobjects (list) – The Mobjects to check.

to_remove (list) – The list of mobjects to remove.

The list of mobjects with the mobjects to remove removed.

list

Gets the total run time for a list of animations.

animations (list[Animation]) – A list of the animations whose total run_time is to be calculated.

The total run_time of all of the animations in the list.

float

You will hardly use this when making your own animations. This method is for Manim’s internal use.

Returns a CommandLine ProgressBar whose fill_time is dependent on the run_time of an animation, the iterations to perform in that animation and a bool saying whether or not to consider the skipped animations.

run_time (float) – The run_time of the animation.

n_iterations (int | None) – The number of iterations in the animation.

override_skip_animations (bool) – Whether or not to show skipped animations in the progress bar.

The CommandLine Progress Bar.

time_progression

Returns all mobjects which are not submobjects.

List of top level mobjects.

list

Like embed(), but allows for screen interaction.

Returns whether the current animation produces a static frame (generally a Wait).

bool

Create separation here; the last section gets finished and a new one gets created. skip_animations skips the rendering of all animations in this section. Refer to the documentation on how to use sections.

name (str)

section_type (str)

skip_animations (bool)

None

Pauses the scene (i.e., displays a frozen frame).

This is an alias for wait() with frozen_frame set to True.

duration (float) – The duration of the pause.

See also

wait(), Wait

Plays an animation in this scene.

args (Animation | Mobject | _AnimationBuilder) – Animations to be played.

subcaption – The content of the external subcaption that should be added during the animation.

subcaption_duration – The duration for which the specified subcaption is added. If None (the default), the run time of the animation is taken.

subcaption_offset – An offset (in seconds) for the start time of the added subcaption.

kwargs – All other keywords are passed to the renderer.

This method is used to prep the animations for rendering, apply the arguments and parameters required to them, render them, and write them to the video file.

skip_rendering (bool) – Whether the rendering should be skipped, by default False

Removes mobjects in the passed list of mobjects from the scene and the foreground, by removing them from “mobjects” and “foreground_mobjects”

*mobjects (Mobject) – The mobjects to remove.

Removes a single mobject from the foreground, and internally from the list foreground_mobjects.

mobject (Mobject) – The mobject to remove from the foreground.

The Scene, with the foreground mobject removed.

Scene

Removes mobjects from the foreground, and internally from the list foreground_mobjects.

*to_remove (Mobject) – The mobject(s) to remove from the foreground.

The Scene, with the foreground mobjects removed.

Scene

Remove an update function from the scene.

func (Callable[[float], None]) – The updater function to be removed.

None

See also

Scene.add_updater(), Scene.update_self()

Renders this Scene.

preview (bool) – If true, opens scene in a file viewer.

Replace one mobject in the scene with another, preserving draw order.

If old_mobject is a submobject of some other Mobject (e.g. a Group), the new_mobject will replace it inside the group, without otherwise changing the parent mobject.

old_mobject (Mobject) – The mobject to be replaced. Must be present in the scene.

new_mobject (Mobject) – A mobject which must not already be in the scene.

None

If your scene has a Group(), and you removed a mobject from the Group, this dissolves the group and puts the rest of the mobjects directly in self.mobjects or self.foreground_mobjects.

In cases where the scene contains a group, e.g. Group(m1, m2, m3), but one of its submobjects is removed, e.g. scene.remove(m1), the list of mobjects will be edited to contain other submobjects, but not m1, e.g. it will now insert m2 and m3 to where the group once was.

to_remove (Sequence[Mobject]) – The Mobject to remove.

mobject_list_name (str) – The list of mobjects (“mobjects”, “foreground_mobjects” etc) to remove from.

extract_families (bool) – Whether the mobject’s families should be recursively extracted.

The Scene mobject with restructured Mobjects.

Scene

This is meant to be implemented by any scenes which are commonly subclassed, and have some common setup involved before the construct method is called.

Returns True if the mobjects of this scene should be updated.

In particular, this checks whether

the always_update_mobjects attribute of Scene is set to True,

the Scene itself has time-based updaters attached,

any mobject in this Scene has time-based updaters attached.

This is only called when a single Wait animation is played.

bool

This is meant to be implemented by any scenes which are commonly subclassed, and have some common method to be invoked before the scene ends.

The time since the start of the scene.

Begins updating all mobjects in the Scene.

dt (float) – Change in time between updates. Defaults (mostly) to 1/frames_per_second

Run all scene updater functions.

Among all types of update functions (mobject updaters, mesh updaters, scene updaters), scene update functions are called last.

dt (float) – Scene time since last update.

See also

Scene.add_updater(), Scene.remove_updater()

Plays a “no operation” animation.

duration (float) – The run time of the animation.

stop_condition (Callable[[], bool] | None) – A function without positional arguments that is evaluated every time a frame is rendered. The animation only stops when the return value of the function is truthy, or when the time specified in duration passes.

frozen_frame (bool | None) – If True, updater functions are not evaluated, and the animation outputs a frozen frame. If False, updater functions are called and frames are rendered as usual. If None (the default), the scene tries to determine whether or not the frame is frozen on its own.

See also

Wait, should_mobjects_update()

Wait until a condition is satisfied, up to a given maximum duration.

stop_condition (Callable[[], bool]) – A function with no arguments that determines whether or not the scene should keep waiting.

max_time (float) – The maximum wait time in seconds.


---

# manim.animation.transform.Swap.html

# Swap¶

Qualified name: manim.animation.transform.Swap

Bases: CyclicReplace

Methods

Attributes

path_arc

path_func

run_time

mobjects (Mobject)

path_arc (float)

Initialize self. See help(type(self)) for accurate signature.

mobjects (Mobject)

path_arc (float)

None


---

# manim.mobject.frame.FullScreenRectangle.html

# FullScreenRectangle¶

Qualified name: manim.mobject.frame.FullScreenRectangle

Bases: ScreenRectangle

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

aspect_ratio

The aspect ratio.

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.


---

# manim.utils.testing.html

# testing¶

Utilities for Manim tests using pytest.

For more information about Manim testing, see:

Manim Development Process, specifically the Tests bullet point under Polishing Changes and Submitting a Pull Request

Adding Tests

_frames_testers

_show_diff

_test_class_makers


---

# manim.camera.multi_camera.MultiCamera.html

# MultiCamera¶

Qualified name: manim.camera.multi\_camera.MultiCamera

Bases: MovingCamera

Camera Object that allows for multiple perspectives.

Initialises the MultiCamera

image_mobjects_from_cameras (ImageMobject | None)

kwargs – Any valid keyword arguments of MovingCamera.

Methods

add_image_mobject_from_camera

Adds an ImageMobject that's been obtained from the camera into the list self.image_mobject_from_cameras

capture_mobjects

Capture mobjects by printing them on pixel_array.

get_mobjects_indicating_movement

Returns all mobjects whose movement implies that the camera should think of all other mobjects on the screen as moving

reset

Resets the MultiCamera.

update_sub_cameras

Reshape sub_camera pixel_arrays

Attributes

background_color

background_opacity

frame_center

Returns the centerpoint of the frame in cartesian coordinates.

frame_height

Returns the height of the frame.

frame_width

Returns the width of the frame

Adds an ImageMobject that’s been obtained from the camera into the list self.image_mobject_from_cameras

image_mobject_from_camera (ImageMobject) – The ImageMobject to add to self.image_mobject_from_cameras

Capture mobjects by printing them on pixel_array.

This is the essential function that converts the contents of a Scene into an array, which is then converted to an image or video.

mobjects – Mobjects to capture.

kwargs – Keyword arguments to be passed to get_mobjects_to_display().

Notes

For a list of classes that can currently be rendered, see display_funcs().

Returns all mobjects whose movement implies that the camera should think of all other mobjects on the screen as moving

list

Resets the MultiCamera.

The reset MultiCamera

MultiCamera

Reshape sub_camera pixel_arrays


---

# manim.animation.indication.ShowPassingFlashWithThinningStrokeWidth.html

# ShowPassingFlashWithThinningStrokeWidth¶

Qualified name: manim.animation.indication.ShowPassingFlashWithThinningStrokeWidth

Bases: AnimationGroup

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.


---

# manim.mobject.vector_field.html

# vector_field¶

Mobjects representing vector fields.

Classes

ArrowVectorField

A VectorField represented by a set of change vectors.

StreamLines

StreamLines represent the flow of a VectorField using the trace of moving agents.

VectorField

A vector field.


---

# manim.mobject.frame.ScreenRectangle.html

# ScreenRectangle¶

Qualified name: manim.mobject.frame.ScreenRectangle

Bases: Rectangle

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

aspect_ratio

The aspect ratio.

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

The aspect ratio.

When set, the width is stretched to accommodate the new aspect ratio.


---

# manim.scene.scene_file_writer.SceneFileWriter.html

# SceneFileWriter¶

```python
MEDIA_DIR
    |--Tex
    |--texts
    |--videos
    |--<name_of_file_containing_scene>
        |--<height_in_pixels_of_video>p<frame_rate>
            |--<scene_name>.mp4
```

Qualified name: manim.scene.scene\_file\_writer.SceneFileWriter

Bases: object

SceneFileWriter is the object that actually writes the animations played, into video files, using FFMPEG. This is mostly for Manim’s internal use. You will rarely, if ever, have to use the methods for this class, unless tinkering with the very fabric of Manim’s reality.

renderer (CairoRenderer | OpenGLRenderer)

scene_name (StrPath)

kwargs (Any)

used to segment scene

list of Section

where are section videos stored

pathlib.Path

name of movie without extension and basis for section video names

str

Whether or not to write the animations into a video file.

The file-type extension of the outputted video.

List of all the partial-movie files.

Methods

add_audio_segment

This method adds an audio segment from an AudioSegment type object and suitable parameters.

add_partial_movie_file

Adds a new partial movie file path to scene.partial_movie_files and current section from a hash.

add_sound

This method adds an audio segment from a sound file.

begin_animation

Used internally by manim to stream the animation to FFMPEG for displaying or writing to a file.

clean_cache

Will clean the cache by removing the oldest partial_movie_files.

close_partial_movie_stream

Close the currently opened video container.

combine_files

combine_to_movie

Used internally by Manim to combine the separate partial movie files that make up a Scene into a single video file for that Scene.

combine_to_section_videos

Concatenate partial movie files for each section.

create_audio_segment

Creates an empty, silent, Audio Segment.

encode_and_write_frame

For internal use only: takes a given frame in np.ndarray format and write it to the stream

end_animation

Internally used by Manim to stop streaming to FFMPEG gracefully.

finish

Finishes writing to the FFMPEG buffer or writing images to output directory.

finish_last_section

Delete current section if it is empty.

flush_cache_directory

Delete all the cached partial movie files

get_resolution_directory

Get the name of the resolution directory directly containing the video file.

init_audio

Preps the writer for adding audio to the movie.

init_output_directories

Initialise output directories.

is_already_cached

Will check if a file named with hash_invocation exists.

listen_and_write

For internal use only: blocks until new frame is available on the queue.

next_section

Create segmentation cut here.

open_partial_movie_stream

Open a container holding a video stream.

output_image

print_file_ready_message

Prints the "File Ready" message to STDOUT.

save_final_image

The name is a misnomer.

write_frame

Used internally by Manim to write a frame to the FFMPEG input buffer.

write_subcaption_file

Writes the subcaption file.

Attributes

force_output_as_scene_name

This method adds an audio segment from an AudioSegment type object and suitable parameters.

new_segment (AudioSegment) – The audio segment to add

time (float | None) – the timestamp at which the sound should be added.

gain_to_background (float | None) – The gain of the segment from the background.

Adds a new partial movie file path to scene.partial_movie_files and current section from a hash. This method will compute the path from the hash. In addition to that it adds the new animation to the current section.

hash_animation (str) – Hash of the animation.

This method adds an audio segment from a sound file.

sound_file (str) – The path to the sound file.

time (float | None) – The timestamp at which the audio should be added.

gain (float | None) – The gain of the given audio segment.

**kwargs – This method uses add_audio_segment, so any keyword arguments used there can be referenced here.

Used internally by manim to stream the animation to FFMPEG for displaying or writing to a file.

allow_write (bool) – Whether or not to write to a video file.

file_path (StrPath | None)

None

Will clean the cache by removing the oldest partial_movie_files.

Close the currently opened video container.

Used internally by Manim to first flush the remaining packages in the video stream holding a partial file, and then close the corresponding container.

None

Used internally by Manim to combine the separate partial movie files that make up a Scene into a single video file for that Scene.

Concatenate partial movie files for each section.

None

Creates an empty, silent, Audio Segment.

For internal use only: takes a given frame in np.ndarray format and write it to the stream

frame (PixelArray)

num_frames (int)

None

Internally used by Manim to stop streaming to FFMPEG gracefully.

allow_write (bool) – Whether or not to write to a video file.

None

Finishes writing to the FFMPEG buffer or writing images to output directory. Combines the partial movie files into the whole scene. If save_last_frame is True, saves the last frame in the default image directory.

None

Delete current section if it is empty.

None

Delete all the cached partial movie files

Get the name of the resolution directory directly containing the video file.

This method gets the name of the directory that immediately contains the video file. This name is <height_in_pixels_of_video>p<frame_rate>. For example, if you are rendering an 854x480 px animation at 15fps, the name of the directory that immediately contains the video, file will be 480p15.

The file structure should look something like:

The name of the directory.

str

Preps the writer for adding audio to the movie.

Initialise output directories.

Notes

The directories are read from config, for example config['media_dir']. If the target directories don’t already exist, they will be created.

scene_name (StrPath)

None

Will check if a file named with hash_invocation exists.

hash_invocation (str) – The hash corresponding to an invocation to either scene.play or scene.wait.

Whether the file exists.

bool

For internal use only: blocks until new frame is available on the queue.

Create segmentation cut here.

name (str)

type_ (str)

skip_animations (bool)

None

Open a container holding a video stream.

This is used internally by Manim initialize the container holding the video stream of a partial movie file.

None

Prints the “File Ready” message to STDOUT.

The name is a misnomer. This method saves the image passed to it as an in the default image directory.

image (ndarray) – The pixel array of the image to save.

Used internally by Manim to write a frame to the FFMPEG input buffer.

frame_or_renderer (np.ndarray | OpenGLRenderer) – Pixel array of the frame.

num_frames (int) – The number of times to write frame.

Writes the subcaption file.


---

# manim.animation.indication.FocusOn.html

# FocusOn¶

```python
from manim import *

class UsingFocusOn(Scene):
    def construct(self):
        dot = Dot(color=YELLOW).shift(DOWN)
        self.add(Tex("Focusing on the dot below:"), dot)
        self.play(FocusOn(dot))
        self.wait()
```

Qualified name: manim.animation.indication.FocusOn

Bases: Transform

Shrink a spotlight to a position.

focus_point (np.ndarray | Mobject) – The point at which to shrink the spotlight. If it is a Mobject its center will be used.

opacity (float) – The opacity of the spotlight.

color (str) – The color of the spotlight.

run_time (float) – The duration of the animation.

Examples

Example: UsingFocusOn ¶

Methods

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

focus_point (ndarray | Mobject)

opacity (float)

color (str)

run_time (float)

None


---

# manim.animation.transform.CyclicReplace.html

# CyclicReplace¶

```python
from manim import *

class CyclicReplaceExample(Scene):
    def construct(self):
        group = VGroup(Square(), Circle(), Triangle(), Star())
        group.arrange(RIGHT)
        self.add(group)

        for _ in range(4):
            self.play(CyclicReplace(*group))
```

Qualified name: manim.animation.transform.CyclicReplace

Bases: Transform

An animation moving mobjects cyclically.

In particular, this means: the first mobject takes the place of the second mobject, the second one takes the place of the third mobject, and so on. The last mobject takes the place of the first one.

mobjects (Mobject) – List of mobjects to be transformed.

path_arc (float) – The angle of the arc (in radians) that the mobjects will follow to reach their target.

kwargs – Further keyword arguments that are passed to Transform.

Examples

Example: CyclicReplaceExample ¶

Methods

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobjects (Mobject)

path_arc (float)

None


---

# manim.mobject.graph.Graph.html

# Graph¶

```python
from manim import *

class MovingVertices(Scene):
    def construct(self):
        vertices = [1, 2, 3, 4]
        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]
        g = Graph(vertices, edges)
        self.play(Create(g))
        self.wait()
        self.play(g[1].animate.move_to([1, 1, 0]),
                  g[2].animate.move_to([-1, 1, 0]),
                  g[3].animate.move_to([1, -1, 0]),
                  g[4].animate.move_to([-1, -1, 0]))
        self.wait()
```

```python
from manim import *

class GraphAutoPosition(Scene):
    def construct(self):
        vertices = [1, 2, 3, 4, 5, 6, 7, 8]
        edges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),
                 (2, 8), (3, 4), (6, 1), (6, 2),
                 (6, 3), (7, 2), (7, 4)]
        autolayouts = ["spring", "circular", "kamada_kawai",
                       "planar", "random", "shell",
                       "spectral", "spiral"]
        graphs = [Graph(vertices, edges, layout=lt).scale(0.5)
                  for lt in autolayouts]
        r1 = VGroup(*graphs[:3]).arrange()
        r2 = VGroup(*graphs[3:6]).arrange()
        r3 = VGroup(*graphs[6:]).arrange()
        self.add(VGroup(r1, r2, r3).arrange(direction=DOWN))
```

```python
from manim import *

class GraphManualPosition(Scene):
    def construct(self):
        vertices = [1, 2, 3, 4]
        edges = [(1, 2), (2, 3), (3, 4), (4, 1)]
        lt = {1: [0, 0, 0], 2: [1, 1, 0], 3: [1, -1, 0], 4: [-1, 0, 0]}
        G = Graph(vertices, edges, layout=lt)
        self.add(G)
```

```python
from manim import *

class LabeledModifiedGraph(Scene):
    def construct(self):
        vertices = [1, 2, 3, 4, 5, 6, 7, 8]
        edges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),
                 (2, 8), (3, 4), (6, 1), (6, 2),
                 (6, 3), (7, 2), (7, 4)]
        g = Graph(vertices, edges, layout="circular", layout_scale=3,
                  labels=True, vertex_config={7: {"fill_color": RED}},
                  edge_config={(1, 7): {"stroke_color": RED},
                               (2, 7): {"stroke_color": RED},
                               (4, 7): {"stroke_color": RED}})
        self.add(g)
```

```python
from manim import *

import networkx as nx

class PartiteGraph(Scene):
    def construct(self):
        G = nx.Graph()
        G.add_nodes_from([0, 1, 2, 3])
        G.add_edges_from([(0, 2), (0,3), (1, 2)])
        graph = Graph(list(G.nodes), list(G.edges), layout="partite", partitions=[[0, 1]])
        self.play(Create(graph))
```

```python
from manim import *

class LinearNN(Scene):
    def construct(self):
        edges = []
        partitions = []
        c = 0
        layers = [2, 3, 3, 2]  # the number of neurons in each layer

        for i in layers:
            partitions.append(list(range(c + 1, c + i + 1)))
            c += i
        for i, v in enumerate(layers[1:]):
                last = sum(layers[:i+1])
                for j in range(v):
                    for k in range(last - layers[i], last):
                        edges.append((k + 1, j + last + 1))

        vertices = np.arange(1, sum(layers) + 1)

        graph = Graph(
            vertices,
            edges,
            layout='partite',
            partitions=partitions,
            layout_scale=3,
            vertex_config={'radius': 0.20},
        )
        self.add(graph)
```

```python
from manim import *

import networkx as nx

class Tree(Scene):
    def construct(self):
        G = nx.Graph()

        G.add_node("ROOT")

        for i in range(5):
            G.add_node("Child_%i" % i)
            G.add_node("Grandchild_%i" % i)
            G.add_node("Greatgrandchild_%i" % i)

            G.add_edge("ROOT", "Child_%i" % i)
            G.add_edge("Child_%i" % i, "Grandchild_%i" % i)
            G.add_edge("Grandchild_%i" % i, "Greatgrandchild_%i" % i)

        self.play(Create(
            Graph(list(G.nodes), list(G.edges), layout="tree", root_vertex="ROOT")))
```

```python
class LargeTreeGeneration(MovingCameraScene):
    DEPTH = 4
    CHILDREN_PER_VERTEX = 3
    LAYOUT_CONFIG = {"vertex_spacing": (0.5, 1)}
    VERTEX_CONF = {"radius": 0.25, "color": BLUE_B, "fill_opacity": 1}

    def expand_vertex(self, g, vertex_id: str, depth: int):
        new_vertices = [
            f"{vertex_id}/{i}" for i in range(self.CHILDREN_PER_VERTEX)
        ]
        new_edges = [(vertex_id, child_id) for child_id in new_vertices]
        g.add_edges(
            *new_edges,
            vertex_config=self.VERTEX_CONF,
            positions={
                k: g.vertices[vertex_id].get_center() + 0.1 * DOWN
                for k in new_vertices
            },
        )
        if depth < self.DEPTH:
            for child_id in new_vertices:
                self.expand_vertex(g, child_id, depth + 1)

        return g

    def construct(self):
        g = Graph(["ROOT"], [], vertex_config=self.VERTEX_CONF)
        g = self.expand_vertex(g, "ROOT", 1)
        self.add(g)

        self.play(
            g.animate.change_layout(
                "tree",
                root_vertex="ROOT",
                layout_config=self.LAYOUT_CONFIG,
            )
        )
        self.play(self.camera.auto_zoom(g, margin=1), run_time=0.5)
```

Qualified name: manim.mobject.graph.Graph

Bases: GenericGraph

An undirected graph (vertices connected with edges).

The graph comes with an updater which makes the edges stick to the vertices when moved around. See DiGraph for a version with directed edges.

See also

GenericGraph

vertices (Sequence[Hashable]) – A list of vertices. Must be hashable elements.

edges (Sequence[tuple[Hashable, Hashable]]) – A list of edges, specified as tuples (u, v) where both u and v are vertices. The vertex order is irrelevant.

labels (bool | dict) – Controls whether or not vertices are labeled. If False (the default), the vertices are not labeled; if True they are labeled using their names (as specified in vertices) via MathTex. Alternatively, custom labels can be specified by passing a dictionary whose keys are the vertices, and whose values are the corresponding vertex labels (rendered via, e.g., Text or Tex).

label_fill_color (str) – Sets the fill color of the default labels generated when labels is set to True. Has no effect for other values of labels.

layout (LayoutName | dict[Hashable, Point3DLike] | LayoutFunction) – Either one of "spring" (the default), "circular", "kamada_kawai", "planar", "random", "shell", "spectral", "spiral", "tree", and "partite" for automatic vertex positioning using networkx (see their documentation for more details), or a dictionary specifying a coordinate (value) for each vertex (key) for manual positioning.

layout_config (dict | None) – Only for automatically generated layouts. A dictionary whose entries are passed as keyword arguments to the automatic layout algorithm specified via layout of networkx. The tree layout also accepts a special parameter vertex_spacing passed as a keyword argument inside the layout_config dictionary. Passing a tuple (space_x, space_y) as this argument overrides the value of layout_scale and ensures that vertices are arranged in a way such that the centers of siblings in the same layer are at least space_x units apart horizontally, and neighboring layers are spaced space_y units vertically.

layout_scale (float | tuple[float, float, float]) – The scale of automatically generated layouts: the vertices will be arranged such that the coordinates are located within the interval [-scale, scale]. Some layouts accept a tuple (scale_x, scale_y) causing the first coordinate to be in the interval [-scale_x, scale_x], and the second in [-scale_y, scale_y]. Default: 2.

vertex_type (type[Mobject]) – The mobject class used for displaying vertices in the scene.

vertex_config (dict | None) – Either a dictionary containing keyword arguments to be passed to the class specified via vertex_type, or a dictionary whose keys are the vertices, and whose values are dictionaries containing keyword arguments for the mobject related to the corresponding vertex.

vertex_mobjects (dict | None) – A dictionary whose keys are the vertices, and whose values are mobjects to be used as vertices. Passing vertices here overrides all other configuration options for a vertex.

edge_type (type[Mobject]) – The mobject class used for displaying edges in the scene.

edge_config (dict | None) – Either a dictionary containing keyword arguments to be passed to the class specified via edge_type, or a dictionary whose keys are the edges, and whose values are dictionaries containing keyword arguments for the mobject related to the corresponding edge.

partitions (Sequence[Sequence[Hashable]] | None)

root_vertex (Hashable | None)

Examples

First, we create a small graph and demonstrate that the edges move together with the vertices.

Example: MovingVertices ¶

There are several automatic positioning algorithms to choose from:

Example: GraphAutoPosition ¶

Vertices can also be positioned manually:

Example: GraphManualPosition ¶

The vertices in graphs can be labeled, and configurations for vertices and edges can be modified both by default and for specific vertices and edges.

Note

In edge_config, edges can be passed in both directions: if (u, v) is an edge in the graph, both (u, v) as well as (v, u) can be used as keys in the dictionary.

Example: LabeledModifiedGraph ¶

You can also lay out a partite graph on columns by specifying a list of the vertices on each side and choosing the partite layout.

Note

All vertices in your graph which are not listed in any of the partitions are collected in their own partition and rendered in the rightmost column.

Example: PartiteGraph ¶

The representation of a linear artificial neural network is facilitated by the use of the partite layout and defining partitions for each layer.

Example: LinearNN ¶

The custom tree layout can be used to show the graph by distance from the root vertex. You must pass the root vertex of the tree.

Example: Tree ¶

The following code sample illustrates the use of the vertex_spacing layout parameter specific to the "tree" layout. As mentioned above, setting vertex_spacing overrides the specified value for layout_scale, and as such it is harder to control the size of the mobject. However, we can adjust the captured frame and zoom out by using a MovingCameraScene:

Methods

update_edges

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Return an empty networkx graph for the given graph type.

Graph

Initialize self. See help(type(self)) for accurate signature.

vertices (Sequence[Hashable])

edges (Sequence[tuple[Hashable, Hashable]])

labels (bool | dict)

label_fill_color (str)

layout (Literal['circular', 'kamada_kawai', 'partite', 'planar', 'random', 'shell', 'spectral', 'spiral', 'spring', 'tree'] | dict[~collections.abc.Hashable, ~manim.typing.Point3DLike] | ~manim.mobject.graph.LayoutFunction)

layout_scale (float | tuple[float, float, float])

layout_config (dict | None)

vertex_type (type[Mobject])

vertex_config (dict | None)

vertex_mobjects (dict | None)

edge_type (type[Mobject])

partitions (Sequence[Sequence[Hashable]] | None)

root_vertex (Hashable | None)

edge_config (dict | None)

None

Helper method for populating the edges of the graph.

edges (list[tuple[Hashable, Hashable]])

edge_type (type[Mobject])


---

# manim.animation.transform.CounterclockwiseTransform.html

# CounterclockwiseTransform¶

```python
from manim import *

class CounterclockwiseTransform_vs_Transform(Scene):
    def construct(self):
        # set up the numbers
        c_transform = VGroup(DecimalNumber(number=3.141, num_decimal_places=3), DecimalNumber(number=1.618, num_decimal_places=3))
        text_1 = Text("CounterclockwiseTransform", color=RED)
        c_transform.add(text_1)

        transform = VGroup(DecimalNumber(number=1.618, num_decimal_places=3), DecimalNumber(number=3.141, num_decimal_places=3))
        text_2 = Text("Transform", color=BLUE)
        transform.add(text_2)

        ints = VGroup(c_transform, transform)
        texts = VGroup(text_1, text_2).scale(0.75)
        c_transform.arrange(direction=UP, buff=1)
        transform.arrange(direction=UP, buff=1)

        ints.arrange(buff=2)
        self.add(ints, texts)

        # The mobs move in clockwise direction for ClockwiseTransform()
        self.play(CounterclockwiseTransform(c_transform[0], c_transform[1]))

        # The mobs move straight up for Transform()
        self.play(Transform(transform[0], transform[1]))
```

Qualified name: manim.animation.transform.CounterclockwiseTransform

Bases: Transform

Transforms the points of a mobject along a counterclockwise oriented arc.

See also

Transform, ClockwiseTransform

Examples

Example: CounterclockwiseTransform_vs_Transform ¶

Methods

Attributes

path_arc

path_func

run_time

mobject (Mobject)

target_mobject (Mobject)

path_arc (float)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

target_mobject (Mobject)

path_arc (float)

None


---

# manim.camera.moving_camera.MovingCamera.html

# MovingCamera¶

Qualified name: manim.camera.moving\_camera.MovingCamera

Bases: Camera

Stays in line with the height, width and position of it’s ‘frame’, which is a Rectangle

See also

MovingCameraScene

Frame is a Mobject, (should almost certainly be a rectangle) determining which region of space the camera displays

Methods

auto_zoom

Zooms on to a given array of mobjects (or a singular mobject) and automatically resizes to frame all the mobjects.

cache_cairo_context

Since the frame can be moving around, the cairo context used for updating should be regenerated at each frame.

capture_mobjects

Capture mobjects by printing them on pixel_array.

get_cached_cairo_context

Since the frame can be moving around, the cairo context used for updating should be regenerated at each frame.

get_mobjects_indicating_movement

Returns all mobjects whose movement implies that the camera should think of all other mobjects on the screen as moving

Attributes

background_color

background_opacity

frame_center

Returns the centerpoint of the frame in cartesian coordinates.

frame_height

Returns the height of the frame.

frame_width

Returns the width of the frame

Zooms on to a given array of mobjects (or a singular mobject) and automatically resizes to frame all the mobjects.

Note

This method only works when 2D-objects in the XY-plane are considered, it will not work correctly when the camera has been rotated.

mobjects (list[Mobject]) – The mobject or array of mobjects that the camera will focus on.

margin (float) – The width of the margin that is added to the frame (optional, 0 by default).

only_mobjects_in_frame (bool) – If set to True, only allows focusing on mobjects that are already in frame.

animate (bool) – If set to False, applies the changes instead of returning the corresponding animation

_AnimationBuilder that zooms the camera view to a given list of mobjects or ScreenRectangle with position and size updated to zoomed position.

Union[_AnimationBuilder, ScreenRectangle]

Since the frame can be moving around, the cairo context used for updating should be regenerated at each frame. So no caching.

Capture mobjects by printing them on pixel_array.

This is the essential function that converts the contents of a Scene into an array, which is then converted to an image or video.

mobjects – Mobjects to capture.

kwargs – Keyword arguments to be passed to get_mobjects_to_display().

Notes

For a list of classes that can currently be rendered, see display_funcs().

Returns the centerpoint of the frame in cartesian coordinates.

The cartesian coordinates of the center of the frame.

np.array

Returns the height of the frame.

The height of the frame.

float

Returns the width of the frame

The width of the frame.

float

Since the frame can be moving around, the cairo context used for updating should be regenerated at each frame. So no caching.

Returns all mobjects whose movement implies that the camera should think of all other mobjects on the screen as moving

list


---

# animations.html

# Animations¶

animation

Animate mobjects.

changing

Animation of a mobject boundary and tracing of points.

composition

Tools for displaying multiple animations at once.

creation

Animate the display or removal of a mobject from a scene.

fading

Fading in and out of view.

growing

Animations that introduce mobjects to scene by growing them from points.

indication

Animations drawing attention to particular mobjects.

movement

Animations related to movement.

numbers

Animations for changing numbers.

rotation

Animations related to rotation.

specialized

speedmodifier

Utilities for modifying the speed at which animations are played.

transform

Animations transforming one mobject into another.

transform_matching_parts

Animations that try to transform Mobjects while keeping track of identical parts.

updaters

Animations and utility mobjects related to update functions.


---

# manim.utils.docbuild.html

# docbuild¶

Utilities for building the Manim documentation.

For more information about the Manim documentation building, see:

Manim Development Process, specifically the Documentation bullet point under Polishing Changes and Submitting a Pull Request

Adding Documentation

autoaliasattr_directive

A directive for documenting type aliases and other module-level attributes.

autocolor_directive

A directive for documenting colors in Manim.

manim_directive

A directive for including Manim videos in a Sphinx document

module_parsing

Read and parse all the Manim modules and extract documentation from them.


---

# manim.mobject.matrix.IntegerMatrix.html

# IntegerMatrix¶

```python
from manim import *

class IntegerMatrixExample(Scene):
    def construct(self):
        m0 = IntegerMatrix(
            [[3.7, 2], [42.2, 12]],
            left_bracket="(",
            right_bracket=")")
        self.add(m0)
```

Qualified name: manim.mobject.matrix.IntegerMatrix

Bases: Matrix

A mobject that displays a matrix with integer entries on the screen.

Examples

Example: IntegerMatrixExample ¶

Will round if there are decimal entries in the matrix.

matrix (Iterable) – A numpy 2d array or list of lists

element_to_mobject (Mobject) – Mobject to use, by default Integer

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Will round if there are decimal entries in the matrix.

matrix (Iterable) – A numpy 2d array or list of lists

element_to_mobject (Mobject) – Mobject to use, by default Integer


---

# manim.scene.scene.html

# scene¶

Basic canvas for animations.

Classes

RerunSceneHandler

A class to handle rerunning a Scene after the input file is modified.

Scene

A Scene is the canvas of your animation.


---

# manim.animation.composition.Succession.html

# Succession¶

```python
from manim import *

class SuccessionExample(Scene):
    def construct(self):
        dot1 = Dot(point=LEFT * 2 + UP * 2, radius=0.16, color=BLUE)
        dot2 = Dot(point=LEFT * 2 + DOWN * 2, radius=0.16, color=MAROON)
        dot3 = Dot(point=RIGHT * 2 + DOWN * 2, radius=0.16, color=GREEN)
        dot4 = Dot(point=RIGHT * 2 + UP * 2, radius=0.16, color=YELLOW)
        self.add(dot1, dot2, dot3, dot4)

        self.play(Succession(
            dot1.animate.move_to(dot2),
            dot2.animate.move_to(dot3),
            dot3.animate.move_to(dot4),
            dot4.animate.move_to(dot1)
        ))
```

Qualified name: manim.animation.composition.Succession

Bases: AnimationGroup

Plays a series of animations in succession.

animations (Animation) – Sequence of Animation objects to be played.

lag_ratio (float) – Defines the delay after which the animation is applied to submobjects. A lag_ratio of n.nn means the next animation will play when nnn% of the current animation has played. Defaults to 1.0, meaning that the next animation will begin when 100% of the current animation has played. This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

Defines the delay after which the animation is applied to submobjects. A lag_ratio of n.nn means the next animation will play when nnn% of the current animation has played. Defaults to 1.0, meaning that the next animation will begin when 100% of the current animation has played.

This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

Examples

Example: SuccessionExample ¶

Methods

begin

Begin the animation.

finish

Finish the animation.

interpolate

Set the animation progress.

next_animation

Proceeds to the next animation.

update_active_animation

update_mobjects

Updates things like starting_mobject, and (for Transforms) target_mobject.

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

animations (Animation)

lag_ratio (float)

None

Setup up the Scene before starting the animation.

This includes to add() the Animation’s Mobject if the animation is an introducer.

scene – The scene the animation should be cleaned up from.

None

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Finish the animation.

This method gets called when the animation is over.

None

Set the animation progress.

This method gets called for every frame during an animation.

alpha (float) – The relative time to set the animation to, 0 meaning the start, 1 meaning the end.

None

Proceeds to the next animation.

This method is called right when the active animation finishes.

None

Updates things like starting_mobject, and (for Transforms) target_mobject. Note, since typically (always?) self.mobject will have its updating suspended during the animation, this will do nothing to self.mobject.

dt (float)

None


---

# manim.camera.moving_camera.html

# moving_camera¶

A camera able to move through a scene.

See also

moving_camera_scene

Classes

MovingCamera

Stays in line with the height, width and position of it's 'frame', which is a Rectangle


---

# manim.mobject.graph.DiGraph.html

# DiGraph¶

```python
from manim import *

class MovingDiGraph(Scene):
    def construct(self):
        vertices = [1, 2, 3, 4]
        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]

        g = DiGraph(vertices, edges)

        self.add(g)
        self.play(
            g[1].animate.move_to([1, 1, 1]),
            g[2].animate.move_to([-1, 1, 2]),
            g[3].animate.move_to([1, -1, -1]),
            g[4].animate.move_to([-1, -1, 0]),
        )
        self.wait()
```

```python
from manim import *

class CustomDiGraph(Scene):
    def construct(self):
        vertices = [i for i in range(5)]
        edges = [
            (0, 1),
            (1, 2),
            (3, 2),
            (3, 4),
        ]

        edge_config = {
            "stroke_width": 2,
            "tip_config": {
                "tip_shape": ArrowSquareTip,
                "tip_length": 0.15,
            },
            (3, 4): {
                "color": RED,
                "tip_config": {"tip_length": 0.25, "tip_width": 0.25}
            },
        }

        g = DiGraph(
            vertices,
            edges,
            labels=True,
            layout="circular",
            edge_config=edge_config,
        ).scale(1.4)

        self.play(Create(g))
        self.wait()
```

```python
from manim import *

class UndirectedMovingDiGraph(Scene):
    def construct(self):
        vertices = [i for i in range(5)]
        edges = [
            (0, 1),
            (1, 2),
            (3, 2),
            (3, 4),
        ]

        edge_config = {
            "stroke_width": 2,
            "tip_config": {"tip_length": 0, "tip_width": 0},
            (3, 4): {"color": RED},
        }

        g = DiGraph(
            vertices,
            edges,
            labels=True,
            layout="circular",
            edge_config=edge_config,
        ).scale(1.4)

        self.play(Create(g))
        self.wait()

        self.play(
            g[1].animate.move_to([1, 1, 1]),
            g[2].animate.move_to([-1, 1, 2]),
            g[3].animate.move_to([-1.5, -1.5, -1]),
            g[4].animate.move_to([1, -2, -1]),
        )
        self.wait()
```

Qualified name: manim.mobject.graph.DiGraph

Bases: GenericGraph

A directed graph.

Note

In contrast to undirected graphs, the order in which vertices in a given edge are specified is relevant here.

See also

GenericGraph

vertices (Sequence[Hashable]) – A list of vertices. Must be hashable elements.

edges (Sequence[tuple[Hashable, Hashable]]) – A list of edges, specified as tuples (u, v) where both u and v are vertices. The edge is directed from u to v.

labels (bool | dict) – Controls whether or not vertices are labeled. If False (the default), the vertices are not labeled; if True they are labeled using their names (as specified in vertices) via MathTex. Alternatively, custom labels can be specified by passing a dictionary whose keys are the vertices, and whose values are the corresponding vertex labels (rendered via, e.g., Text or Tex).

label_fill_color (str) – Sets the fill color of the default labels generated when labels is set to True. Has no effect for other values of labels.

layout (LayoutName | dict[Hashable, Point3DLike] | LayoutFunction) – Either one of "spring" (the default), "circular", "kamada_kawai", "planar", "random", "shell", "spectral", "spiral", "tree", and "partite" for automatic vertex positioning using networkx (see their documentation for more details), or a dictionary specifying a coordinate (value) for each vertex (key) for manual positioning.

layout_config (dict | None) – Only for automatically generated layouts. A dictionary whose entries are passed as keyword arguments to the automatic layout algorithm specified via layout of networkx. The tree layout also accepts a special parameter vertex_spacing passed as a keyword argument inside the layout_config dictionary. Passing a tuple (space_x, space_y) as this argument overrides the value of layout_scale and ensures that vertices are arranged in a way such that the centers of siblings in the same layer are at least space_x units apart horizontally, and neighboring layers are spaced space_y units vertically.

layout_scale (float | tuple[float, float, float]) – The scale of automatically generated layouts: the vertices will be arranged such that the coordinates are located within the interval [-scale, scale]. Some layouts accept a tuple (scale_x, scale_y) causing the first coordinate to be in the interval [-scale_x, scale_x], and the second in [-scale_y, scale_y]. Default: 2.

vertex_type (type[Mobject]) – The mobject class used for displaying vertices in the scene.

vertex_config (dict | None) – Either a dictionary containing keyword arguments to be passed to the class specified via vertex_type, or a dictionary whose keys are the vertices, and whose values are dictionaries containing keyword arguments for the mobject related to the corresponding vertex.

vertex_mobjects (dict | None) – A dictionary whose keys are the vertices, and whose values are mobjects to be used as vertices. Passing vertices here overrides all other configuration options for a vertex.

edge_type (type[Mobject]) – The mobject class used for displaying edges in the scene.

edge_config (dict | None) – Either a dictionary containing keyword arguments to be passed to the class specified via edge_type, or a dictionary whose keys are the edges, and whose values are dictionaries containing keyword arguments for the mobject related to the corresponding edge. You can further customize the tip by adding a tip_config dictionary for global styling, or by adding the dict to a specific edge_config.

partitions (Sequence[Sequence[Hashable]] | None)

root_vertex (Hashable | None)

Examples

Example: MovingDiGraph ¶

You can customize the edges and arrow tips globally or locally.

Example: CustomDiGraph ¶

Since this implementation respects the labels boundary you can also use it for an undirected moving graph with labels.

Example: UndirectedMovingDiGraph ¶

Methods

update_edges

Updates the edges to stick at their corresponding vertices.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Return an empty networkx graph for the given graph type.

DiGraph

Initialize self. See help(type(self)) for accurate signature.

vertices (Sequence[Hashable])

edges (Sequence[tuple[Hashable, Hashable]])

labels (bool | dict)

label_fill_color (str)

layout (Literal['circular', 'kamada_kawai', 'partite', 'planar', 'random', 'shell', 'spectral', 'spiral', 'spring', 'tree'] | dict[~collections.abc.Hashable, ~manim.typing.Point3DLike] | ~manim.mobject.graph.LayoutFunction)

layout_scale (float | tuple[float, float, float])

layout_config (dict | None)

vertex_type (type[Mobject])

vertex_config (dict | None)

vertex_mobjects (dict | None)

edge_type (type[Mobject])

partitions (Sequence[Sequence[Hashable]] | None)

root_vertex (Hashable | None)

edge_config (dict | None)

None

Helper method for populating the edges of the graph.

edges (list[tuple[Hashable, Hashable]])

edge_type (type[Mobject])

Updates the edges to stick at their corresponding vertices.

Arrow tips need to be repositioned since otherwise they can be deformed.


---

# manim.animation.creation.Unwrite.html

# Unwrite¶

```python
from manim import *

class UnwriteReverseTrue(Scene):
    def construct(self):
        text = Tex("Alice and Bob").scale(3)
        self.add(text)
        self.play(Unwrite(text))
```

```python
from manim import *

class UnwriteReverseFalse(Scene):
    def construct(self):
        text = Tex("Alice and Bob").scale(3)
        self.add(text)
        self.play(Unwrite(text, reverse=False))
```

Qualified name: manim.animation.creation.Unwrite

Bases: Write

Simulate erasing by hand a Text or a VMobject.

reverse (bool) – Set True to have the animation start erasing from the last submobject first.

vmobject (VMobject)

rate_func (Callable[[float], float])

Examples

Example: UnwriteReverseTrue ¶

Example: UnwriteReverseFalse ¶

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

vmobject (VMobject)

rate_func (Callable[[float], float])

reverse (bool)

None


---

# manim.camera.three_d_camera.ThreeDCamera.html

# ThreeDCamera¶

Qualified name: manim.camera.three\_d\_camera.ThreeDCamera

Bases: Camera

Initializes the ThreeDCamera

*kwargs – Any keyword argument of Camera.

Methods

add_fixed_in_frame_mobjects

This method allows the mobject to have a fixed position, even when the camera moves around.

add_fixed_orientation_mobjects

This method allows the mobject to have a fixed orientation, even when the camera moves around.

capture_mobjects

Capture mobjects by printing them on pixel_array.

generate_rotation_matrix

Generates a rotation matrix based off the current position of the camera.

get_fill_rgbas

Returns the RGBA array of the fill of the passed VMobject

get_focal_distance

Returns focal_distance of the Camera.

get_gamma

Returns the rotation of the camera about the vector from the ORIGIN to the Camera.

get_mobjects_to_display

Used to get the list of mobjects to display with the camera.

get_phi

Returns the Polar angle (the angle off Z_AXIS) phi.

get_rotation_matrix

Returns the matrix corresponding to the current position of the camera.

get_stroke_rgbas

Gets the RGBA array for the stroke of the passed VMobject.

get_theta

Returns the Azimuthal i.e the angle that spins the camera around the Z_AXIS.

get_value_trackers

A list of ValueTrackers of phi, theta, focal_distance, gamma and zoom.

get_zoom

Returns the zoom amount of the camera.

modified_rgbas

project_point

Applies the current rotation_matrix as a projection matrix to the passed point.

project_points

Applies the current rotation_matrix as a projection matrix to the passed array of points.

remove_fixed_in_frame_mobjects

If a mobject was fixed in frame by passing it through add_fixed_in_frame_mobjects(), then this undoes that fixing.

remove_fixed_orientation_mobjects

If a mobject was fixed in its orientation by passing it through add_fixed_orientation_mobjects(), then this undoes that fixing.

reset_rotation_matrix

Sets the value of self.rotation_matrix to the matrix corresponding to the current position of the camera

set_focal_distance

Sets the focal_distance of the Camera.

set_gamma

Sets the angle of rotation of the camera about the vector from the ORIGIN to the Camera.

set_phi

Sets the polar angle i.e the angle between Z_AXIS and Camera through ORIGIN in radians.

set_theta

Sets the azimuthal angle i.e the angle that spins the camera around Z_AXIS in radians.

set_zoom

Sets the zoom amount of the camera.

transform_points_pre_display

Attributes

background_color

background_opacity

frame_center

This method allows the mobject to have a fixed position, even when the camera moves around. E.G If it was passed through this method, at the top of the frame, it will continue to be displayed at the top of the frame.

Highly useful when displaying Titles or formulae or the like.

**mobjects (Mobject) – The mobject to fix in frame.

This method allows the mobject to have a fixed orientation, even when the camera moves around. E.G If it was passed through this method, facing the camera, it will continue to face the camera even as the camera moves. Highly useful when adding labels to graphs and the like.

*mobjects (Mobject) – The mobject whose orientation must be fixed.

use_static_center_func (bool) – Whether or not to use the function that takes the mobject’s center as centerpoint, by default False

center_func (Callable[[], ndarray] | None) – The function which returns the centerpoint with respect to which the mobject will be oriented, by default None

Capture mobjects by printing them on pixel_array.

This is the essential function that converts the contents of a Scene into an array, which is then converted to an image or video.

mobjects – Mobjects to capture.

kwargs – Keyword arguments to be passed to get_mobjects_to_display().

Notes

For a list of classes that can currently be rendered, see display_funcs().

Generates a rotation matrix based off the current position of the camera.

The matrix corresponding to the current position of the camera.

np.array

Returns the RGBA array of the fill of the passed VMobject

vmobject – The VMobject

The RGBA Array of the fill of the VMobject

np.array

Returns focal_distance of the Camera.

The focal_distance of the Camera in MUnits.

float

Returns the rotation of the camera about the vector from the ORIGIN to the Camera.

The angle of rotation of the camera about the vector from the ORIGIN to the Camera in radians

float

Used to get the list of mobjects to display with the camera.

mobjects – The Mobjects

include_submobjects – Whether or not to include the submobjects of mobjects, by default True

excluded_mobjects – Any mobjects to exclude, by default None

list of mobjects

list

Returns the Polar angle (the angle off Z_AXIS) phi.

The Polar angle in radians.

float

Returns the matrix corresponding to the current position of the camera.

The matrix corresponding to the current position of the camera.

np.array

Gets the RGBA array for the stroke of the passed VMobject.

vmobject – The VMobject

background – Whether or not to consider the background when getting the stroke RGBAs, by default False

The RGBA array of the stroke.

np.ndarray

Returns the Azimuthal i.e the angle that spins the camera around the Z_AXIS.

The Azimuthal angle in radians.

float

A list of ValueTrackers of phi, theta, focal_distance, gamma and zoom.

list of ValueTracker objects

list

Returns the zoom amount of the camera.

The zoom amount of the camera.

float

Applies the current rotation_matrix as a projection matrix to the passed point.

point (list | ndarray) – The point to project.

The point after projection.

np.array

Applies the current rotation_matrix as a projection matrix to the passed array of points.

points (ndarray | list) – The list of points to project.

The points after projecting.

np.array

If a mobject was fixed in frame by passing it through add_fixed_in_frame_mobjects(), then this undoes that fixing. The Mobject will no longer be fixed in frame.

mobjects (Mobject) – The mobjects which need not be fixed in frame any longer.

If a mobject was fixed in its orientation by passing it through add_fixed_orientation_mobjects(), then this undoes that fixing. The Mobject will no longer have a fixed orientation.

mobjects (Mobject) – The mobjects whose orientation need not be fixed any longer.

Sets the value of self.rotation_matrix to the matrix corresponding to the current position of the camera

Sets the focal_distance of the Camera.

value (float) – The focal_distance of the Camera.

Sets the angle of rotation of the camera about the vector from the ORIGIN to the Camera.

value (float) – The new angle of rotation of the camera.

Sets the polar angle i.e the angle between Z_AXIS and Camera through ORIGIN in radians.

value (float) – The new value of the polar angle in radians.

Sets the azimuthal angle i.e the angle that spins the camera around Z_AXIS in radians.

value (float) – The new value of the azimuthal angle in radians.

Sets the zoom amount of the camera.

value (float) – The zoom amount of the camera.


---

# manim.animation.creation.Write.html

# Write¶

```python
from manim import *

class ShowWrite(Scene):
    def construct(self):
        self.play(Write(Text("Hello", font_size=144)))
```

```python
from manim import *

class ShowWriteReversed(Scene):
    def construct(self):
        self.play(Write(Text("Hello", font_size=144), reverse=True, remover=False))
```

```python
>>> from manim import Write, Text
>>> Write(Text(''))
Write(Text(''))
```

Qualified name: manim.animation.creation.Write

Bases: DrawBorderThenFill

Simulate hand-writing a Text or hand-drawing a VMobject.

Examples

Example: ShowWrite ¶

Example: ShowWriteReversed ¶

Tests

Check that creating empty Write animations works:

Methods

begin

Begin the animation.

finish

Finish the animation.

reverse_submobjects

Attributes

run_time

vmobject (VMobject | OpenGLVMobject)

rate_func (Callable[[float], float])

reverse (bool)

Initialize self. See help(type(self)) for accurate signature.

vmobject (VMobject | OpenGLVMobject)

rate_func (Callable[[float], float])

reverse (bool)

None

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Finish the animation.

This method gets called when the animation is over.

None


---

# manim.utils.iterables.html

# iterables¶

```python
TypeVar('T')
```

```python
TypeVar('U')
```

```python
TypeVar('H', bound=Hashable)
```

```python
>>> list(adjacent_n_tuples([1, 2, 3, 4], 2))
[(1, 2), (2, 3), (3, 4), (4, 1)]
>>> list(adjacent_n_tuples([1, 2, 3, 4], 3))
[(1, 2, 3), (2, 3, 4), (3, 4, 1), (4, 1, 2)]
```

```python
>>> list(adjacent_pairs([1, 2, 3, 4]))
[(1, 2), (2, 3), (3, 4), (4, 1)]
```

```python
>>> batch_by_property([(1, 2), (3, 4), (5, 6, 7), (8, 9)], len)
[([(1, 2), (3, 4)], 2), ([(5, 6, 7)], 3), ([(8, 9)], 2)]
```

```python
>>> concatenate_lists([1, 2], [3, 4], [5])
[1, 2, 3, 4, 5]
```

```python
>>> list_difference_update([1, 2, 3, 4], [2, 4])
[1, 3]
```

```python
>>> list_update([1, 2, 3], [2, 4, 4])
[1, 3, 2, 4, 4]
```

```python
>>> listify("str")
['str']
>>> listify((1, 2))
[1, 2]
>>> listify(len)
[<built-in function len>]
```

```python
>>> make_even([1, 2], [3, 4, 5, 6])
([1, 1, 2, 2], [3, 4, 5, 6])

>>> make_even([1, 2], [3, 4, 5, 6, 7])
([1, 1, 1, 2, 2], [3, 4, 5, 6, 7])
```

```python
>>> make_even_by_cycling([1, 2], [3, 4, 5, 6])
([1, 2, 1, 2], [3, 4, 5, 6])

>>> make_even_by_cycling([1, 2], [3, 4, 5, 6, 7])
([1, 2, 1, 2, 1], [3, 4, 5, 6, 7])
```

```python
>>> remove_nones(["m", "", "l", 0, 42, False, True])
['m', 'l', 42, True]
```

```python
>>> points = np.array([[1, 2], [3, 4]])
>>> resize_array(points, 1)
array([[1, 2]])
>>> resize_array(points, 3)
array([[1, 2],
       [3, 4],
       [1, 2]])
>>> resize_array(points, 2)
array([[1, 2],
       [3, 4]])
```

```python
>>> resize_preserving_order(np.array([]), 5)
array([0., 0., 0., 0., 0.])

>>> nparray = np.array([[1, 2], [3, 4]])
>>> resize_preserving_order(nparray, 1)
array([[1, 2]])

>>> resize_preserving_order(nparray, 3)
array([[1, 2],
       [1, 2],
       [3, 4]])
```

```python
>>> nparray = np.array([[1, 2], [3, 4]])
>>> resize_with_interpolation(nparray, 1)
array([[1., 2.]])
>>> resize_with_interpolation(nparray, 4)
array([[1.        , 2.        ],
       [1.66666667, 2.66666667],
       [2.33333333, 3.33333333],
       [3.        , 4.        ]])
>>> nparray = np.array([[[1, 2], [3, 4]]])
>>> nparray = np.array([[1, 2], [3, 4], [5, 6]])
>>> resize_with_interpolation(nparray, 4)
array([[1.        , 2.        ],
       [2.33333333, 3.33333333],
       [3.66666667, 4.66666667],
       [5.        , 6.        ]])
>>> nparray = np.array([[1, 2], [3, 4], [1, 2]])
>>> resize_with_interpolation(nparray, 4)
array([[1.        , 2.        ],
       [2.33333333, 3.33333333],
       [2.33333333, 3.33333333],
       [1.        , 2.        ]])
```

```python
>>> tuplify("str")
('str',)
>>> tuplify([1, 2])
(1, 2)
>>> tuplify(len)
(<built-in function len>,)
```

```python
>>> gen = uniq_chain([1, 2], [2, 3], [1, 4, 4])
>>> from collections.abc import Generator
>>> isinstance(gen, Generator)
True
>>> tuple(gen)
(1, 2, 3, 4)
```

Operations on iterables.

TypeVar’s

Functions

Returns the Sequence objects cyclically split into n length tuples.

See also

alias with n=2

Examples

objects (Sequence[T])

n (int)

zip[tuple[T, …]]

Alias for adjacent_n_tuples(objects, 2).

See also

adjacent_n_tuples

Examples

objects (Sequence[T])

zip[tuple[T, …]]

Returns True if all elements of iterable are instances of Class. False otherwise.

iterable (Iterable[object])

Class (type[object])

bool

Takes in a Sequence, and returns a list of tuples, (batch, prop) such that all items in a batch have the same output when put into the Callable property_func, and such that chaining all these batches together would give the original Sequence (i.e. order is preserved).

Examples

items (Iterable[T])

property_func (Callable[[T], U])

list[tuple[list[T], U | None]]

Combines the Iterables provided as arguments into one list.

Examples

list_of_lists (Iterable[T])

list[T]

Determines a hash, even of potentially mutable objects.

obj (object)

int

Returns a list containing all the elements of l1 not in l2.

Examples

l1 (Iterable[T])

l2 (Iterable[T])

list[T]

making sure duplicates are removed from l1, not l2. Removes overlap of l1 and l2 and then concatenates l2 unchanged.

Examples

l1 (Iterable[T])

l2 (Iterable[T])

list[T]

Converts obj to a list intelligently.

Examples

length is equal to the longer iterable (favours earlier elements).

See also

cycles elements instead of favouring earlier ones

Examples

iterable_1 (Iterable[T])

iterable_2 (Iterable[U])

tuple[list[T], list[U]]

length is equal to the longer iterable (cycles over shorter iterable).

See also

favours earlier elements instead of cycling them

Examples

iterable_1 (Collection[T])

iterable_2 (Collection[U])

tuple[list[T], list[U]]

Used instead of list(set(l)) to maintain order. Keeps the last occurrence of each element.

lst (Reversible[H])

list[H]

Removes elements where bool(x) evaluates to False.

Examples

sequence (Iterable[T | None])

list[T]

The elements of nparray are cycled to achieve the desired length.

See also

favours earlier elements instead of cycling them

similar cycling behaviour for balancing 2 iterables

Examples

nparray (npt.NDArray[F])

length (int)

npt.NDArray[F]

The elements of nparray are duplicated to achieve the desired length (favours earlier elements).

Constructs a zeroes array of length if nparray is empty.

See also

cycles elements instead of favouring earlier ones

similar earlier-favouring behaviour for balancing 2 iterables

Examples

nparray (npt.NDArray[np.float64])

length (int)

npt.NDArray[np.float64]

New elements are interpolated to achieve the desired length.

Note that if nparray’s length changes, its dtype may too (e.g. int -> float: see Examples)

See also

cycles elements instead of interpolating

favours earlier elements instead of interpolating

Examples

nparray (npt.NDArray[F])

length (int)

npt.NDArray[F]

nparray (npt.NDArray[F])

length (int)

npt.NDArray[F]

Converts obj to a tuple intelligently.

Examples

provided via args in the order provided.

Examples

args (Iterable[T])

Generator[T, None, None]


---

# manim.animation.animation.Animation.html

# Animation¶

```python
from manim import *

class LagRatios(Scene):
    def construct(self):
        ratios = [0, 0.1, 0.5, 1, 2]  # demonstrated lag_ratios

        # Create dot groups
        group = VGroup(*[Dot() for _ in range(4)]).arrange_submobjects()
        groups = VGroup(*[group.copy() for _ in ratios]).arrange_submobjects(buff=1)
        self.add(groups)

        # Label groups
        self.add(Text("lag_ratio = ", font_size=36).next_to(groups, UP, buff=1.5))
        for group, ratio in zip(groups, ratios):
            self.add(Text(str(ratio), font_size=36).next_to(group, UP))

        #Animate groups with different lag_ratios
        self.play(AnimationGroup(*[
            group.animate(lag_ratio=ratio, run_time=1.5).shift(DOWN * 2)
            for group, ratio in zip(groups, ratios)
        ]))

        # lag_ratio also works recursively on nested submobjects:
        self.play(groups.animate(run_time=1, lag_ratio=0.1).shift(UP * 2))
```

```python
from manim import *

class ChangeDefaultAnimation(Scene):
    def construct(self):
        Rotate.set_default(run_time=2, rate_func=rate_functions.linear)
        Indicate.set_default(color=None)

        S = Square(color=BLUE, fill_color=BLUE, fill_opacity=0.25)
        self.add(S)
        self.play(Rotate(S, PI))
        self.play(Indicate(S))

        Rotate.set_default()
        Indicate.set_default()
```

Qualified name: manim.animation.animation.Animation

Bases: object

An animation.

Animations have a fixed time span.

mobject – The mobject to be animated. This is not required for all types of animations.

lag_ratio – Defines the delay after which the animation is applied to submobjects. This lag is relative to the duration of the animation. This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

Defines the delay after which the animation is applied to submobjects. This lag is relative to the duration of the animation.

This does not influence the total runtime of the animation. Instead the runtime of individual animations is adjusted so that the complete animation has the defined run time.

run_time – The duration of the animation in seconds.

rate_func – The function defining the animation progress based on the relative runtime (see rate_functions) . For example rate_func(0.5) is the proportion of the animation that is done after half of the animations run time.

The function defining the animation progress based on the relative runtime (see rate_functions) .

For example rate_func(0.5) is the proportion of the animation that is done after half of the animations run time.

Self

Reverses the rate function of the animation. Setting reverse_rate_function does not have any effect on remover or introducer. These need to be set explicitly if an introducer-animation should be turned into a remover one and vice versa.

The name of the animation. This gets displayed while rendering the animation. Defaults to <class-name>(<Mobject-name>).

Whether the given mobject should be removed from the scene after this animation.

Whether updaters of the mobject should be suspended during the animation.

Note

In the current implementation of this class, the specified rate function is applied within Animation.interpolate_mobject() call as part of the call to Animation.interpolate_submobject(). For subclasses of Animation that are implemented by overriding interpolate_mobject(), the rate function has to be applied manually (e.g., by passing self.rate_func(alpha) instead of just alpha).

Examples

Example: LagRatios ¶

Methods

begin

Begin the animation.

clean_up_from_scene

Clean up the Scene after finishing the animation.

copy

Create a copy of the animation.

create_starting_mobject

finish

Finish the animation.

get_all_families_zipped

get_all_mobjects

Get all mobjects involved in the animation.

get_all_mobjects_to_update

Get all mobjects to be updated during the animation.

get_rate_func

Get the rate function of the animation.

get_run_time

Get the run time of the animation.

get_sub_alpha

Get the animation progress of any submobjects subanimation.

interpolate

Set the animation progress.

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

interpolate_submobject

is_introducer

Test if the animation is an introducer.

is_remover

Test if the animation is a remover.

set_default

Sets the default values of keyword arguments.

set_name

Set the name of the animation.

set_rate_func

Set the rate function of the animation.

set_run_time

Set the run time of the animation.

update_mobjects

Updates things like starting_mobject, and (for Transforms) target_mobject.

Attributes

run_time

Setup up the Scene before starting the animation.

This includes to add() the Animation’s Mobject if the animation is an introducer.

scene (Scene) – The scene the animation should be cleaned up from.

None

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None

Clean up the Scene after finishing the animation.

This includes to remove() the Animation’s Mobject if the animation is a remover.

scene (Scene) – The scene the animation should be cleaned up from.

None

Create a copy of the animation.

A copy of self

Animation

Finish the animation.

This method gets called when the animation is over.

None

Get all mobjects involved in the animation.

Ordering must match the ordering of arguments to interpolate_submobject

The sequence of mobjects.

Sequence[Mobject]

Get all mobjects to be updated during the animation.

The list of mobjects to be updated during the animation.

List[Mobject]

Get the rate function of the animation.

The rate function of the animation.

Callable[[float], float]

Get the run time of the animation.

The time the animation takes in seconds.

float

Get the animation progress of any submobjects subanimation.

alpha (float) – The overall animation progress

index (int) – The index of the subanimation.

num_submobjects (int) – The total count of subanimations.

The progress of the subanimation.

float

Set the animation progress.

This method gets called for every frame during an animation.

alpha (float) – The relative time to set the animation to, 0 meaning the start, 1 meaning the end.

None

Interpolates the mobject of the Animation based on alpha value.

alpha (float) – A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

None

Test if the animation is an introducer.

True if the animation is an introducer, False otherwise.

bool

Test if the animation is a remover.

True if the animation is a remover, False otherwise.

bool

Sets the default values of keyword arguments.

If this method is called without any additional keyword arguments, the original default values of the initialization method of this class are restored.

kwargs – Passing any keyword argument will update the default values of the keyword arguments of the initialization function of this class.

None

Examples

Example: ChangeDefaultAnimation ¶

Set the name of the animation.

name (str) – The new name of the animation.

self

Animation

Set the rate function of the animation.

rate_func (Callable[[float], float]) – The new function defining the animation progress based on the relative runtime (see rate_functions).

self

Animation

Set the run time of the animation.

run_time (float) – The new time the animation should take in seconds.

note:: (..) – The run_time of an animation should not be changed while it is already running.

self

Animation

Updates things like starting_mobject, and (for Transforms) target_mobject. Note, since typically (always?) self.mobject will have its updating suspended during the animation, this will do nothing to self.mobject.

dt (float)

None


---

# manim.animation.transform.ApplyPointwiseFunction.html

# ApplyPointwiseFunction¶

```python
from manim import *

class WarpSquare(Scene):
    def construct(self):
        square = Square()
        self.play(
            ApplyPointwiseFunction(
                lambda point: complex_to_R3(np.exp(R3_to_complex(point))), square
            )
        )
        self.wait()
```

Qualified name: manim.animation.transform.ApplyPointwiseFunction

Bases: ApplyMethod

Animation that applies a pointwise function to a mobject.

Examples

Example: WarpSquare ¶

Methods

Attributes

path_arc

path_func

run_time

function (types.MethodType)

mobject (Mobject)

run_time (float)

Initialize self. See help(type(self)) for accurate signature.

function (MethodType)

mobject (Mobject)

run_time (float)

None


---

# manim.animation.fading.FadeIn.html

# FadeIn¶

```python
from manim import *

class FadeInExample(Scene):
    def construct(self):
        dot = Dot(UP * 2 + LEFT)
        self.add(dot)
        tex = Tex(
            "FadeIn with ", "shift ", r" or target\_position", " and scale"
        ).scale(1)
        animations = [
            FadeIn(tex[0]),
            FadeIn(tex[1], shift=DOWN),
            FadeIn(tex[2], target_position=dot),
            FadeIn(tex[3], scale=1.5),
        ]
        self.play(AnimationGroup(*animations, lag_ratio=0.5))
```

Qualified name: manim.animation.fading.FadeIn

Bases: _Fade

Fade in Mobject s.

mobjects (Mobject) – The mobjects to be faded in.

shift – The vector by which the mobject shifts while being faded in.

target_position – The position from which the mobject starts while being faded in. In case another mobject is given as target position, its center is used.

scale – The factor by which the mobject is scaled initially before being rescaling to its original size while being faded in.

Examples

Example: FadeInExample ¶

Methods

create_starting_mobject

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobjects (Mobject)

None


---

# manim.mobject.geometry.html

# geometry¶

## Modules¶

Various geometric Mobjects.

arc

Mobjects that are curved.

boolean_ops

Boolean operations for two-dimensional mobjects.

labeled

Mobjects that inherit from lines and contain a label along the length.

line

Mobjects that are lines or variations of them.

polygram

Mobjects that are simple geometric shapes.

shape_matchers

Mobjects used to mark and annotate other mobjects.

tips

A collection of tip mobjects for use with TipableVMobject.


---

# manim.utils.images.html

# images¶

Image manipulation utilities.

Functions

Converts an RGB array into RGBA with the alpha value opacity maxed.

image (RGBPixelArray)

dtype (str)

RGBPixelArray

frames (list[array])

list[array]

image_file_name (str | PurePath)

Path

image_file_name (str | PurePath)

Path

image (array)

<module ‘PIL.Image’ from ‘/home/docs/checkouts/readthedocs.org/user_builds/manimce/envs/stable/lib/python3.13/site-packages/PIL/Image.py’>


---

# manim.scene.three_d_scene.html

# three_d_scene¶

A scene suitable for rendering three-dimensional objects and animations.

Classes

SpecialThreeDScene

An extension of ThreeDScene with more settings.

ThreeDScene

This is a Scene, with special configurations and properties that make it suitable for Three Dimensional Scenes.


---

# manim.animation.growing.GrowFromCenter.html

# GrowFromCenter¶

```python
from manim import *

class GrowFromCenterExample(Scene):
    def construct(self):
        squares = [Square() for _ in range(2)]
        VGroup(*squares).set_x(0).arrange(buff=2)
        self.play(GrowFromCenter(squares[0]))
        self.play(GrowFromCenter(squares[1], point_color=RED))
```

Qualified name: manim.animation.growing.GrowFromCenter

Bases: GrowFromPoint

Introduce an Mobject by growing it from its center.

mobject (Mobject) – The mobjects to be introduced.

point_color (str) – Initial color of the mobject before growing to its full size. Leave empty to match mobject’s color.

Examples

Example: GrowFromCenterExample ¶

Methods

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

point_color (str)

None


---

# manim.mobject.frame.html

# frame¶

Special rectangles.

Classes

FullScreenRectangle

ScreenRectangle


---

# manim.animation.speedmodifier.html

# speedmodifier¶

Utilities for modifying the speed at which animations are played.

Classes

ChangeSpeed

Modifies the speed of passed animation.


---

# manim.mobject.mobject.Group.html

# Group¶

Qualified name: manim.mobject.mobject.Group

Bases: Mobject

Groups together multiple Mobjects.

Notes

When adding the same mobject more than once, repetitions are ignored. Use Mobject.copy() to create a separate copy which can then be added to the group.

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.

None


---

# manim.animation.transform.ApplyComplexFunction.html

# ApplyComplexFunction¶

Qualified name: manim.animation.transform.ApplyComplexFunction

Bases: ApplyMethod

Methods

Attributes

path_arc

path_func

run_time

function (types.MethodType)

mobject (Mobject)

Initialize self. See help(type(self)) for accurate signature.

function (MethodType)

mobject (Mobject)

None


---

# manim.animation.animation.html

# animation¶

```python
from manim import *

class MySquare(Square):
    @override_animation(FadeIn)
    def _fade_in_override(self, **kwargs):
        return Create(self, **kwargs)

class OverrideAnimationExample(Scene):
    def construct(self):
        self.play(FadeIn(MySquare()))
```

```python
>>> from manim import Square, FadeIn
>>> s = Square()
>>> prepare_animation(FadeIn(s))
FadeIn(Square)
```

```python
>>> prepare_animation(s.animate.scale(2).rotate(42))
_MethodAnimation(Square)
```

```python
>>> prepare_animation(42)
Traceback (most recent call last):
...
TypeError: Object 42 cannot be converted to an animation
```

Animate mobjects.

Classes

Add

Add Mobjects to a scene, without animating them in any other way.

Animation

An animation.

Wait

A "no operation" animation.

Functions

Decorator used to mark methods as overrides for specific Animation types.

Should only be used to decorate methods of classes derived from Mobject. Animation overrides get inherited to subclasses of the Mobject who defined them. They don’t override subclasses of the Animation they override.

See also

add_animation_override()

animation_class (type[Animation]) – The animation to be overridden.

The actual decorator. This marks the method as overriding an animation.

Callable[[Callable], Callable]

Examples

Example: OverrideAnimationExample ¶

Returns either an unchanged animation, or the animation built from a passed animation factory.

Examples

anim (Animation | _AnimationBuilder)

Animation


---

# manim._config.html

# _config¶

```python
>>> config["frame_height"]
8.0
>>> with tempconfig({"frame_height": 100.0}):
...     print(config["frame_height"])
100.0
>>> config["frame_height"]
8.0
```

Set the global config and logger.

Functions

Context manager that temporarily modifies the global config object.

Inside the with statement, the modified config will be used. After context manager exits, the config will be restored to its original state.

temp (ManimConfig | dict[str, Any]) – Object whose keys will be used to temporarily update the global config.

Generator[None, None, None]

Examples

Use with tempconfig({...}) to temporarily change the default values of certain config options.


---

# manim.mobject.value_tracker.html

# value_tracker¶

Simple mobjects that can be used for storing (and updating) a value.

Classes

ComplexValueTracker

Tracks a complex-valued parameter.

ValueTracker

A mobject that can be used for tracking (real-valued) parameters.


---

# manim.animation.movement.MoveAlongPath.html

# MoveAlongPath¶

```python
from manim import *

class MoveAlongPathExample(Scene):
    def construct(self):
        d1 = Dot().set_color(ORANGE)
        l1 = Line(LEFT, RIGHT)
        l2 = VMobject()
        self.add(d1, l1, l2)
        l2.add_updater(lambda x: x.become(Line(LEFT, d1.get_center()).set_color(ORANGE)))
        self.play(MoveAlongPath(d1, l1), rate_func=linear)
```

Qualified name: manim.animation.movement.MoveAlongPath

Bases: Animation

Make one mobject move along the path of another mobject.

Example: MoveAlongPathExample ¶

Methods

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

Attributes

run_time

mobject (Mobject)

path (VMobject)

suspend_mobject_updating (bool | None)

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

path (VMobject)

suspend_mobject_updating (bool | None)

None

Interpolates the mobject of the Animation based on alpha value.

alpha (float) – A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

None


---

# manim.utils.color.html

# color¶

## Color data structure¶

## Predefined colors¶

```python
>>> from manim import XKCD
>>> XKCD.AVOCADO
ManimColor('#90B134')
```

```python
>>> from manim.utils.color.XKCD import AVOCADO
>>> AVOCADO
ManimColor('#90B134')
```

Utilities for working with colors and predefined color constants.

core

Manim's (internal) color data structure and some utilities for color conversion.

There are several predefined colors available in Manim:

The colors listed in color.manim_colors are loaded into Manim’s global name space.

The colors in color.AS2700, color.BS381, color.DVIPSNAMES, color.SVGNAMES, color.X11 and color.XKCD need to be accessed via their module (which are available in Manim’s global name space), or imported separately. For example:

Or, alternatively:

The following modules contain the predefined color constants:

manim_colors

Colors included in the global name space.

AS2700

Australian Color Standard

BS381

British Color Standard

DVIPSNAMES

dvips Colors

SVGNAMES

SVG 1.1 Colors

XKCD

Colors from the XKCD Color Name Survey

X11

X11 Colors


---

# manim.camera.multi_camera.html

# multi_camera¶

A camera supporting multiple perspectives.

Classes

MultiCamera

Camera Object that allows for multiple perspectives.


---

# manim.animation.changing.AnimatedBoundary.html

# AnimatedBoundary¶

```python
from manim import *

class AnimatedBoundaryExample(Scene):
    def construct(self):
        text = Text("So shiny!")
        boundary = AnimatedBoundary(text, colors=[RED, GREEN, BLUE],
                                    cycle_rate=3)
        self.add(text, boundary)
        self.wait(2)
```

Qualified name: manim.animation.changing.AnimatedBoundary

Bases: VGroup

Boundary of a VMobject with animated color change.

Examples

Example: AnimatedBoundaryExample ¶

Methods

full_family_become_partial

update_boundary_copies

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Initialize self. See help(type(self)) for accurate signature.


---

# manim.animation.creation.html

# creation¶

Animate the display or removal of a mobject from a scene.

Classes

AddTextLetterByLetter

Show a Text letter by letter on the scene.

AddTextWordByWord

Show a Text word by word on the scene.

Create

Incrementally show a VMobject.

DrawBorderThenFill

Draw the border first and then show the fill.

RemoveTextLetterByLetter

Remove a Text letter by letter from the scene.

ShowIncreasingSubsets

Show one submobject at a time, leaving all previous ones displayed on screen.

ShowPartial

Abstract class for Animations that show the VMobject partially.

ShowSubmobjectsOneByOne

Show one submobject at a time, removing all previously displayed ones from screen.

SpiralIn

Create the Mobject with sub-Mobjects flying in on spiral trajectories.

TypeWithCursor

Similar to AddTextLetterByLetter , but with an additional cursor mobject at the end.

Uncreate

Like Create but in reverse.

UntypeWithCursor

Similar to RemoveTextLetterByLetter , but with an additional cursor mobject at the end.

Unwrite

Simulate erasing by hand a Text or a VMobject.

Write

Simulate hand-writing a Text or hand-drawing a VMobject.


---

# manim.animation.rotation.Rotate.html

# Rotate¶

```python
from manim import *

class UsingRotate(Scene):
    def construct(self):
        self.play(
            Rotate(
                Square(side_length=0.5).shift(UP * 2),
                angle=2*PI,
                about_point=ORIGIN,
                rate_func=linear,
            ),
            Rotate(Square(side_length=0.5), angle=2*PI, rate_func=linear),
            )
```

Qualified name: manim.animation.rotation.Rotate

Bases: Transform

Animation that rotates a Mobject.

mobject (Mobject) – The mobject to be rotated.

angle (float) – The rotation angle.

axis (np.ndarray) – The rotation axis as a numpy vector.

about_point (Sequence[float] | None) – The rotation center.

about_edge (Sequence[float] | None) – If about_point is None, this argument specifies the direction of the bounding box point to be taken as the rotation center.

Examples

Example: UsingRotate ¶

Methods

create_target

Attributes

path_arc

path_func

run_time

Initialize self. See help(type(self)) for accurate signature.

mobject (Mobject)

angle (float)

axis (np.ndarray)

about_point (Sequence[float] | None)

about_edge (Sequence[float] | None)

None


---

# manim.camera.mapping_camera.MappingCamera.html

# MappingCamera¶

Qualified name: manim.camera.mapping\_camera.MappingCamera

Bases: Camera

Camera object that allows mapping between objects.

Methods

capture_mobjects

Capture mobjects by printing them on pixel_array.

points_to_pixel_coords

Attributes

background_color

background_opacity

Capture mobjects by printing them on pixel_array.

This is the essential function that converts the contents of a Scene into an array, which is then converted to an image or video.

mobjects – Mobjects to capture.

kwargs – Keyword arguments to be passed to get_mobjects_to_display().

Notes

For a list of classes that can currently be rendered, see display_funcs().


---

# manim.animation.transform.ApplyPointwiseFunctionToCenter.html

# ApplyPointwiseFunctionToCenter¶

Qualified name: manim.animation.transform.ApplyPointwiseFunctionToCenter

Bases: ApplyPointwiseFunction

Methods

begin

Begin the animation.

Attributes

path_arc

path_func

run_time

function (types.MethodType)

mobject (Mobject)

Initialize self. See help(type(self)) for accurate signature.

function (MethodType)

mobject (Mobject)

None

Begin the animation.

This method is called right as an animation is being played. As much initialization as possible, especially any mobject copying, should live in this method.

None


---

# manim.utils.tex_templates.html

# tex_templates¶

A library of LaTeX templates.

Classes

TexFontTemplates

A collection of TeX templates for the fonts described at http://jf.burnol.free.fr/showcase.html

TexTemplateLibrary

A collection of basic TeX template objects


---

# manim.mobject.types.html

# types¶

## Modules¶

Specialized mobject base classes.

image_mobject

Mobjects representing raster images.

point_cloud_mobject

Mobjects representing point clouds.

vectorized_mobject

Mobjects that use vector graphics.


---

# manim.camera.mapping_camera.SplitScreenCamera.html

# SplitScreenCamera¶

Qualified name: manim.camera.mapping\_camera.SplitScreenCamera

Bases: OldMultiCamera

Methods

Attributes

background_color

background_opacity


---

# manim.utils.ipython_magic.html

# ipython_magic¶

Utilities for using Manim with IPython (in particular: Jupyter notebooks)

Classes

ManimMagic

Create a configurable given a config config.


---

# manim.mobject.matrix.Matrix.html

# Matrix¶

```python
from manim import *

class MatrixExamples(Scene):
    def construct(self):
        m0 = Matrix([[2, r"\pi"], [-1, 1]])
        m1 = Matrix([[2, 0, 4], [-1, 1, 5]],
            v_buff=1.3,
            h_buff=0.8,
            bracket_h_buff=SMALL_BUFF,
            bracket_v_buff=SMALL_BUFF,
            left_bracket=r"\{",
            right_bracket=r"\}")
        m1.add(SurroundingRectangle(m1.get_columns()[1]))
        m2 = Matrix([[2, 1], [-1, 3]],
            element_alignment_corner=UL,
            left_bracket="(",
            right_bracket=")")
        m3 = Matrix([[2, 1], [-1, 3]],
            left_bracket=r"\langle",
            right_bracket=r"\rangle")
        m4 = Matrix([[2, 1], [-1, 3]],
        ).set_column_colors(RED, GREEN)
        m5 = Matrix([[2, 1], [-1, 3]],
        ).set_row_colors(RED, GREEN)
        g = Group(
            m0,m1,m2,m3,m4,m5
        ).arrange_in_grid(buff=2)
        self.add(g)
```

```python
from manim import *

class BackgroundRectanglesExample(Scene):
    def construct(self):
        background= Rectangle().scale(3.2)
        background.set_fill(opacity=.5)
        background.set_color([TEAL, RED, YELLOW])
        self.add(background)
        m0 = Matrix([[12, -30], [-1, 15]],
            add_background_rectangles_to_entries=True)
        m1 = Matrix([[2, 0], [-1, 1]],
            include_background_rectangle=True)
        m2 = Matrix([[12, -30], [-1, 15]])
        g = Group(m0, m1, m2).arrange(buff=2)
        self.add(g)
```

```python
from manim import *

class GetBracketsExample(Scene):
    def construct(self):
        m0 = Matrix([["\\pi", 3], [1, 5]])
        bra = m0.get_brackets()
        colors = [BLUE, GREEN]
        for k in range(len(colors)):
            bra[k].set_color(colors[k])
        self.add(m0)
```

```python
from manim import *

class GetColumnsExample(Scene):
    def construct(self):
        m0 = Matrix([[r"\pi", 3], [1, 5]])
        m0.add(SurroundingRectangle(m0.get_columns()[1]))
        self.add(m0)
```

```python
from manim import *

class GetEntriesExample(Scene):
    def construct(self):
        m0 = Matrix([[2, 3], [1, 5]])
        ent = m0.get_entries()
        colors = [BLUE, GREEN, YELLOW, RED]
        for k in range(len(colors)):
            ent[k].set_color(colors[k])
        self.add(m0)
```

```python
from manim import *

class GetRowsExample(Scene):
    def construct(self):
        m0 = Matrix([["\\pi", 3], [1, 5]])
        m0.add(SurroundingRectangle(m0.get_rows()[1]))
        self.add(m0)
```

```python
from manim import *

class SetColumnColorsExample(Scene):
    def construct(self):
        m0 = Matrix([["\\pi", 1], [-1, 3]],
        ).set_column_colors([RED,BLUE], GREEN)
        self.add(m0)
```

```python
from manim import *

class SetRowColorsExample(Scene):
    def construct(self):
        m0 = Matrix([["\\pi", 1], [-1, 3]],
        ).set_row_colors([RED,BLUE], GREEN)
        self.add(m0)
```

Qualified name: manim.mobject.matrix.Matrix

Bases: VMobject

A mobject that displays a matrix on the screen.

matrix (Iterable) – A numpy 2d array or list of lists.

v_buff (float) – Vertical distance between elements, by default 0.8.

h_buff (float) – Horizontal distance between elements, by default 1.3.

bracket_h_buff (float) – Distance of the brackets from the matrix, by default MED_SMALL_BUFF.

bracket_v_buff (float) – Height of the brackets, by default MED_SMALL_BUFF.

add_background_rectangles_to_entries (bool) – True if should add backgraound rectangles to entries, by default False.

include_background_rectangle (bool) – True if should include background rectangle, by default False.

element_to_mobject (type[MathTex]) – The mobject class used to construct the elements, by default MathTex.

element_to_mobject_config (dict) – Additional arguments to be passed to the constructor in element_to_mobject, by default {}.

element_alignment_corner (Sequence[float]) – The corner to which elements are aligned, by default DR.

left_bracket (str) – The left bracket type, by default "[".

right_bracket (str) – The right bracket type, by default "]".

stretch_brackets (bool) – True if should stretch the brackets to fit the height of matrix contents, by default True.

bracket_config (dict) – Additional arguments to be passed to MathTex when constructing the brackets.

Examples

The first example shows a variety of uses of this module while the second example exlpains the use of the options add_background_rectangles_to_entries and include_background_rectangle.

Example: MatrixExamples ¶

Example: BackgroundRectanglesExample ¶

Methods

add_background_to_entries

Add a black background rectangle to the matrix, see above for an example.

get_brackets

Return the bracket mobjects.

get_columns

Return columns of the matrix as VGroups.

get_entries

Return the individual entries of the matrix.

get_mob_matrix

Return the underlying mob matrix mobjects.

get_rows

Return rows of the matrix as VGroups.

set_column_colors

Set individual colors for each columns of the matrix.

set_row_colors

Set individual colors for each row of the matrix.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Adds the brackets to the Matrix mobject.

See Latex document for various bracket types.

left (str) – the left bracket, by default “[”

right (str) – the right bracket, by default “]”

The current matrix object (self).

Matrix

Initialize self. See help(type(self)) for accurate signature.

matrix (Iterable)

v_buff (float)

h_buff (float)

bracket_h_buff (float)

bracket_v_buff (float)

add_background_rectangles_to_entries (bool)

include_background_rectangle (bool)

element_to_mobject (type[MathTex])

element_to_mobject_config (dict)

element_alignment_corner (Sequence[float])

left_bracket (str)

right_bracket (str)

stretch_brackets (bool)

bracket_config (dict)

Add a black background rectangle to the matrix, see above for an example.

The current matrix object (self).

Matrix

Return the bracket mobjects.

Each VGroup contains a bracket

List[VGroup]

Examples

Example: GetBracketsExample ¶

Return columns of the matrix as VGroups.

Each VGroup contains a column of the matrix.

List[VGroup]

Examples

Example: GetColumnsExample ¶

Return the individual entries of the matrix.

VGroup containing entries of the matrix.

VGroup

Examples

Example: GetEntriesExample ¶

Return the underlying mob matrix mobjects.

Each VGroup contains a row of the matrix.

List[VGroup]

Return rows of the matrix as VGroups.

Each VGroup contains a row of the matrix.

List[VGroup]

Examples

Example: GetRowsExample ¶

Set individual colors for each columns of the matrix.

colors (str) – The list of colors; each color specified corresponds to a column.

The current matrix object (self).

Matrix

Examples

Example: SetColumnColorsExample ¶

Set individual colors for each row of the matrix.

colors (str) – The list of colors; each color specified corresponds to a row.

The current matrix object (self).

Matrix

Examples

Example: SetRowColorsExample ¶


---

# manim.mobject.mobject.Mobject.html

# Mobject¶

```python
>>> outer = Mobject()
>>> inner = Mobject()
>>> outer = outer.add(inner)
```

```python
>>> outer = outer.add(inner)
>>> len(outer.submobjects)
1
```

```python
>>> outer.add(3)
Traceback (most recent call last):
...
TypeError: Only values of type Mobject can be added as submobjects of Mobject, but the value 3 (at index 0) is of type int.
```

```python
>>> outer.add(outer)
Traceback (most recent call last):
...
ValueError: Cannot add Mobject as a submobject of itself (at index 0).
```

```python
>>> parent = Mobject(name="parent")
>>> child = Mobject(name="child")
>>> parent.add(child, child)
[...] WARNING  ...
parent
>>> parent.submobjects
[child]
```

```python
from manim import *

class NextToUpdater(Scene):
    def construct(self):
        def dot_position(mobject):
            mobject.set_value(dot.get_center()[0])
            mobject.next_to(dot)

        dot = Dot(RIGHT*3)
        label = DecimalNumber()
        label.add_updater(dot_position)
        self.add(dot, label)

        self.play(Rotating(dot, about_point=ORIGIN, angle=TAU, run_time=TAU, rate_func=linear))
```

```python
from manim import *

class DtUpdater(Scene):
    def construct(self):
        square = Square()

        #Let the square rotate 90° per second
        square.add_updater(lambda mobject, dt: mobject.rotate(dt*90*DEGREES))
        self.add(square)
        self.wait(2)
```

```python
self.play(my_mobject.animate.shift(RIGHT).rotate(PI))
```

```python
self.play(
    my_mobject.animate.shift(RIGHT), my_mobject.animate.rotate(PI)
)
```

```python
self.play(my_mobject.animate(rate_func=linear).shift(RIGHT))
```

```python
self.play(
    mobject1.animate(run_time=2).rotate(PI),
    mobject2.animate(rate_func=there_and_back).shift(RIGHT),
)
```

```python
from manim import *

class AnimateExample(Scene):
    def construct(self):
        s = Square()
        self.play(Create(s))
        self.play(s.animate.shift(RIGHT))
        self.play(s.animate.scale(2))
        self.play(s.animate.rotate(PI / 2))
        self.play(Uncreate(s))
```

```python
from manim import *

class AnimateChainExample(Scene):
    def construct(self):
        s = Square()
        self.play(Create(s))
        self.play(s.animate.shift(RIGHT).scale(2).rotate(PI / 2))
        self.play(Uncreate(s))
```

```python
from manim import *

class AnimateWithArgsExample(Scene):
    def construct(self):
        s = Square()
        c = Circle()

        VGroup(s, c).arrange(RIGHT, buff=2)
        self.add(s, c)

        self.play(
            s.animate(run_time=2).rotate(PI / 2),
            c.animate(rate_func=there_and_back).shift(RIGHT),
        )
```

```python
from manim import *

class ApplyFuncExample(Scene):
    def construct(self):
        circ = Circle().scale(1.5)
        circ_ref = circ.copy()
        circ.apply_complex_function(
            lambda x: np.exp(x*1j)
        )
        t = ValueTracker(0)
        circ.add_updater(
            lambda x: x.become(circ_ref.copy().apply_complex_function(
                lambda x: np.exp(x+t.get_value()*1j)
            )).set_color(BLUE)
        )
        self.add(circ_ref)
        self.play(TransformFromCopy(circ_ref, circ))
        self.play(t.animate.set_value(TAU), run_time=3)
```

```python
from manim import *

class Example(Scene):
    def construct(self):
        s1 = Square()
        s2 = Square()
        s3 = Square()
        s4 = Square()
        x = VGroup(s1, s2, s3, s4).set_x(0).arrange(buff=1.0)
        self.add(x)
```

```python
from manim import *

class ExampleBoxes(Scene):
    def construct(self):
        boxes=VGroup(*[Square() for s in range(0,6)])
        boxes.arrange_in_grid(rows=2, buff=0.1)
        self.add(boxes)
```

```python
from manim import *

class ArrangeInGrid(Scene):
    def construct(self):
        boxes = VGroup(*[
            Rectangle(WHITE, 0.5, 0.5).add(Text(str(i+1)).scale(0.5))
            for i in range(24)
        ])
        self.add(boxes)

        boxes.arrange_in_grid(
            buff=(0.25,0.5),
            col_alignments="lccccr",
            row_alignments="uccd",
            col_widths=[1, *[None]*4, 1],
            row_heights=[1, None, None, 1],
            flow_order="dr"
        )
```

```python
from manim import *

class ArrangeSumobjectsExample(Scene):
    def construct(self):
        s= VGroup(*[Dot().shift(i*0.1*RIGHT*np.random.uniform(-1,1)+UP*np.random.uniform(-1,1)) for i in range(0,15)])
        s.shift(UP).set_color(BLUE)
        s2= s.copy().set_color(RED)
        s2.arrange_submobjects()
        s2.shift(DOWN)
        self.add(s,s2)
```

```python
from manim import *

class BecomeScene(Scene):
    def construct(self):
        circ = Circle(fill_color=RED, fill_opacity=0.8)
        square = Square(fill_color=BLUE, fill_opacity=0.2)
        self.add(circ)
        self.wait(0.5)
        circ.become(square)
        self.wait(0.5)
```

```python
>>> from manim import Rectangle, Circle
>>> import numpy as np
>>> rect = Rectangle(height=2, width=4)
>>> circ = Circle(radius=3)
```

```python
>>> result = rect.copy().become(circ, stretch=True)
>>> result.height, result.width
(np.float64(2.0), np.float64(4.0))
>>> ellipse_points = np.array(result.get_anchors())
>>> ellipse_eq = np.sum(ellipse_points**2 * [1/4, 1, 0], axis=1)
>>> np.allclose(ellipse_eq, 1)
True
```

```python
>>> result = rect.copy().become(circ, match_height=True)
>>> result.height, result.width
(np.float64(2.0), np.float64(2.0))
>>> circle_points = np.array(result.get_anchors())
>>> circle_eq = np.sum(circle_points**2, axis=1)
>>> np.allclose(circle_eq, 1)
True
>>> result = rect.copy().become(circ, match_width=True)
>>> result.height, result.width
(np.float64(4.0), np.float64(4.0))
>>> circle_points = np.array(result.get_anchors())
>>> circle_eq = np.sum(circle_points**2, axis=1)
>>> np.allclose(circle_eq, 2**2)
True
```

```python
>>> rect = rect.shift(np.array([0, 1, 0]))
>>> np.allclose(rect.get_center(), circ.get_center())
False
>>> result = rect.copy().become(circ, match_center=True)
>>> np.allclose(rect.get_center(), result.get_center())
True
```

```python
from manim import *

class FlipExample(Scene):
    def construct(self):
        s= Line(LEFT, RIGHT+UP).shift(4*LEFT)
        self.add(s)
        s2= s.copy().flip()
        self.add(s2)
```

```python
>>> from manim import Square, RED
>>> Square(color=RED).get_color() == RED
True
```

```python
sample = Arc(start_angle=PI / 7, angle=PI / 5)

# These are all equivalent
max_y_1 = sample.get_top()[1]
max_y_2 = sample.get_critical_point(UP)[1]
max_y_3 = sample.get_extremum_along_dim(dim=1, key=1)
```

```python
from manim import *

class AngleMidPoint(Scene):
    def construct(self):
        line1 = Line(ORIGIN, 2*RIGHT)
        line2 = Line(ORIGIN, 2*RIGHT).rotate_about_origin(80*DEGREES)

        a = Angle(line1, line2, radius=1.5, other_angle=False)
        d = Dot(a.get_midpoint()).set_color(RED)

        self.add(line1, line2, a, d)
        self.wait()
```

```python
from manim import *

class HeightExample(Scene):
    def construct(self):
        decimal = DecimalNumber().to_edge(UP)
        rect = Rectangle(color=BLUE)
        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)

        decimal.add_updater(lambda d: d.set_value(rect.height))

        self.add(rect_copy, rect, decimal)
        self.play(rect.animate.set(height=5))
        self.wait()
```

```python
from manim import *

class DotInterpolation(Scene):
    def construct(self):
        dotR = Dot(color=DARK_GREY)
        dotR.shift(2 * RIGHT)
        dotL = Dot(color=WHITE)
        dotL.shift(2 * LEFT)

        dotMiddle = VMobject().interpolate(dotL, dotR, alpha=0.3)

        self.add(dotL, dotR, dotMiddle)
```

```python
from manim import *

class InvertSumobjectsExample(Scene):
    def construct(self):
        s = VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])
        s2 = s.copy()
        s2.invert()
        s2.shift(DOWN)
        self.play(Write(s), Write(s2))
```

```python
from manim import *

class MatchPointsScene(Scene):
    def construct(self):
        circ = Circle(fill_color=RED, fill_opacity=0.8)
        square = Square(fill_color=BLUE, fill_opacity=0.2)
        self.add(circ)
        self.wait(0.5)
        self.play(circ.animate.match_points(square))
        self.wait(0.5)
```

```python
from manim import *

class GeometricShapes(Scene):
    def construct(self):
        d = Dot()
        c = Circle()
        s = Square()
        t = Triangle()
        d.next_to(c, RIGHT)
        s.next_to(c, LEFT)
        t.next_to(c, DOWN)
        self.add(d, c, s, t)
```

```python
from manim import *

class MobjectScaleExample(Scene):
    def construct(self):
        f1 = Text("F")
        f2 = Text("F").scale(2)
        f3 = Text("F").scale(0.5)
        f4 = Text("F").scale(-1)

        vgroup = VGroup(f1, f2, f3, f4).arrange(6 * RIGHT)
        self.add(vgroup)
```

```python
>>> from manim import *
>>> sq = Square()
>>> sq.width
np.float64(2.0)
>>> sq.scale_to_fit_height(5)
Square
>>> sq.height
np.float64(5.0)
>>> sq.width
np.float64(5.0)
```

```python
>>> from manim import *
>>> sq = Square()
>>> sq.height
np.float64(2.0)
>>> sq.scale_to_fit_width(5)
Square
>>> sq.width
np.float64(5.0)
>>> sq.height
np.float64(5.0)
```

```python
>>> mob = Mobject()
>>> mob.set_foo(0)
Mobject
>>> mob.get_foo()
0
>>> mob.foo
0
```

```python
>>> mob = Mobject()
>>> mob.set(foo=0)
Mobject
>>> mob.foo
0
```

```python
>>> from manim import Square, GREEN
>>> Square.set_default(color=GREEN, fill_opacity=0.25)
>>> s = Square(); s.color, s.fill_opacity
(ManimColor('#83C167'), 0.25)
>>> Square.set_default()
>>> s = Square(); s.color, s.fill_opacity
(ManimColor('#FFFFFF'), 0.0)
```

```python
from manim import *

config.background_color = WHITE

class ChangedDefaultTextcolor(Scene):
    def construct(self):
        Text.set_default(color=BLACK)
        self.add(Text("Changing default values is easy!"))

        # we revert the colour back to the default to prevent a bug in the docs.
        Text.set_default(color=WHITE)
```

```python
from manim import *

class SetZIndex(Scene):
    def construct(self):
        text = Text('z_index = 3', color = PURE_RED).shift(UP).set_z_index(3)
        square = Square(2, fill_opacity=1).set_z_index(2)
        tex = Tex(r'zIndex = 1', color = PURE_BLUE).shift(DOWN).set_z_index(1)
        circle = Circle(radius = 1.7, color = GREEN, fill_opacity = 1) # z_index = 0

        # Displaying order is now defined by z_index values
        self.add(text)
        self.add(square)
        self.add(tex)
        self.add(circle)
```

```python
from manim import *

class ShuffleSubmobjectsExample(Scene):
    def construct(self):
        s= VGroup(*[Dot().shift(i*0.1*RIGHT) for i in range(-20,20)])
        s2= s.copy()
        s2.shuffle_submobjects()
        s2.shift(DOWN)
        self.play(Write(s), Write(s2))
```

```python
>>> from manim import *
>>> sq = Square()
>>> sq.width
np.float64(2.0)
>>> sq.stretch_to_fit_height(5)
Square
>>> sq.height
np.float64(5.0)
>>> sq.width
np.float64(2.0)
```

```python
>>> from manim import *
>>> sq = Square()
>>> sq.height
np.float64(2.0)
>>> sq.stretch_to_fit_width(5)
Square
>>> sq.width
np.float64(5.0)
>>> sq.height
np.float64(2.0)
```

```python
from manim import *

class ToCornerExample(Scene):
    def construct(self):
        c = Circle()
        c.to_corner(UR)
        t = Tex("To the corner!")
        t2 = MathTex("x^3").shift(DOWN)
        self.add(c,t,t2)
        t.to_corner(DL, buff=0)
        t2.to_corner(UL, buff=1.5)
```

```python
from manim import *

class ToEdgeExample(Scene):
    def construct(self):
        tex_top = Tex("I am at the top!")
        tex_top.to_edge(UP)
        tex_side = Tex("I am moving to the side!")
        c = Circle().shift(2*DOWN)
        self.add(tex_top, tex_side, c)
        tex_side.to_edge(LEFT)
        c.to_edge(RIGHT, buff=0)
```

```python
from manim import *

class WidthExample(Scene):
    def construct(self):
        decimal = DecimalNumber().to_edge(UP)
        rect = Rectangle(color=BLUE)
        rect_copy = rect.copy().set_stroke(GRAY, opacity=0.5)

        decimal.add_updater(lambda d: d.set_value(rect.width))

        self.add(rect_copy, rect, decimal)
        self.play(rect.animate.set(width=7))
        self.wait()
```

Qualified name: manim.mobject.mobject.Mobject

Bases: object

Mathematical Object: base class for objects that can be displayed on screen.

There is a compatibility layer that allows for getting and setting generic attributes with get_* and set_* methods. See set() for more details.

color (ParsableManimColor | list[ParsableManimColor])

name (str | None)

dim (int)

z_index (float)

The contained objects.

List[Mobject]

The points of the objects.

See also

VMobject

numpy.ndarray

Methods

add

Add mobjects as submobjects.

add_animation_override

Add an animation override.

add_background_rectangle

Add a BackgroundRectangle as submobject.

add_background_rectangle_to_family_members_with_points

add_background_rectangle_to_submobjects

add_n_more_submobjects

add_to_back

Add all passed mobjects to the back of the submobjects.

add_updater

Add an update function to this mobject.

align_data

Aligns the data of this mobject with another mobject.

align_on_border

Direction just needs to be a vector pointing towards side or corner in the 2d plane.

align_points

align_points_with_larger

align_submobjects

align_to

Aligns mobject to another Mobject in a certain direction.

animation_override_for

Returns the function defining a specific animation override for this class.

apply_complex_function

Applies a complex function to a Mobject.

apply_function

apply_function_to_position

apply_function_to_submobject_positions

apply_matrix

apply_over_attr_arrays

apply_points_function_about_point

apply_to_family

Apply a function to self and every submobject with points recursively.

arrange

Sorts Mobject next to each other on screen.

arrange_in_grid

Arrange submobjects in a grid.

arrange_submobjects

Arrange the position of submobjects with a small buffer.

become

Edit points, colors and submobjects to be identical to another Mobject

center

Moves the center of the mobject to the center of the scene.

clear_updaters

Remove every updater.

copy

Create and return an identical copy of the Mobject including all submobjects.

fade

fade_to

family_members_with_points

flip

Flips/Mirrors an mobject about its center.

generate_points

Initializes points and therefore the shape.

generate_target

get_all_points

Return all points from this mobject and all submobjects.

get_array_attrs

get_bottom

Get bottom Point3Ds of a box bounding the Mobject

get_boundary_point

get_center

Get center Point3Ds

get_center_of_mass

get_color

Returns the color of the Mobject

get_coord

Meant to generalize get_x, get_y and get_z

get_corner

Get corner Point3Ds for certain direction.

get_critical_point

Picture a box bounding the Mobject.

get_edge_center

Get edge Point3Ds for certain direction.

get_end

Returns the point, where the stroke that surrounds the Mobject ends.

get_extremum_along_dim

get_family

get_family_updaters

get_group_class

get_image

get_left

Get left Point3Ds of a box bounding the Mobject

get_merged_array

Return all of a given attribute from this mobject and all submobjects.

get_midpoint

Get Point3Ds of the middle of the path that forms the Mobject.

get_mobject_type_class

Return the base class of this mobject type.

get_nadir

Get nadir (opposite the zenith) Point3Ds of a box bounding a 3D Mobject.

get_num_points

get_pieces

get_point_mobject

The simplest Mobject to be transformed to or from self.

get_points_defining_boundary

get_right

Get right Point3Ds of a box bounding the Mobject

get_start

Returns the point, where the stroke that surrounds the Mobject starts.

get_start_and_end

Returns starting and ending point of a stroke as a tuple.

get_time_based_updaters

Return all updaters using the dt parameter.

get_top

Get top Point3Ds of a box bounding the Mobject

get_updaters

Return all updaters.

get_x

Returns x Point3D of the center of the Mobject as float

get_y

Returns y Point3D of the center of the Mobject as float

get_z

Returns z Point3D of the center of the Mobject as float

get_z_index_reference_point

get_zenith

Get zenith Point3Ds of a box bounding a 3D Mobject.

has_no_points

Check if Mobject does not contains points.

has_points

Check if Mobject contains points.

has_time_based_updater

Test if self has a time based updater.

init_colors

Initializes the colors.

insert

Inserts a mobject at a specific position into self.submobjects

interpolate

Turns this Mobject into an interpolation between mobject1 and mobject2.

interpolate_color

invert

Inverts the list of submobjects.

is_off_screen

length_over_dim

Measure the length of an Mobject in a certain direction.

match_color

Match the color with the color of another Mobject.

match_coord

Match the Point3Ds with the Point3Ds of another Mobject.

match_depth

Match the depth with the depth of another Mobject.

match_dim_size

Match the specified dimension with the dimension of another Mobject.

match_height

Match the height with the height of another Mobject.

match_points

Edit points, positions, and submobjects to be identical to another Mobject, while keeping the style unchanged.

match_updaters

Match the updaters of the given mobject.

match_width

Match the width with the width of another Mobject.

match_x

Match x coord.

match_y

Match y coord.

match_z

Match z coord.

move_to

Move center of the Mobject to certain Point3D.

next_to

Move this Mobject next to another's Mobject or Point3D.

nonempty_submobjects

null_point_align

If a Mobject with points is being aligned to one without, treat both as groups, and push the one with points into its own submobjects list.

point_from_proportion

pose_at_angle

proportion_from_point

push_self_into_submobjects

put_start_and_end_on

reduce_across_dimension

Find the min or max value from a dimension across all points in this and submobjects.

remove

Remove submobjects.

remove_updater

Remove an updater.

repeat

This can make transition animations nicer

repeat_submobject

replace

rescale_to_fit

reset_points

Sets points to be an empty array.

restore

Restores the state that was previously saved with save_state().

resume_updating

Enable updating from updaters and animations.

reverse_points

rotate

Rotates the Mobject about a certain point.

rotate_about_origin

Rotates the Mobject about the ORIGIN, which is at [0,0,0].

save_image

Saves an image of only this Mobject at its position to a png file.

save_state

Save the current state (position, color & size).

scale

Scale the size by a factor.

scale_to_fit_depth

Scales the Mobject to fit a depth while keeping width/height proportional.

scale_to_fit_height

Scales the Mobject to fit a height while keeping width/depth proportional.

scale_to_fit_width

Scales the Mobject to fit a width while keeping height/depth proportional.

set

Sets attributes.

set_color

Condition is function which takes in one arguments, (x, y, z).

set_color_by_gradient

set_colors_by_radial_gradient

set_coord

set_default

Sets the default values of keyword arguments.

set_submobject_colors_by_gradient

set_submobject_colors_by_radial_gradient

set_x

Set x value of the center of the Mobject (int or float)

set_y

Set y value of the center of the Mobject (int or float)

set_z

Set z value of the center of the Mobject (int or float)

set_z_index

Sets the Mobject's z_index to the value specified in z_index_value.

set_z_index_by_z_Point3D

Sets the Mobject's z Point3D to the value of z_index.

shift

Shift by the given vectors.

shift_onto_screen

show

shuffle

Shuffles the list of submobjects.

shuffle_submobjects

Shuffles the order of submobjects

sort

Sorts the list of submobjects by a function defined by submob_func.

sort_submobjects

Sort the submobjects

space_out_submobjects

split

stretch

stretch_about_point

stretch_to_fit_depth

Stretches the Mobject to fit a depth, not keeping width/height proportional.

stretch_to_fit_height

Stretches the Mobject to fit a height, not keeping width/depth proportional.

stretch_to_fit_width

Stretches the Mobject to fit a width, not keeping height/depth proportional.

surround

suspend_updating

Disable updating from updaters and animations.

throw_error_if_no_points

to_corner

Moves this Mobject to the given corner of the screen.

to_edge

Moves this Mobject to the given edge of the screen, without affecting its position in the other dimension.

to_original_color

update

Apply all updaters.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

Initializes animation overrides marked with the override_animation() decorator.

None

Check that all submobjects are actually instances of Mobject, and that none of them is self (a Mobject cannot contain itself).

This is an auxiliary function called when adding Mobjects to the submobjects list.

This function is intended to be overridden by subclasses such as VMobject, which should assert that only other VMobjects may be added into it.

submobjects (Iterable[Mobject]) – The list containing values to validate.

The Mobject itself.

Mobject

TypeError – If any of the values in submobjects is not a Mobject.

ValueError – If there was an attempt to add a Mobject as its own submobject.

Add mobjects as submobjects.

The mobjects are added to submobjects.

Subclasses of mobject may implement + and += dunder methods.

mobjects (Mobject) – The mobjects to add.

self

Mobject

ValueError – When a mobject tries to add itself.

TypeError – When trying to add an object that is not an instance of Mobject.

Notes

A mobject cannot contain itself, and it cannot contain a submobject more than once. If the parent mobject is displayed, the newly-added submobjects will also be displayed (i.e. they are automatically added to the parent Scene).

See also

remove(), add_to_back()

Examples

Duplicates are not added again:

Only Mobjects can be added:

Adding an object to itself raises an error:

A given mobject cannot be added as a submobject twice to some parent:

Add an animation override.

This does not apply to subclasses.

animation_class (type[Animation]) – The animation type to be overridden

override_func (FunctionOverride) – The function returning an animation replacing the default animation. It gets passed the parameters given to the animation constructor.

MultiAnimationOverrideException – If the overridden animation was already overridden.

None

Add a BackgroundRectangle as submobject.

The BackgroundRectangle is added behind other submobjects.

This can be used to increase the mobjects visibility in front of a noisy background.

color (ParsableManimColor | None) – The color of the BackgroundRectangle

opacity (float) – The opacity of the BackgroundRectangle

kwargs – Additional keyword arguments passed to the BackgroundRectangle constructor

self

Mobject

See also

add_to_back(), BackgroundRectangle

Add all passed mobjects to the back of the submobjects.

If submobjects already contains the given mobjects, they just get moved to the back instead.

mobjects (Mobject) – The mobjects to add.

self

Mobject

Note

Technically, this is done by adding (or moving) the mobjects to the head of submobjects. The head of this list is rendered first, which places the corresponding mobjects behind the subsequent list members.

ValueError – When a mobject tries to add itself.

TypeError – When trying to add an object that is not an instance of Mobject.

mobjects (Mobject)

Self

Notes

A mobject cannot contain itself, and it cannot contain a submobject more than once. If the parent mobject is displayed, the newly-added submobjects will also be displayed (i.e. they are automatically added to the parent Scene).

See also

remove(), add()

Add an update function to this mobject.

Update functions, or updaters in short, are functions that are applied to the Mobject in every frame.

update_function (Updater) – The update function to be added. Whenever update() is called, this update function gets called using self as the first parameter. The updater can have a second parameter dt. If it uses this parameter, it gets called using a second value dt, usually representing the time in seconds since the last call of update().

index (int | None) – The index at which the new updater should be added in self.updaters. In case index is None the updater will be added at the end.

call_updater (bool) – Whether or not to call the updater initially. If True, the updater will be called using dt=0.

self

Mobject

Examples

Example: NextToUpdater ¶

Example: DtUpdater ¶

See also

get_updaters(), remove_updater(), UpdateFromFunc

Aligns the data of this mobject with another mobject.

Afterwards, the two mobjects will have the same number of submobjects (see align_submobjects()), the same parent structure (see null_point_align()). If skip_point_alignment is false, they will also have the same number of points (see align_points()).

mobject (Mobject) – The other mobject this mobject should be aligned to.

skip_point_alignment (bool) – Controls whether or not the computationally expensive point alignment is skipped (default: False).

None

Direction just needs to be a vector pointing towards side or corner in the 2d plane.

direction (Vector3D)

buff (float)

Self

Aligns mobject to another Mobject in a certain direction.

Examples: mob1.align_to(mob2, UP) moves mob1 vertically so that its top edge lines ups with mob2’s top edge.

mobject_or_point (Mobject | Point3DLike)

direction (Vector3D)

Self

Used to animate the application of any method of self.

Any method called on animate is converted to an animation of applying that method on the mobject itself.

For example, square.set_fill(WHITE) sets the fill color of a square, while square.animate.set_fill(WHITE) animates this action.

Multiple methods can be put in a single animation once via chaining:

Warning

Passing multiple animations for the same Mobject in one call to play() is discouraged and will most likely not work properly. Instead of writing an animation like

make use of method chaining.

Keyword arguments that can be passed to Scene.play() can be passed directly after accessing .animate, like so:

This is especially useful when animating simultaneous .animate calls that you want to behave differently:

See also

override_animate()

Examples

Example: AnimateExample ¶

Example: AnimateChainExample ¶

Example: AnimateWithArgsExample ¶

Warning

will interpolate the Mobject between its points prior to .animate and its points after applying .animate to it. This may result in unexpected behavior when attempting to interpolate along paths, or rotations. If you want animations to consider the points between, consider using ValueTracker with updaters instead.

Returns the function defining a specific animation override for this class.

animation_class (type[Animation]) – The animation class for which the override function should be returned.

The function returning the override animation or None if no such animation override is defined.

Optional[Callable[[Mobject, …], Animation]]

Applies a complex function to a Mobject. The x and y Point3Ds correspond to the real and imaginary parts respectively.

Example

Example: ApplyFuncExample ¶

function (Callable[[complex], complex])

Self

Apply a function to self and every submobject with points recursively.

func (Callable[[Mobject], None]) – The function to apply to each mobject. func gets passed the respective (sub)mobject as parameter.

self

Mobject

See also

family_members_with_points()

Sorts Mobject next to each other on screen.

Examples

Example: Example ¶

direction (Vector3D)

buff (float)

center (bool)

Self

Arrange submobjects in a grid.

rows (int | None) – The number of rows in the grid.

cols (int | None) – The number of columns in the grid.

buff (float | tuple[float, float]) – The gap between grid cells. To specify a different buffer in the horizontal and vertical directions, a tuple of two values can be given - (row, col).

cell_alignment (Vector3D) – The way each submobject is aligned in its grid cell.

row_alignments (str | None) – The vertical alignment for each row (top to bottom). Accepts the following characters: "u" - up, "c" - center, "d" - down.

col_alignments (str | None) – The horizontal alignment for each column (left to right). Accepts the following characters "l" - left, "c" - center, "r" - right.

row_heights (Iterable[float | None] | None) – Defines a list of heights for certain rows (top to bottom). If the list contains None, the corresponding row will fit its height automatically based on the highest element in that row.

col_widths (Iterable[float | None] | None) – Defines a list of widths for certain columns (left to right). If the list contains None, the corresponding column will fit its width automatically based on the widest element in that column.

flow_order (str) – The order in which submobjects fill the grid. Can be one of the following values: “rd”, “dr”, “ld”, “dl”, “ru”, “ur”, “lu”, “ul”. (“rd” -> fill rightwards then downwards)

self

Mobject

ValueError – If rows and cols are too small to fit all submobjects.

ValueError – If cols, col_alignments and col_widths or rows, row_alignments and row_heights have mismatching sizes.

Notes

If only one of cols and rows is set implicitly, the other one will be chosen big enough to fit all submobjects. If neither is set, they will be chosen to be about the same, tending towards cols > rows (simply because videos are wider than they are high).

If both cell_alignment and row_alignments / col_alignments are defined, the latter has higher priority.

Examples

Example: ExampleBoxes ¶

Example: ArrangeInGrid ¶

Arrange the position of submobjects with a small buffer.

Examples

Example: ArrangeSumobjectsExample ¶

Self

Edit points, colors and submobjects to be identical to another Mobject

Note

If both match_height and match_width are True then the transformed Mobject will match the height first and then the width.

match_height (bool) – Whether or not to preserve the height of the original Mobject.

match_width (bool) – Whether or not to preserve the width of the original Mobject.

match_depth (bool) – Whether or not to preserve the depth of the original Mobject.

match_center (bool) – Whether or not to preserve the center of the original Mobject.

stretch (bool) – Whether or not to stretch the target mobject to match the the proportions of the original Mobject.

mobject (Mobject)

Self

Examples

Example: BecomeScene ¶

The following examples illustrate how mobject measurements change when using the match_... and stretch arguments. We start with a rectangle that is 2 units high and 4 units wide, which we want to turn into a circle of radius 3:

With stretch=True, the target circle is deformed to match the proportions of the rectangle, which results in the target mobject being an ellipse with height 2 and width 4. We can check that the resulting points satisfy the ellipse equation \(x^2/a^2 + y^2/b^2 = 1\) with \(a = 4/2\) and \(b = 2/2\) being the semi-axes:

With match_height=True and match_width=True the circle is scaled such that the height or the width of the rectangle will be preserved, respectively. The points of the resulting mobject satisfy the circle equation \(x^2 + y^2 = r^2\) for the corresponding radius \(r\):

With match_center=True, the resulting mobject is moved such that its center is the same as the center of the original mobject:

Moves the center of the mobject to the center of the scene.

The centered mobject.

Mobject

Remove every updater.

recursive (bool) – Whether to recursively call clear_updaters on all submobjects.

self

Mobject

See also

remove_updater(), add_updater(), get_updaters()

Create and return an identical copy of the Mobject including all submobjects.

The copy.

Mobject

Note

The clone is initially not visible in the Scene, even if the original was.

The depth of the mobject.

float

See also

length_over_dim()

Flips/Mirrors an mobject about its center.

Examples

Example: FlipExample ¶

axis (Vector3D)

Self

Initializes points and therefore the shape.

Gets called upon creation. This is an empty method that can be implemented by subclasses.

object

Return all points from this mobject and all submobjects.

May contain duplicates; the order is in a depth-first (pre-order) traversal of the submobjects.

Point3D_Array

Get bottom Point3Ds of a box bounding the Mobject

Point3D

Get center Point3Ds

Point3D

Returns the color of the Mobject

Examples

ManimColor

Meant to generalize get_x, get_y and get_z

dim (int)

direction (Vector3D)

Get corner Point3Ds for certain direction.

direction (Vector3D)

Point3D

Picture a box bounding the Mobject. Such a box has 9 ‘critical points’: 4 corners, 4 edge center, the center. This returns one of them, along the given direction.

direction (Vector3D)

Point3D

Get edge Point3Ds for certain direction.

direction (Vector3D)

Point3D

Returns the point, where the stroke that surrounds the Mobject ends.

Point3D

Get left Point3Ds of a box bounding the Mobject

Point3D

Return all of a given attribute from this mobject and all submobjects.

May contain duplicates; the order is in a depth-first (pre-order) traversal of the submobjects.

array_attr (str)

ndarray

Get Point3Ds of the middle of the path that forms the Mobject.

Examples

Example: AngleMidPoint ¶

Point3D

Return the base class of this mobject type.

type[Mobject]

Get nadir (opposite the zenith) Point3Ds of a box bounding a 3D Mobject.

Point3D

The simplest Mobject to be transformed to or from self. Should by a point of the appropriate type

Get right Point3Ds of a box bounding the Mobject

Point3D

Returns the point, where the stroke that surrounds the Mobject starts.

Point3D

Returns starting and ending point of a stroke as a tuple.

tuple[Point3D, Point3D]

Return all updaters using the dt parameter.

The updaters use this parameter as the input for difference in time.

The list of time based updaters.

List[Callable]

See also

get_updaters(), has_time_based_updater()

Get top Point3Ds of a box bounding the Mobject

Point3D

Return all updaters.

The list of updaters.

List[Callable]

See also

add_updater(), get_time_based_updaters()

Returns x Point3D of the center of the Mobject as float

direction (Vector3D)

float

Returns y Point3D of the center of the Mobject as float

direction (Vector3D)

float

Returns z Point3D of the center of the Mobject as float

direction (Vector3D)

float

Get zenith Point3Ds of a box bounding a 3D Mobject.

Point3D

Check if Mobject does not contains points.

bool

Check if Mobject contains points.

bool

Test if self has a time based updater.

True if at least one updater uses the dt parameter, False otherwise.

bool

See also

get_time_based_updaters()

The height of the mobject.

float

Examples

Example: HeightExample ¶

See also

length_over_dim()

Initializes the colors.

Gets called upon creation. This is an empty method that can be implemented by subclasses.

object

Inserts a mobject at a specific position into self.submobjects

Effectively just calls self.submobjects.insert(index, mobject), where self.submobjects is a list.

Highly adapted from Mobject.add.

index (int) – The index at which

mobject (Mobject) – The mobject to be inserted.

None

Turns this Mobject into an interpolation between mobject1 and mobject2.

Examples

Example: DotInterpolation ¶

mobject1 (Mobject)

mobject2 (Mobject)

alpha (float)

path_func (PathFuncType)

Self

Inverts the list of submobjects.

recursive (bool) – If True, all submobject lists of this mobject’s family are inverted.

None

Examples

Example: InvertSumobjectsExample ¶

Measure the length of an Mobject in a certain direction.

dim (int)

float

Match the color with the color of another Mobject.

mobject (Mobject)

Self

Match the Point3Ds with the Point3Ds of another Mobject.

mobject (Mobject)

dim (int)

direction (Vector3D)

Self

Match the depth with the depth of another Mobject.

mobject (Mobject)

Self

Match the specified dimension with the dimension of another Mobject.

mobject (Mobject)

dim (int)

Self

Match the height with the height of another Mobject.

mobject (Mobject)

Self

Edit points, positions, and submobjects to be identical to another Mobject, while keeping the style unchanged.

Examples

Example: MatchPointsScene ¶

mobject (Mobject)

copy_submobjects (bool)

Self

Match the updaters of the given mobject.

mobject (Mobject) – The mobject whose updaters get matched.

self

Mobject

Note

All updaters from submobjects are removed, but only updaters of the given mobject are matched, not those of it’s submobjects.

See also

add_updater(), clear_updaters()

Match the width with the width of another Mobject.

mobject (Mobject)

Self

Match x coord. to the x coord. of another Mobject.

mobject (Mobject)

Self

Match y coord. to the x coord. of another Mobject.

mobject (Mobject)

Self

Match z coord. to the x coord. of another Mobject.

mobject (Mobject)

Self

Move center of the Mobject to certain Point3D.

point_or_mobject (Point3DLike | Mobject)

aligned_edge (Vector3D)

coor_mask (Vector3D)

Self

Move this Mobject next to another’s Mobject or Point3D.

Examples

Example: GeometricShapes ¶

mobject_or_point (Mobject | Point3DLike)

direction (Vector3D)

buff (float)

aligned_edge (Vector3D)

submobject_to_align (Mobject | None)

index_of_submobject_to_align (int | None)

coor_mask (Vector3D)

Self

If a Mobject with points is being aligned to one without, treat both as groups, and push the one with points into its own submobjects list.

self

Mobject

mobject (Mobject)

Find the min or max value from a dimension across all points in this and submobjects.

reduce_func (Callable)

dim (int)

Remove submobjects.

The mobjects are removed from submobjects, if they exist.

Subclasses of mobject may implement - and -= dunder methods.

mobjects (Mobject) – The mobjects to remove.

self

Mobject

See also

add()

Remove an updater.

If the same updater is applied multiple times, every instance gets removed.

update_function (Updater) – The update function to be removed.

self

Mobject

See also

clear_updaters(), add_updater(), get_updaters()

This can make transition animations nicer

count (int)

Self

Sets points to be an empty array.

None

Restores the state that was previously saved with save_state().

Self

Enable updating from updaters and animations.

recursive (bool) – Whether to recursively enable updating on all submobjects.

self

Mobject

See also

suspend_updating(), add_updater()

Rotates the Mobject about a certain point.

angle (float)

axis (Vector3D)

about_point (Point3DLike | None)

Self

Rotates the Mobject about the ORIGIN, which is at [0,0,0].

angle (float)

axis (Vector3D)

Self

Saves an image of only this Mobject at its position to a png file.

name (str | None)

None

Save the current state (position, color & size). Can be restored with restore().

Self

Scale the size by a factor.

Default behavior is to scale about the center of the mobject.

scale_factor (float) – The scaling factor \(\alpha\). If \(0 < |\alpha| < 1\), the mobject will shrink, and for \(|\alpha| > 1\) it will grow. Furthermore, if \(\alpha < 0\), the mobject is also flipped.

kwargs – Additional keyword arguments passed to apply_points_function_about_point().

self

Mobject

Examples

Example: MobjectScaleExample ¶

See also

move_to()

Scales the Mobject to fit a depth while keeping width/height proportional.

depth (float)

Self

Scales the Mobject to fit a height while keeping width/depth proportional.

self

Mobject

height (float)

Examples

Scales the Mobject to fit a width while keeping height/depth proportional.

self

Mobject

width (float)

Examples

Sets attributes.

I.e. my_mobject.set(foo=1) applies my_mobject.foo = 1.

This is a convenience to be used along with animate to animate setting attributes.

In addition to this method, there is a compatibility layer that allows get_* and set_* methods to get and set generic attributes. For instance:

This compatibility layer does not interfere with any get_* or set_* methods that are explicitly defined.

Warning

This compatibility layer is for backwards compatibility and is not guaranteed to stay around. Where applicable, please prefer getting/setting attributes normally or with the set() method.

**kwargs – The attributes and corresponding values to set.

self

Mobject

Examples

Condition is function which takes in one arguments, (x, y, z). Here it just recurses to submobjects, but in subclasses this should be further implemented based on the the inner workings of color

color (ParsableManimColor)

family (bool)

Self

colors (ParsableManimColor) – The colors to use for the gradient. Use like set_color_by_gradient(RED, BLUE, GREEN).

ManimColor.parse(color) (self.color =)

self (return)

Self

Sets the default values of keyword arguments.

If this method is called without any additional keyword arguments, the original default values of the initialization method of this class are restored.

kwargs – Passing any keyword argument will update the default values of the keyword arguments of the initialization function of this class.

None

Examples

Example: ChangedDefaultTextcolor ¶

Set x value of the center of the Mobject (int or float)

x (float)

direction (Vector3D)

Self

Set y value of the center of the Mobject (int or float)

y (float)

direction (Vector3D)

Self

Set z value of the center of the Mobject (int or float)

z (float)

direction (Vector3D)

Self

Sets the Mobject’s z_index to the value specified in z_index_value.

z_index_value (float) – The new value of z_index set.

family (bool) – If True, the z_index value of all submobjects is also set.

The Mobject itself, after z_index is set. For chaining purposes. (Returns self.)

Mobject

Examples

Example: SetZIndex ¶

Sets the Mobject’s z Point3D to the value of z_index.

The Mobject itself, after z_index is set. (Returns self.)

Mobject

Shift by the given vectors.

vectors (Vector3D) – Vectors to shift by. If multiple vectors are given, they are added together.

self

Mobject

See also

move_to()

Shuffles the list of submobjects.

recursive (bool)

None

Shuffles the order of submobjects

Examples

Example: ShuffleSubmobjectsExample ¶

None

Sorts the list of submobjects by a function defined by submob_func.

point_to_num_func (Callable[[Point3DLike], float])

submob_func (Callable[[Mobject], Any] | None)

Self

Sort the submobjects

Self

Stretches the Mobject to fit a depth, not keeping width/height proportional.

depth (float)

Self

Stretches the Mobject to fit a height, not keeping width/depth proportional.

self

Mobject

height (float)

Examples

Stretches the Mobject to fit a width, not keeping height/depth proportional.

self

Mobject

width (float)

Examples

Disable updating from updaters and animations.

recursive (bool) – Whether to recursively suspend updating on all submobjects.

self

Mobject

See also

resume_updating(), add_updater()

Moves this Mobject to the given corner of the screen.

The newly positioned mobject.

Mobject

corner (Vector3D)

buff (float)

Examples

Example: ToCornerExample ¶

Moves this Mobject to the given edge of the screen, without affecting its position in the other dimension.

The newly positioned mobject.

Mobject

edge (Vector3D)

buff (float)

Examples

Example: ToEdgeExample ¶

Apply all updaters.

Does nothing if updating is suspended.

dt (float) – The parameter dt to pass to the update functions. Usually this is the time in seconds since the last call of update.

recursive (bool) – Whether to recursively update all submobjects.

self

Mobject

See also

add_updater(), get_updaters()

The width of the mobject.

float

Examples

Example: WidthExample ¶

See also

length_over_dim()


---

# cameras.html

# Cameras¶

camera

A camera converts the mobjects contained in a Scene into an array of pixels.

mapping_camera

A camera that allows mapping between objects.

moving_camera

A camera able to move through a scene.

multi_camera

A camera supporting multiple perspectives.

three_d_camera

A camera that can be positioned and oriented in three-dimensional space.


---

# manim.typing.html

# typing¶

### Primitive data types¶

### Color types¶

### Point types¶

### Vector types¶

### Matrix types¶

### Bézier types¶

### Function types¶

### Image types¶

### Path types¶

```python
'''
[CATEGORY]
<category_name>
'''
```

```python
np.float64
```

```python
np.int64
```

```python
tuple[float, float, float]
```

```python
tuple[int, int, int]
```

```python
tuple[float, float, float, float]
```

```python
tuple[int, int, int, int]
```

```python
Callable
```

```python
str | PathLike[str]
```

```python
str | bytes | PathLike[str] | PathLike[bytes]
```

Custom type definitions used in Manim.

Note for developers

Around the source code there are multiple strings which look like this:

All type aliases defined under those strings will be automatically classified under that category.

If you need to define a new category, respect the format described above.

Type Aliases

A double-precision floating-point value (64 bits, or 8 bytes), according to the IEEE 754 standard.

A long integer (64 bits, or 8 bytes).

It can take values between \(-2^{63}\) and \(+2^{63} - 1\), which expressed in base 10 is a range between around \(-9.223 \cdot 10^{18}\) and \(+9.223 \cdot 10^{18}\).

Data type used in ManimColorInternal: a double-precision float between 0 and 1.

shape: (3,)

A numpy.ndarray of 3 floats between 0 and 1, representing a color in RGB format.

Its components describe, in order, the intensity of Red, Green, and Blue in the represented color.

shape: (3,)

A tuple of 3 floats between 0 and 1, representing a color in RGB format.

Its components describe, in order, the intensity of Red, Green, and Blue in the represented color.

shape: (3,)

A numpy.ndarray of 3 integers between 0 and 255, representing a color in RGB format.

Its components describe, in order, the intensity of Red, Green, and Blue in the represented color.

shape: (3,)

A tuple of 3 integers between 0 and 255, representing a color in RGB format.

Its components describe, in order, the intensity of Red, Green, and Blue in the represented color.

shape: (4,)

A numpy.ndarray of 4 floats between 0 and 1, representing a color in RGBA format.

Its components describe, in order, the intensity of Red, Green, Blue and Alpha (opacity) in the represented color.

shape: (4,)

A tuple of 4 floats between 0 and 1, representing a color in RGBA format.

Its components describe, in order, the intensity of Red, Green, Blue and Alpha (opacity) in the represented color.

shape: (4,)

A numpy.ndarray of 4 integers between 0 and 255, representing a color in RGBA format.

Its components describe, in order, the intensity of Red, Green, Blue and Alpha (opacity) in the represented color.

shape: (4,)

A tuple of 4 integers between 0 and 255, representing a color in RGBA format.

Its components describe, in order, the intensity of Red, Green, Blue and Alpha (opacity) in the represented color.

shape: (3,)

A numpy.ndarray of 3 floats between 0 and 1, representing a color in HSV (or HSB) format.

Its components describe, in order, the Hue, Saturation and Value (or Brightness) in the represented color.

shape: (3,)

A tuple of 3 floats between 0 and 1, representing a color in HSV (or HSB) format.

Its components describe, in order, the Hue, Saturation and Value (or Brightness) in the represented color.

shape: (4,)

A numpy.ndarray of 4 floats between 0 and 1, representing a color in HSVA (or HSBA) format.

Its components describe, in order, the Hue, Saturation and Value (or Brightness) in the represented color.

shape: (4,)

A tuple of 4 floats between 0 and 1, representing a color in HSVA (or HSBA) format.

Its components describe, in order, the Hue, Saturation and Value (or Brightness) in the represented color.

shape: (3,)

A numpy.ndarray of 3 floats between 0 and 1, representing a color in HSL format.

Its components describe, in order, the Hue, Saturation and Lightness in the represented color.

shape: (3,)

A numpy.ndarray of 3 floats between 0 and 1, representing a color in HSL format.

Its components describe, in order, the Hue, Saturation and Lightness in the represented color.

shape: (4,)

Internal color representation used by ManimColor, following the RGBA format.

It is a numpy.ndarray consisting of 4 floats between 0 and 1, describing respectively the intensities of Red, Green, Blue and Alpha (opacity) in the represented color.

Default type for arrays representing points: a double-precision floating point value.

shape: (2,)

A NumPy array representing a 2-dimensional point: [float, float].

shape: (2,)

A 2-dimensional point: [float, float].

This represents anything which can be converted to a :class:Point2D NumPy array.

Normally, a function or method which expects a Point2D as a parameter can handle being passed a Point3D instead.

shape: (M, 2)

A NumPy array representing a sequence of Point2D objects: [[float, float], ...].

shape: (M, 2)

An array of Point2DLike objects: [[float, float], ...].

This represents anything which can be converted to a :class:Point2D_Array NumPy array.

Normally, a function or method which expects a Point2D_Array as a parameter can handle being passed a Point3D_Array instead.

Please refer to the documentation of the function you are using for further type information.

shape: (3,)

A NumPy array representing a 3-dimensional point: [float, float, float].

shape: (3,)

A 3-dimensional point: [float, float, float].

This represents anything which can be converted to a :class:Point3D NumPy array.

shape: (M, 3)

A NumPy array representing a sequence of Point3D objects: [[float, float, float], ...].

shape: (M, 3)

An array of Point3D objects: [[float, float, float], ...].

This represents anything which can be converted to a :class:Point3D_Array NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (N,)

A NumPy array representing an N-dimensional point: [float, ...].

shape: (N,)

An N-dimensional point: [float, ...].

This represents anything which can be converted to a :class:PointND NumPy array.

shape: (M, N)

A NumPy array representing a sequence of PointND objects: [[float, ...], ...].

shape: (M, N)

An array of PointND objects: [[float, ...], ...].

This represents anything which can be converted to a :class:PointND_Array NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (2,)

A 2-dimensional vector: [float, float].

Normally, a function or method which expects a Vector2D as a parameter can handle being passed a Vector3D instead.

Caution

Do not confuse with the Vector or Arrow VMobjects!

shape: (M, 2)

An array of Vector2D objects: [[float, float], ...].

Normally, a function or method which expects a Vector2D_Array as a parameter can handle being passed a Vector3D_Array instead.

shape: (3,)

A 3-dimensional vector: [float, float, float].

Caution

Do not confuse with the Vector or Arrow3D VMobjects!

shape: (M, 3)

An array of Vector3D objects: [[float, float, float], ...].

shape (N,)

An \(N\)-dimensional vector: [float, ...].

Caution

Do not confuse with the Vector VMobject! This type alias is named “VectorND” instead of “Vector” to avoid potential name collisions.

shape (M, N)

An array of VectorND objects: [[float, ...], ...].

shape: (1, N)

A row vector: [[float, ...]].

shape: (N, 1)

A column vector: [[float], [float], ...].

shape: (M, N)

A matrix: [[float, ...], [float, ...], ...].

shape: (M, N)

A MatrixMN filled with zeros, typically created with numpy.zeros((M, N)).

shape: (3, 3)

A Point3D_Array of three 3D control points for a single quadratic Bézier curve: [[float, float, float], [float, float, float], [float, float, float]].

shape: (3, 3)

A Point3DLike_Array of three 3D control points for a single quadratic Bézier curve: [[float, float, float], [float, float, float], [float, float, float]].

This represents anything which can be converted to a :class:QuadraticBezierPoints NumPy array.

shape: (N, 3, 3)

A NumPy array containing \(N\) QuadraticBezierPoints objects: [[[float, float, float], [float, float, float], [float, float, float]], ...].

shape: (N, 3, 3)

A sequence of \(N\) QuadraticBezierPointsLike objects: [[[float, float, float], [float, float, float], [float, float, float]], ...].

This represents anything which can be converted to a :class:QuadraticBezierPoints_Array NumPy array.

shape: (3*N, 3)

A Point3D_Array of \(3N\) points, where each one of the \(N\) consecutive blocks of 3 points represents a quadratic Bézier curve: [[float, float, float], ...], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (3*N, 3)

A Point3DLike_Array of \(3N\) points, where each one of the \(N\) consecutive blocks of 3 points represents a quadratic Bézier curve: [[float, float, float], ...], ...].

This represents anything which can be converted to a :class:QuadraticBezierPath NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (3*N, 3)

A special case of QuadraticBezierPath where all the \(N\) quadratic Bézier curves are connected, forming a quadratic spline: [[float, float, float], ...], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (3*N, 3)

A special case of QuadraticBezierPathLike where all the \(N\) quadratic Bézier curves are connected, forming a quadratic spline: [[float, float, float], ...], ...].

This represents anything which can be converted to a :class:QuadraticSpline NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (4, 3)

A Point3D_Array of four 3D control points for a single cubic Bézier curve: [[float, float, float], [float, float, float], [float, float, float], [float, float, float]].

shape: (4, 3)

A Point3DLike_Array of 4 control points for a single cubic Bézier curve: [[float, float, float], [float, float, float], [float, float, float], [float, float, float]].

This represents anything which can be converted to a :class:CubicBezierPoints NumPy array.

shape: (N, 4, 3)

A NumPy array containing \(N\) CubicBezierPoints objects: [[[float, float, float], [float, float, float], [float, float, float], [float, float, float]], ...].

shape: (N, 4, 3)

A sequence of \(N\) CubicBezierPointsLike objects: [[[float, float, float], [float, float, float], [float, float, float], [float, float, float]], ...].

This represents anything which can be converted to a :class:CubicBezierPoints_Array NumPy array.

shape: (4*N, 3)

A Point3D_Array of \(4N\) points, where each one of the \(N\) consecutive blocks of 4 points represents a cubic Bézier curve: [[float, float, float], ...], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (4*N, 3)

A Point3DLike_Array of \(4N\) points, where each one of the \(N\) consecutive blocks of 4 points represents a cubic Bézier curve: [[float, float, float], ...], ...].

This represents anything which can be converted to a :class:CubicBezierPath NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (4*N, 3)

A special case of CubicBezierPath where all the \(N\) cubic Bézier curves are connected, forming a quadratic spline: [[float, float, float], ...], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (4*N, 3)

A special case of CubicBezierPath where all the \(N\) cubic Bézier curves are connected, forming a quadratic spline: [[float, float, float], ...], ...].

This represents anything which can be converted to a :class:CubicSpline NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (PPC, 3)

A Point3D_Array of \(\text{PPC}\) control points (\(\text{PPC: Points Per Curve} = n + 1\)) for a single \(n\)-th degree Bézier curve: [[float, float, float], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (PPC, 3)

A Point3DLike_Array of \(\text{PPC}\) control points (\(\text{PPC: Points Per Curve} = n + 1\)) for a single \(n\)-th degree Bézier curve: [[float, float, float], ...].

This represents anything which can be converted to a :class:BezierPoints NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (N, PPC, 3)

A NumPy array of \(N\) BezierPoints objects containing \(\text{PPC}\) Point3D objects each (\(\text{PPC: Points Per Curve} = n + 1\)): [[[float, float, float], ...], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (N, PPC, 3)

A sequence of \(N\) BezierPointsLike objects containing \(\text{PPC}\) Point3DLike objects each (\(\text{PPC: Points Per Curve} = n + 1\)): [[[float, float, float], ...], ...].

This represents anything which can be converted to a :class:BezierPoints_Array NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (PPC*N, 3)

A Point3D_Array of \(\text{PPC} \cdot N\) points, where each one of the \(N\) consecutive blocks of \(\text{PPC}\) control points (\(\text{PPC: Points Per Curve} = n + 1\)) represents a Bézier curve of \(n\)-th degree: [[float, float, float], ...], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (PPC*N, 3)

A Point3DLike_Array of \(\text{PPC} \cdot N\) points, where each one of the \(N\) consecutive blocks of \(\text{PPC}\) control points (\(\text{PPC: Points Per Curve} = n + 1\)) represents a Bézier curve of \(n\)-th degree: [[float, float, float], ...], ...].

This represents anything which can be converted to a :class:BezierPath NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (PPC*N, 3)

A special case of BezierPath where all the \(N\) Bézier curves consisting of \(\text{PPC}\) Point3D objects (\(\text{PPC: Points Per Curve} = n + 1\)) are connected, forming an \(n\)-th degree spline: [[float, float, float], ...], ...].

Please refer to the documentation of the function you are using for further type information.

shape: (PPC*N, 3)

A special case of BezierPathLike where all the \(N\) Bézier curves consisting of \(\text{PPC}\) Point3D objects (\(\text{PPC: Points Per Curve} = n + 1\)) are connected, forming an \(n\)-th degree spline: [[float, float, float], ...], ...].

This represents anything which can be converted to a :class:Spline NumPy array.

Please refer to the documentation of the function you are using for further type information.

shape: (3*PPC*N,)

A flattened array of Bézier control points: [float, ...].

Function type returning an Animation for the specified Mobject.

Function mapping two :class:Point3D objects and an alpha value to a new :class:Point3D.

A function mapping a :class:Point3D to another :class:Point3D.

A function mapping a :class:Point3D_Array to another :class:Point3D_Array.

shape: (height, width) | (height, width, 3) | (height, width, 4)

A rasterized image with a height of height pixels and a width of width pixels.

Every value in the array is an integer from 0 to 255.

Every pixel is represented either by a single integer indicating its lightness (for greyscale images), an RGB_Array_Int or an RGBA_Array_Int.

shape: (height, width)

A 100% opaque grayscale PixelArray, where every pixel value is a ManimInt indicating its lightness (black -> gray -> white).

shape: (height, width, 3)

A 100% opaque PixelArray in color, where every pixel value is an RGB_Array_Int object.

shape: (height, width, 4)

A PixelArray in color where pixels can be transparent. Every pixel value is an RGBA_Array_Int object.

A string or os.PathLike representing a path to a directory or file.

A string, bytes or os.PathLike object representing a path to a directory or file.


---

# manim.animation.composition.LaggedStartMap.html

# LaggedStartMap¶

```python
from manim import *

class LaggedStartMapExample(Scene):
    def construct(self):
        title = Tex("LaggedStartMap").to_edge(UP, buff=LARGE_BUFF)
        dots = VGroup(
            *[Dot(radius=0.16) for _ in range(35)]
            ).arrange_in_grid(rows=5, cols=7, buff=MED_LARGE_BUFF)
        self.add(dots, title)

        # Animate yellow ripple effect
        for mob in dots, title:
            self.play(LaggedStartMap(
                ApplyMethod, mob,
                lambda m : (m.set_color, YELLOW),
                lag_ratio = 0.1,
                rate_func = there_and_back,
                run_time = 2
            ))
```

Qualified name: manim.animation.composition.LaggedStartMap

Bases: LaggedStart

Plays a series of Animation while mapping a function to submobjects.

AnimationClass (Callable[..., Animation]) – Animation to apply to mobject.

mobject (Mobject) – Mobject whose submobjects the animation, and optionally the function, are to be applied.

arg_creator (Callable[[Mobject], str]) – Function which will be applied to Mobject.

run_time (float) – The duration of the animation in seconds.

Examples

Example: LaggedStartMapExample ¶

Methods

Attributes

run_time

Initialize self. See help(type(self)) for accurate signature.

AnimationClass (Callable[[...], Animation])

mobject (Mobject)

arg_creator (Callable[[Mobject], str])

run_time (float)

None


---

# manim.scene.zoomed_scene.html

# zoomed_scene¶

```python
from manim import *

class UseZoomedScene(ZoomedScene):
    def construct(self):
        dot = Dot().set_color(GREEN)
        self.add(dot)
        self.wait(1)
        self.activate_zooming(animate=False)
        self.wait(1)
        self.play(dot.animate.shift(LEFT))
```

```python
from manim import *

class ChangingZoomScale(ZoomedScene):
    def __init__(self, **kwargs):
        ZoomedScene.__init__(
            self,
            zoom_factor=0.3,
            zoomed_display_height=1,
            zoomed_display_width=3,
            image_frame_stroke_width=20,
            zoomed_camera_config={
                "default_frame_stroke_width": 3,
            },
            **kwargs
        )

    def construct(self):
        dot = Dot().set_color(GREEN)
        sq = Circle(fill_opacity=1, radius=0.2).next_to(dot, RIGHT)
        self.add(dot, sq)
        self.wait(1)
        self.activate_zooming(animate=False)
        self.wait(1)
        self.play(dot.animate.shift(LEFT * 0.3))

        self.play(self.zoomed_camera.frame.animate.scale(4))
        self.play(self.zoomed_camera.frame.animate.shift(0.5 * DOWN))
```

A scene supporting zooming in on a specified section.

Examples

Example: UseZoomedScene ¶

Example: ChangingZoomScale ¶

Classes

ZoomedScene

This is a Scene with special configurations made for when a particular part of the scene must be zoomed in on and displayed separately.


---

# manim.scene.section.html

# section¶

building blocks of segmented video API

Classes

DefaultSectionType

The type of a section can be used for third party applications.

Section

A Scene can be segmented into multiple Sections.


---

