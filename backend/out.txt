from manim import *

class MyScene(Scene):
    def construct(self):
        # Define the axes
        axes = Axes(
            x_range=[-3, 3, 1],
            y_range=[0, 8, 1],
            axis_config={"stroke_color": BLACK, "stroke_width": 1}
        ).move_to(ORIGIN)
        
        # Define the function graph
        exp_func = lambda x: np.exp(x)
        expGraph = axes.plot(
            exp_func,
            x_range=[-2, 2],
            color=BLUE
        )

        # Animate the creation of the axes
        self.play(Create(axes), run_time=2)

        # Animate the drawing of the exponential graph
        self.play(Write(expGraph), run_time=3)

        # Keep axes and graph on the screen
        self.axes = axes
        self.expGraph = expGraph

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Step 1 Elements (Persisting from the previous step)
        axes = Axes(
            x_range=[-5, 5, 1],
            y_range=[0, 8, 1],
            axis_config={"include_numbers": True},
            x_axis_config={"numbers_to_exclude": [0]},  # Ensure 0 is excluded on x-axis
        ).move_to(ORIGIN)

        exp_func = lambda x: np.exp(x)
        expGraph = axes.plot(
            exp_func,
            x_range=[-5, 5],
            color=BLUE,
            stroke_width=3,
        )

        # Step 2 Elements
        baseDot = Dot(axes.coords_to_point(0, exp_func(0)), color=RED)  # Red dot at (0, 1)
        baseLine = DashedLine(
            start=axes.coords_to_point(0, 0),
            end=axes.coords_to_point(0, 8),
            color=GRAY,
            stroke_width=2,
        )  # Dashed line at x = 0

        # Animations
        self.play(Create(baseDot), run_time=1.5)  # Draw baseDot
        self.play(Create(baseLine), run_time=1.5)  # Draw baseLine

        # Keep all elements on screen for the next scene
        self.embed()

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Recreate Axes
        axes = Axes(
            x_range=[-5, 5, 1],
            y_range=[-1, 5, 1],
            axis_config={"include_numbers": True, "numbers_to_exclude": [0]},
            x_axis_config={"numbers_to_include": [-3,3]},
            tips=False,
        )
        self.add(axes)

        # Recreate expGraph
        expGraph = axes.plot(
            lambda x: np.exp(x),
            x_range=[-5, 5],
            color=BLUE,
            stroke_width=3,
        )
        self.add(expGraph)

        # Recreate baseDot
        baseDot = Dot(axes.coords_to_point(0, 1), color=RED, radius=0.1)
        self.add(baseDot)

        # Recreate baseLine
        baseLine = axes.get_vertical_line(
            axes.coords_to_point(0, 1), color=YELLOW, stroke_width=2
        )
        self.add(baseLine)

        # Degree-0 Taylor Approximation (p0Line)
        p0Line = Line(axes.coords_to_point(-3, 1), axes.coords_to_point(3, 1), color=GREEN)
        p0Line.set_z_index(1)  # Ensure it's above the axes

        # Animation: FadeIn p0Line
        self.play(FadeIn(p0Line), run_time=2)

        # Keep all elements
        self.wait(1)

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Constants for graph and axes
        x_start = -5
        x_end = 5
        y_start = -1
        y_end = 8
        graph_color = BLUE
        axes_labels = ["x", "y"]

        # Define the exponential function
        def exp_func(x):
            return np.exp(x)

        # Create and position the axes
        axes = Axes(
            x_range=[x_start, x_end, 1],
            y_range=[y_start, y_end, 1],
            axis_config={"include_numbers": True},
            x_axis_config={"numbers_to_exclude": [0]},
            y_axis_config={"numbers_to_exclude": [0]}
        )
        axes.add_coordinate_labels()
        axes.x_axis.set_numbers_as_superscript()
        axes.y_axis.set_numbers_as_superscript()

        # Create exponential graph
        expGraph = axes.plot(
            exp_func,
            x_range=[x_start, x_end],
            color=graph_color
        ).set_z_index(1)

        # Base point and line for constant approximation
        base_x = 0
        base_y = exp_func(base_x)
        baseDot = Dot(axes.coords_to_point(base_x, base_y), color=RED).set_z_index(2)
        baseLine = DashedLine(
            start=axes.coords_to_point(x_start, base_y),
            end=axes.coords_to_point(x_end, base_y),
            color=YELLOW
        )

        # Linear Taylor approximation graph (p1(x) = 1 + x)
        def linear_approx(x):
            return 1 + x
        p1Graph = axes.plot(
            linear_approx,
            x_range=[-3, 3],
            color=GREEN,
            stroke_dasharray = [3,3]  # Make it dashed
        )

        # Animation
        self.add(axes, expGraph, baseDot, baseLine)
        self.wait(1)
        self.play(ReplacementTransform(baseLine, p1Graph), run_time=2.5)
        self.wait(1)

        # Keep axes, expGraph, baseDot, baseLine, and p1Graph on the screen for the next scene
        self.axes = axes
        self.expGraph = expGraph
        self.baseDot = baseDot
        self.p1Graph = p1Graph

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Constants for the scene
        x_range = [-3, 5, 1]
        y_range = [0, 20, 1]
        axes_labels = {"x_label_decimal_places": 0, "y_label_decimal_places": 0}

        # Define the exponential function
        def exponential_function(x):
            return np.exp(x)

        # Define the degree-1 Taylor approximation function
        def taylor_approximation_degree_1(x, expansion_point=0):
            return 1 + x

        # Define the degree-2 Taylor approximation function
        def taylor_approximation_degree_2(x, expansion_point=0):
            return 1 + x + (x**2)/2

        # Create the axes
        axes = Axes(x_range=x_range, y_range=y_range, axis_config=axes_labels)
        axes.to_default_unit()
        self.add(axes)

        # Create the exponential function graph
        expGraph = axes.plot(lambda x: exponential_function(x), x_range=x_range[:2], color=BLUE)
        self.add(expGraph)

        # Create the base point and line
        baseDot = Dot(axes.coords_to_point(0, 1), color=GREEN)
        self.add(baseDot)

        baseLine = axes.get_vertical_line(axes.coords_to_point(0, 1), color=GREEN)
        self.add(baseLine)

        # Create the degree-1 Taylor approximation graph
        p1Graph = axes.plot(taylor_approximation_degree_1, x_range=x_range[:2], color=RED)
        self.add(p1Graph)

        # Create the degree-2 Taylor approximation graph
        p2Graph = axes.plot(taylor_approximation_degree_2, x_range=x_range[:2], color=PURPLE, stroke_dasharray=[5, 5])

        # Morph from linear to quadratic approximation
        self.play(ReplacementTransform(p1Graph, p2Graph), run_time=3)

        # Keep the objects on screen
        self.wait(1)

---
