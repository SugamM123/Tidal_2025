from manim import *

class MyScene(Scene):
    def construct(self):
        # Step 1: Setting up the coordinate axes and title
        axes = Axes(
            x_range=[-8, 8, 1],
            y_range=[-2.5, 2.5, 1],
            axis_config={"include_numbers": False, "include_ticks": False}
        ).move_to(ORIGIN)  # Centering the axes
        
        title = Tex(
            "Fourier Series: Building a Square Wave",
            font_size=48
        ).to_edge(UP) # Placing the title at the top center

        self.add(axes, title)
        
        # Explanation text (not displayed in the animation)
        explanation = Tex(r"We begin by setting up the coordinate axes and title.",
        r" In a Fourier series, we create a square wave by summing sine waves of different",
        r" frequencies and amplitudes. This scene introduces the base layout.",font_size=30)
        explanation.to_corner(DL)
        self.wait(1) # Add a wait to show setup, but don't play the explanation, to save space

        # Comment explaining the scene components
        # - axes: Coordinate axes spanning x from -8 to 8 and y from -2.5 to 2.5.
        # - title: Title text positioned at the top center of the screen.

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Screen Resolution and Axes
        axes = Axes(
            x_range=[-8, 8, 1],
            y_range=[-2.5, 2.5, 1],
            axis_config={"color": BLUE},
        )
        axes.center()

        # Square Wave Function Definition
        def square_wave(x):
            """
            Defines a piecewise square wave function.
            Equals 1 for x from -pi to pi, and -1 for the remaining segments.
            Extends this periodically to at least one period left and right.
            """
            period = 2 * PI
            x_modified = x % period  # Normalize x to be within one period [0, 2*pi]

            if -PI <= x_modified <= PI:
                return 1
            else:
                return -1

        # Plot the target square wave function in bold red line
        square_wave_graph = axes.plot(
            square_wave,
            x_range=[-3 * PI, 3 * PI, 0.01],  # Extended periodically
            color=RED,
            stroke_width=3, # Make the line bold
        ).move_to(ORIGIN)

        # Add an on-screen caption below the square wave
        caption = Tex("Target Square Wave").next_to(square_wave_graph, DOWN, buff=0.5)

        # Add all elements to the scene
        self.add(axes, square_wave_graph, caption)

        # Explanation: "Here we display the target square wave. Our goal is to approximate this waveform by summing sine waves using the Fourier series."
        explanation = Text(
            "Here we display the target square wave. Our goal is to approximate this waveform by summing sine waves using the Fourier series.",
            font_size=24
        ).to_edge(DOWN)

        self.wait(1) # Short delay before showing the explanation
        self.play(Write(explanation), run_time=3)
        self.wait(2)

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Screen Resolution
        screen_width = 1920
        screen_height = 1080

        # Coordinate axes
        axes = Axes(
            x_range=[-PI, PI, PI / 2],
            y_range=[-1.2, 1.2, 0.5],
            x_length=12,
            y_length=6,
            axis_config={"tip_shape": StealthTip},
        ).add_coordinates()
        self.play(Create(axes), run_time=2)

        # Sine wave plot
        sine_wave = axes.plot(
            lambda x: np.sin(x),
            x_range=[-PI, PI],
            color=BLUE,
            stroke_width=3  # Slightly thicker for clarity
        )
        self.play(Create(sine_wave), run_time=2)

        # Sine wave label
        sine_label = MathTex(r"\text{Fundamental: } \sin(x)", color=BLUE)
        sine_label.next_to(sine_wave, UP, buff=0.1)
        self.play(Write(sine_label), run_time=1)

        # Explanation text
        explanation_text = Text(
            "We start with the fundamental sine wave. In the Fourier series for a square wave, the first term is sin(x), which provides the basic oscillatory behavior but does not match the square shape.",
            color=WHITE,
            font_size=24,
            ).to_edge(DOWN, buff=0.5)

        self.play(Write(explanation_text), run_time=3)

        self.wait(2)

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Screen Resolution
        config.pixel_width = 1920
        config.pixel_height = 1080

        # Coordinate Axes
        axes = Axes(
            x_range=[-PI, PI, PI / 4],
            y_range=[-1.5, 1.5, 0.5],
            axis_config={"color": WHITE, "stroke_width": 2},
            x_axis_config={"numbers_to_include": [-PI, -PI / 2, 0, PI / 2, PI]},
            y_axis_config={"numbers_to_include": [-1.5, -1, -0.5, 0, 0.5, 1, 1.5]}
        )
        x_label = axes.get_x_axis_label("$x$")
        y_label = axes.get_y_axis_label("y")
        axes_group = VGroup(axes, x_label, y_label)
        self.play(Create(axes_group), run_time=2)

        # Fundamental Sine Wave
        fundamental = axes.plot(
            lambda x: np.sin(x), 
            x_range=[-PI, PI], 
            color=BLUE,
            stroke_width=3
        )
        fundamental_label = Tex("sin(x)", color=BLUE).next_to(fundamental, RIGHT)
        self.play(Create(fundamental), Write(fundamental_label), run_time=2)

        # Third Harmonic Sine Wave
        third_harmonic = axes.plot(
            lambda x: (1/3) * np.sin(3*x), 
            x_range=[-PI, PI], 
            color=GREEN,
            stroke_width=3
        )
        third_harmonic_label = Tex("(1/3)sin(3x)", color=GREEN).next_to(third_harmonic, RIGHT)
        self.play(Create(third_harmonic), Write(third_harmonic_label), run_time=2)

        # Sum of Two Waves
        sum_wave = axes.plot(
            lambda x: np.sin(x) + (1/3) * np.sin(3*x),
            x_range=[-PI, PI],
            color=PURPLE,
            stroke_width=5
        )
        sum_wave_label = Tex("Partial Sum", color=PURPLE).next_to(sum_wave, RIGHT)
        self.play(Create(sum_wave), Write(sum_wave_label), run_time=2)

        # Explanation
        explanation = Text("We now add the third harmonic with the appropriate amplitude scaling.", font_size=24)
        explanation.to_edge(DOWN)
        explanation2 = Text("The blue and green curves represent individual sine waves, and their sum, shown in purple, begins to", font_size=24)
        explanation2.next_to(explanation, UP)
        explanation3 = Text("approximate the square wave shape more closely.", font_size=24)
        explanation3.next_to(explanation2, UP)
        self.play(Write(explanation), Write(explanation2), Write(explanation3), run_time=4)

        self.wait(3)

---
from manim import *

class MyScene(Scene):
    def construct(self):
        # Screen Resolution: 1920x1080 (implicitly set via config)

        # Redraw coordinate axes
        axes = Axes(
            x_range=[0, 10, 1],
            y_range=[-1.5, 1.5, 0.5],
            x_axis_config={"numbers_to_include": np.arange(0, 10, 1)},
            y_axis_config={"numbers_to_include": np.arange(-1.5, 1.5, 0.5)},
            tips=False,
        ).add_coordinates()
        self.play(Create(axes), run_time=1)

        # Define sine wave functions
        fundamental = axes.plot(lambda x: np.sin(x), color=BLUE, stroke_width=2,  x_range=[0, 10])
        third_harmonic = axes.plot(lambda x: (1/3)*np.sin(3*x), color=GREEN, stroke_width=2, x_range=[0, 10])
        fifth_harmonic = axes.plot(lambda x: (1/5)*np.sin(5*x), color=ORANGE, stroke_width=2, x_range=[0, 10])
        seventh_harmonic = axes.plot(lambda x: (1/7)*np.sin(7*x), color=MAGENTA, stroke_width=2, x_range=[0, 10])

        # Define composite curve function
        composite_func = lambda x: np.sin(x) + (1/3)*np.sin(3*x) + (1/5)*np.sin(5*x) + (1/7)*np.sin(7*x)
        composite_curve = axes.plot(composite_func, color=BLACK, stroke_width=4, x_range=[0, 10])

        # Plot sine waves
        self.play(Create(fundamental), run_time=1)
        self.play(Create(third_harmonic), run_time=1)
        self.play(Create(fifth_harmonic), run_time=1)
        self.play(Create(seventh_harmonic), run_time=1)

        # Plot composite curve
        self.play(Create(composite_curve), run_time=1)

        # Place caption
        caption = Tex("Fourier Approximation to Square Wave").scale(0.7).to_edge(DOWN)
        self.play(Write(caption), run_time=1)

        # Explanation
        explanation = [
            "By layering additional odd harmonics—the 5th and 7th terms in this example—",
            "the composite sum (black) more closely approximates the ideal square wave.",
            "Each additional term refines the approximation, illustrating the power of",
            "Fourier series in building complex signals from simple sine waves."
        ]

        full_explanation = ""
        for line in explanation:
            full_explanation += line + " "

        explanation_text = Tex(full_explanation, font_size=24).to_edge(UL, buff = 0.5).scale(0.8)
        self.play(Write(explanation_text), run_time=5)

        self.wait(2)

---
Error: No code found in the response.
---
